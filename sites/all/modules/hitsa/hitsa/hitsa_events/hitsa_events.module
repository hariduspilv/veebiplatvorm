<?php

/**
 * @file
 * Functional part for events
 */
/**
 * Implements hook_menu().
 */
function hitsa_events_menu()
{


    $items['calendar'] = array(
        'title' => '',
        'page callback' => 'hitsa_events_calendar_page',
        'access arguments' => array('access content'),
    );
    $items['training-calendar'] = array(
        'title' => '',
        'page callback' => 'hitsa_events_training_calendar',
        'access arguments' => array('access content'),
    );
    $items['api/events'] = array(
        'title' => check_plain(t('Calendar')),
        'page callback' => 'hitsa_events_endpoint',
        'access arguments' => array('access content'),
    );
    $items['events/calendar/form-submission'] = array(
        'title' => t(''),
        'page callback' => 'hitsa_events_calendar_submission',
        'access arguments' => array('access content'),
    );
    $items['events/calendar/api/add/%/%'] = array(
        'title' => check_plain(t('Calendar')),
        'page callback' => 'hitsa_events_calendar_add',
        'page arguments' => array(4, 5),
        'access arguments' => array('access content'),
    );
    $items['training-calendar/register/%/%/%'] = array(
        'title' => check_plain(t('Register to event')),
        'page callback' => 'hitsa_events_register_event',
        'page arguments' => array(2, 3, 4),
        'access arguments' => array('access content'),
    );
    $items['training-calendar/registration'] = array(
        'title' => check_plain(t('Event registration')),
        'page callback' => 'hitsa_events_training_event_registration',
        'access arguments' => array('access content'),

    );
    $items['api/events_autocomplete'] = array(
        'title' => check_plain(t('Calendar')),
        'page callback' => 'hitsa_events_autocomplete',
        'access arguments' => array('access content'),
    );
    return $items;
    /* Your code here */
}

function hitsa_events_block_info()
{
    // This example comes from node.module.
    if (hitsa_core_get_school_type() == 2) {

        $blocks['fornt_page_events'] = array(
            'info' => t('Front page calendar events'),
            'cache' => DRUPAL_NO_CACHE,
            'visibility' => BLOCK_VISIBILITY_LISTED,
            'pages' => '<front>',
            'region' => 'content',
            'status' => 1,
        );
    }

    $blocks['fornt_page_training'] = array(
        'info' => t('Front training events'),
        'cache' => DRUPAL_NO_CACHE
    );
    $pages = "calendar\ntraining-calendar";
    $blocks['right_side_block'] = array(
        'info' => t('Time periods block'),
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => $pages,
        'region' => 'sidebar_right',
        'status' => 1,
        ''

    );
    return $blocks;
}

function hitsa_events_block_view($delta = '')
{
    // This example is adapted from node.module.
    $block = array();
    switch ($delta) {
        case 'fornt_page_events':
            if (hitsa_core_get_school_type() == 2) {
                $block['subject'] = t('');
                $block['content'] = array(
                    '#markup' => hitsa_events_front_page_block(),
                );
            }
            break;
        case 'fornt_page_training':
            $block['subject'] = t('');
            $block['content'] = array(
                '#markup' => hitsa_events_front_page_training_block(),
            );
            break;
        case 'right_side_block':
            $block['subject'] = t('');
            $block['content'] = array(
                '#markup' => hitsa_events_get_time_period_block(),

            );
            break;
    }

    return $block;
}

function hitsa_events_disable_content_type($type)
{
    $type_info = node_type_load($type);
    $type_info->module = 'node';
    $type_info->custom = 1;
    $type_info->modified = 1;
    $type_info->locked = 0;
    $type_info->disabled = 1;
    node_type_save($type_info);
}

/**
 * Implements hook_node_prepare().
 */
function hitsa_events_node_prepare($node)
{


    return $node;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hitsa_events_preprocess_node(&$variables)
{
    if (!empty($variables['type']) && $variables['type'] == 'event') {
        if (!empty($variables['event_date'])) {
            if (!empty($variables['event_date'][0])) {
            }
        }
    }

    /**
     * Sample code from the api example.
     *  // This example is from rdf_preprocess_image(). It adds an RDF attribute
     *  // to the image hook's variables.
     *  $['attributes']['typeof'] = array('foaf:Image');
     */

    /* Your code here */
}

/**
 * Implements hook_form_alter().
 */
function hitsa_events_form_alter(&$form, &$form_state, $form_id)
{

    switch ($form_id) {
        case 'event_node_form':
            $school_type = hitsa_core_get_school_type();
            if (!empty($form['body'][LANGUAGE_NONE])) {
                $form['body']['und'][0]['summary']['#access'] = false;
            }
            $form['period']['#access'] = false;
            hitsa_events_add_types(variable_get('school_type'));
            if (!empty($form['event_tags'])) {
                $options = $form['event_tags']['und']['#options'];
                if (isset($options['_none'])) {
                    unset($options['_none']);
                    $form['event_tags']['und']['#options'] = $options;
                }

            }
            if (!empty($school_type)) {
                if ($school_type == 1) {
                    $form['field_event_type']['#access'] = false;
                }
            }
            if (!empty($form['field_event_type'])) {
                $options = $form['field_event_type']['und']['#options'];
                if (isset($options['_none'])) {
                    unset($options['_none']);
                    $form['field_event_type']['und']['#options'] = $options;
                }

            }
            if (!empty($form['field_time_period_dates'])) {
                $form['field_time_period_dates']['#access'] = false;
            }

            break;

        default:
            # code...
            break;
    }
}

function hitsa_events_add_types($school_type)
{
    $vocab = taxonomy_vocabulary_machine_name_load($school_type);
    $module_path = drupal_get_path('module', 'hitsa_events');

    $type_file = $module_path . '/includes/time_type.json';

    $json = file_get_contents($type_file);
    $json = json_decode($json);
    if (!empty($json) && !empty($json->schools)) {
        foreach ($json->schools as $key => $school) {
            if ($school->type == $school_type) {
                $vocab = taxonomy_vocabulary_machine_name_load($school->time_period_vocab_name);
                if (empty($vocab)) {
                    $new_taxonomy = (object)array(
                        'name' => $school->time_period_vocab_label,
                        'description' => t('Here you can enter time periods'),
                        'machine_name' => $school->time_period_vocab_name,
                    );
                    $new_taxonomy->i18n_mode = 1;
                    taxonomy_vocabulary_save($new_taxonomy);
                }
                $vocab = taxonomy_vocabulary_machine_name_load($school->time_period_vocab_name);
                foreach ($school->time_type as $key => $time_type) {
                    $term = new stdClass();
                    $term->name = $time_type->en;
                    $term->vid = $vocab->vid;
                    $term->language = 'en';
                    taxonomy_term_save($term);
                    unset($time_type->en);
                    foreach ($time_type as $time_key => $time_element) {
                        $context = array(
                            'term',
                            $term->tid,
                            'name',
                        );
                        $textgroup = 'taxonomy';
                        i18n_string_textgroup($textgroup)->update_translation($context, $time_key, $time_element);
                    }
                }
            }
        }
    }
}

function hitsa_events_calendar_page()
{

    $build = array();
    $build['events'] = array(
        '#markup' => hitsa_events_calendar_page_html(),
    );
    return $build;
}

function hitsa_events_calendar_page_html()
{
    global $language;
    if (empty($_REQUEST)) {
        $events = hitsa_core_get_content_by_type('node', 'event', $language->language);
        if (isset($events['node'])) {
            $event_nids = array_keys($events['node']);
            $events = entity_load('node', $event_nids);
        }
        $periods = array();
        if (!empty($events)) {
            $output = '';
            $events_array = array();
            if (is_array($events)) {
                foreach ($events as $event) {
                    if (!empty($event->field_event_type)) {
                        if ($event->field_event_type['und'][0]['value'] == 'training') {
                            continue;
                        }
                    } else {
                        continue;
                    }
                    if (!empty($event->event_date)) {
                        if ($event->event_date['und'][0]['value'] == $event->event_date['und'][0]['value2']) {
                            $event_html = hitsa_events_event_html($event);
                            $events_array[] = $event_html;
                            // $output.= $event_html['html'];

                            if (!empty($event_html['periods'])) {
                                $periods[$event_html['periods']->tid] = $event_html['periods'];
                                $periods[$event_html['periods']->tid]->events[] = array('date' => $event_html['start_date'], 'html' => $event_html['html']);
                            }
                        } else {
                            $start_date = $event->event_date['und'][0]['value'];
                            $end_date = $event->event_date['und'][0]['value2'];
                            $numDays = abs($start_date - $end_date) / 60 / 60 / 24;
                            for ($i = 0; $i <= $numDays; $i++) {
                                $start_date_date = date('U', strtotime("+{$i} day", $start_date));
                                $event_html = hitsa_events_event_html($event, $type = 'event', $start_date_date);
                                $events_array[] = $event_html;
                                if (is_object($event_html['periods'])) {
                                    $periods[$event_html['periods']->tid] = $event_html['periods'];
                                    $periods[$event_html['periods']->tid]->events[] = array('date' => $event_html['start_date'], 'html' => $event_html['html']);
                                }
                            }
                        }
                    }
                }
            }
        }

        usort($periods, function ($a, $b) {
            return $a->field_time_period_dates['und'][0]['value'] - $b->field_time_period_dates['und'][0]['value'];
        });
    }
    if (empty($output)) {
        $output = '';
    }
    $field = field_info_field('field_event_type');
    $allowed = list_allowed_values($field);
    $taxonomy = taxonomy_vocabulary_machine_name_load('hitsa_event_tags');
    $taxonomy_tree = taxonomy_get_tree($taxonomy->vid);
    $allowed = array();
    foreach ($taxonomy_tree as $term) {
        $allowed[$term->tid] = $term->name;
    }
    $output .= '
      
      
            <div class="block">';
    $output .= '<h2 class="block-title">' . t('Calendar') . '</h2>';
    $output .= '<div class="row">
                  <div class="col-12">
                     <h3>' . t('Filter events') . '</h3>
                  </div><!--/col-12-->
               </div><!--/row-->
               ';
    $output .= '<form method="post" action="kalender.html" data-plugin="filters" class="no-print">
						
               <div class="row">
                  <div class="col-9 sm-12">
                     <h4 data-show="hiddenFilter"></h4>
                     <div data-show="hiddenFilter" class="row-spacer"></div>
                     
                     <div class="btn-bar">';
    if (!empty($allowed)) {
        $output .= '     <span class="btn-input" > ';
        $output .= ' <input type = "checkbox" name = "category" value = "all" checked />';
        $output .= '                      <span class="btn btn-xs btn-alternate" > ' . t('All') . '</span >';
        $output .= '                   </span ><!--/btn - input-->';
    }
    foreach ($allowed as $allowed_key => $allowed_value) {
        $output .= '     <span class="btn-input" > ';
        $output .= ' <input type = "checkbox" name = "category" value = "' . $allowed_key . '"/>';
        $output .= '                      <span class="btn btn-xs btn-alternate" > ' . $allowed_value . '</span >';
        $output .= '                   </span ><!--/btn - input-->';
    }
    $time_periods_tree = taxonomy_vocabulary_machine_name_load('time_periods');
    $time_periods_tree = taxonomy_get_tree($time_periods_tree->vid);
    $time_periods = array();
    foreach ($time_periods_tree as $time_term) {
        if ($time_term->depth == 0) {
            $time_periods[$time_term->tid] = $time_term->name;
        }
    }

    $output .= '      </div><!--/btn-bar-->
                     
                  </div><!--/col-9-->
                  <div class="col-3 sm-12">
                     <a href="javascript:void(0);" class="cta-link pull-right before-plus sm-no-pull" data-toggle="hiddenFilter" data-class="\'active\' : hiddenFilter">' . t('More options') . '</a>
                  </div><!--/col-3-->
               </div><!--/row-->
                  
               <div class="row" data-show="hiddenFilter | flex">
                  <div class="col-12">
                     <div>
                        <div class="row-spacer sm-hide"></div>';
    if (!empty($time_periods)) {
        $output .= '<h4>' . t('School years') . '</h4>
                        <div class="row-spacer"></div>
                        <div class="btn-bar">
                            <span class="btn-input">
                              <input type="checkbox" name="year" value="all" />
                              <span class="btn btn-xs btn-alternate">' . t('All') . '</span>
                           </span><!--/btn-input-->';
        foreach ($time_periods as $time_key => $time_period) {
            $time_period_value = str_replace('/', '-', $time_period);
            $output .= '
                                <span class="btn-input">
                                  <input type="checkbox" name="year" value="' . $time_period_value . '" checked="checked" />
                                  <span class="btn btn-xs btn-alternate"><span class="sm-hide">' . $time_period . '</span><span class="sm-show">' . $time_period . '</span></span>
                               </span><!--/btn-input-->';

        }
        $output .= '</div><!--/btn-bar-->';
    }
    $output .= '
                     </div><!--hiddenFilter-->
                  </div><!--/col-12-->
               </div><!--/row-->
					
               <div class="row-spacer-xs"></div>
               <hr />
               <div class="row-spacer"></div>
               
               <div class="row">
                  <div class="col-12">
                     <div class="form-item-row">
                        
                        <div class="form-item after-search form-item_rounded">
                           <div class="form-item_title">Otsitav sündmus</div>
                           <input type="text" name="event-title" placeholder="Otsi sündmust" data-plugin="autocomplete" data-url="/api/events_autocomplete" data-onSubmit="true" />
                        </div><!--/form-item-->

                        <div class="form-item form-item_rounded after-calendar form-item-stretch">
                           <div class="form-item_title">' . t('Date') . '</div>
                           <input type="text" name="date" data-plugin="datepickerRange" data-onSubmit="true" placeholder="' . t('Choose date') . '" />
                        </div><!--/form-item-->

                        <div class="form-item">
                           <div class="form-item_title">&nbsp;</div>
                           <button class="btn btn-filled">Otsi</button>
                        </div><!--/form-item-->
                        
                     </div><!--/form-item-row-->
                  </div><!--/col-12-->
               </div><!--/row-->
               <input type="hidden" name="type" value="event">
               </form>';
    $output .= '<div class="row-spacer"></div>';
    $output .= '<div class="row">';
    $output .= '<div class="col-12" data-postURL="/api/events" data-plugin="filterContents">';
    if (empty($_REQUEST)) {
        if (!empty($periods)) {
            $output .= hitsa_events_htmlize_periods($periods);
        }
    } else {
        $output .= hitsa_events_endpoint('loaded_page');
    }
    $output .= '</div><!--/col-12-->';
    $output .= '</div><!--/row-->';
    $output .= '
            </div><!--/block-->
            ';
    $api = url('api/events');

    $output .= '
  <div data-url="' . $api . '"></div>
  ';

    return ($output);
}

function hitsa_events_endpoint($loaded_page = null)
{
    $year = null;
    $category = array();
    $search = null;
    $dates = null;
    $years = null;
    $type = null;
    global $language;
    if (!empty($_REQUEST)) {
        $year = (!empty($_REQUEST['year'])) ? $_REQUEST['year'] : null;
        $category = (!empty($_REQUEST['category'])) ? explode(',', $_REQUEST['category']) : null;
        $search = (!empty($_REQUEST['event-title'])) ? ($_REQUEST['event-title']) : null;
        $years = (!empty($_REQUEST['year'])) ? explode(',', $_REQUEST['year']) : null;
        $dates = (!empty($_REQUEST['date'])) ? explode('-', $_REQUEST['date']) : null;
        $type = (!empty($_REQUEST['type'])) ? $_REQUEST['type'] : null;

    }
    $textured_nodes = '';
    $q = db_select('node', 'n');
    $q->fields('n');
    $q->condition('n.type', 'event', '=');
    $q->condition('n.language', $language->language, '=');

    if (!empty($search)) {
        $q->condition('n.title', '%' . $search . '%', 'LIKE');
    }
    if (!empty($years) && $years[0] != 'all') {
        $q->join('field_data_period', 'fdpr', 'fdpr.entity_id=n.nid');
        $db_or = db_or();
        foreach ($years as $year) {
            $year = str_replace('-', '/', $year);
            $year = taxonomy_get_term_by_name($year, 'time_periods');
            foreach ($year as $yeaar) {
                if (is_object($yeaar)) {
                    $year_children = taxonomy_get_children($yeaar->tid, $yeaar->vid);
                    if (!empty($year_children)) {
                        foreach ($year_children as $children_year) {
                            $db_or->condition('fdpr.period_tid', $children_year->tid, '=');
                        }
                    } else {
                        $db_or->condition('fdpr.period_tid', $yeaar->tid, '=');
                    }

                }
            }
        }
        $q->condition($db_or);
        $q->fields('fdpr');
    }
    if (!empty($category) && $category[0] != 'all') {

        $db_or = db_or();
        $q->join('field_data_event_tags', 'fdet', 'n.nid=fdet.entity_id');
        foreach ($category as $category_tid) {
            if ($category_tid != 'all') {
                $db_or->condition('fdet.event_tags_tid', $category_tid, '=');
            }
        }
        $q->condition($db_or);
        $q->fields('fdet');
    }
    if (!empty($type)) {
        $q->join('field_data_field_event_type', 'fdfet', 'n.nid=fdfet.entity_id');
        $q->condition('fdfet.field_event_type_value', $type, '=');
    }
    if (!empty($dates)) {
        $start_date = strtotime(str_replace('/', '-', $dates[0]));
        $end_date = strtotime(str_replace('/', '-', $dates[1]));
        $q->join('field_data_event_date', 'fded', 'fded.entity_id=n.nid');

        $db_or = db_or();
        $db_or->condition('fded.event_date_value', $start_date, '>=');
        $db_or->condition('fded.event_date_value2', $start_date, '>=');

        $q->condition($db_or);
        $q->fields('fded');
//        $q -> condition('fded.event_date_value2',$end_date,'<');
    }
    $r = $q->execute();
    $nodes = array();
    foreach ($r as $key => $node) {
        $nodes[$node->nid] = node_load($node->nid);

    }
    if (!empty($nodes)) {
        $textured_nodes = hitsa_events_get_nodes_html($nodes);
    }
//    else{
//        return '';
//    }
    if (!$loaded_page) {
        if (!empty($textured_nodes)) {
            print($textured_nodes);
        }
    } else {
        if (!empty($textured_nodes)) {
            return $textured_nodes;
        }
    }

}

function hitsa_events_get_nodes_html($nodes)
{
    global $language;
    $periods = array();
    if (!empty($nodes)) {
        $output = '';
        $events_array = array();
        if (is_array($nodes)) {
            foreach ($nodes as $event) {
                if (!empty($event->field_event_type)) {
                    if ($event->field_event_type['und'][0]['value'] == 'training') {
//                        continue;
                    }
                } else {
                    continue;
                }
                if (!empty($event->event_date)) {
                    if ($event->event_date['und'][0]['value'] == $event->event_date['und'][0]['value2']) {
                        $event_html = hitsa_events_event_html($event);
                        $events_array[] = $event_html;
                        // $output.= $event_html['html'];
                        if (!empty($event_html['periods'])) {
                            $periods[$event_html['periods']->tid] = $event_html['periods'];
                            $periods[$event_html['periods']->tid]->events[] = array('date' => $event_html['start_date'], 'html' => $event_html['html']);
                        }
                    } else {
                        $start_date = $event->event_date['und'][0]['value'];
                        $end_date = $event->event_date['und'][0]['value2'];
                        $numDays = abs($start_date - $end_date) / 60 / 60 / 24;
                        for ($i = 0; $i <= $numDays; $i++) {
                            $start_date_date = date('U', strtotime("+{$i} day", $start_date));
                            if (!empty($_REQUEST)) {
                                if (!empty($_REQUEST['date'])) {
                                    $two_dates = explode(' - ', $_REQUEST['date']);

                                    $two_dates[0] = strtotime(str_replace('/', '-', $two_dates[0]));
                                    $two_dates[1] = strtotime(str_replace('/', '-', $two_dates[1]));
                                    if ($two_dates[0] > $start_date_date) {
                                        continue;
                                    }
                                    if ($two_dates[1] < $start_date_date) {
                                        continue;
                                    }
                                }
                            }
                            $event_html = hitsa_events_event_html($event, $type = 'event', $start_date_date, $i);
                            $events_array[] = $event_html;
                            if (is_object($event_html['periods'])) {
                                $periods[$event_html['periods']->tid] = $event_html['periods'];
                                $periods[$event_html['periods']->tid]->events[] = array('date' => $event_html['start_date'], 'html' => $event_html['html']);
                            }
                        }
                    }
                }
            }

        }
    }
    usort($periods, function ($a, $b) {
        return $a->field_time_period_dates['und'][0]['value'] - $b->field_time_period_dates['und'][0]['value'];
    });
    if (!empty($periods)) {
        $output = hitsa_events_htmlize_periods($periods);
    }
    unset($periods);
    if (!empty($output)) {
        return $output;
    }
}

function hitsa_events_event_html($event = null, $type = null, $start_date_date = null, $number = null)
{
    global $language;
    $periood = null;
    $time = time();
    $time = strtotime('today midnight');
    setlocale(LC_CTYPE, 'et_EE');
    if (!empty($periood)) {
        unset($periood);
    }
    if (!empty($event->period)) {
        if (isset($event->period[$language->language])) {
            $period_id = $event->period[$language->language][0]['tid'];
            $periood = taxonomy_term_load($period_id);
            if (!empty($periood->events)) {
//                unset($periood->events);
            }
        }
    }

    if (module_exists('i18n_taxonomy')) { //To not break your site if module is not installed
//        $period = i18n_taxonomy_localize_terms($period);
    }
//    dpm($period);
    $output = '';
    $object_class = '';
    if (!empty($event->event_date)) {
        $start_date = !empty($event->event_date['und'][0]['value']) ? $event->event_date['und'][0]['value'] : null;
        $end_date = !empty($event->event_date['und'][0]['value2']) ? $event->event_date['und'][0]['value2'] : null;

        $time_hours_minutes_all = (!empty($start_date)) ? t('Time: ') . date('G:i', $start_date) : null;

        if ($type == 'training') {
            $time_hours_minutes = '<span class="before-calendar">' . date('j.m', $start_date) . ' - ' . date('j.m', $end_date) . '</span>';
        }
        if (empty($start_date_date)) {
            $start_date_date = $start_date;
        }
        if ($time > $start_date_date) {
            $object_class = 'object-inactive';
        }
        if ($time == $start_date_date) {
            $object_class = '';
        }

        $locations = array();
        if (!empty($event->locations)) {
            foreach ($event->locations[$language->language] as $location) {
                $location = taxonomy_term_load($location['tid']);
                $locations[$location->name] = $location->name;
            }
            $location_ready = '';
            foreach ($locations as $location) {
                if (empty($location_ready)) {
                    $location_ready = t('Location:') . ' ' . $location;
                } else {
                    $location_ready .= ', ' . $location;
                }
                // $location_ready = t('Location:') . (empty($location_ready)) ? $location : $location_ready . ', ' . $location;
            }
        }
        $tags = array();
        if (!empty($event->event_tags)) {
            foreach ($event->event_tags[$language->language] as $tag) {
                $tid = $tag['tid'];
                $tag = taxonomy_term_load($tag['tid']);
                $tag = i18n_taxonomy_term_get_translation($tag, $language->language); // The important part!
                $translated = i18n_string_translate("taxonomy:term:$tid:name", $tag->name);

                $tags[$translated] = $translated;
            }
            $tags_ready = '';
            foreach ($tags as $tag) {
                $tags_ready .= '<li><a href="">' . $tag . '</a></li>';
            }
        }
        $training_tags = '';
        $training_cost = null;
        if ($type == 'training') {
            if (!empty($event->field_training_cost)) {
                $training_cost = '<span class="before-money">' . $event->field_training_cost['und'][0]['value'] . ' €</span>';
            }
            if (!empty($event->field_taining_tags)) {
                $tags = array();
                foreach ($event->field_taining_tags['und'] as $training_tag) {
                    $tag = taxonomy_term_load($training_tag['target_id']);
                    $tag = i18n_taxonomy_term_get_translation($tag, $language->language); // The important part!


                    $translated = i18n_string_translate("taxonomy:term:$tid:name", $tag->name);

                    $tags[$translated] = $translated;
                }
                foreach ($tags as $tag) {
                    $training_tags .= '<li><a href="">' . $tag . '</a></li>';
                }
            }
            if (!empty($event->field_registration_form)) {
                $reg_form_id = $event->field_registration_form['und'][0]['target_id'];
            }
        }

        if ($event->title == 'Fere') {
            if (!empty($event->field_registration_form)) {
                $webform = $event->field_registration_form['und'][0]['target_id'];
                $webform = 'webform_client_form_' . $webform;
            }
        }
        if (empty($start_date_date)) {
            $start_date_date = $start_date;
        }
        $output .= '<div class="object object-event ' . $object_class . '">';
        $output .= '<div class="object-inner">';
        $output .= '<a href="#" onclick="event.preventDefault();" class="object-date">';
        $output .= '<span class="object-date_day">';
        $output .= format_date($start_date_date, 'custom', 'd', null, $language->language);
        $output .= '</span>';
        $output .= '<span class="object-date_month">';
        $output .= format_date($start_date_date, 'custom', 'F', null, $language->language);
        $output .= '</span>';
        $output .= '</a><!--/object-date-->';
        $output .= '<div class="object-content">';
        $output .= '<a href="#" onclick="event.preventDefault();" class="object-title">';
        $output .= $event->title;
        $output .= '</a>';
        $output .= '<div class="object-footer">';
        if ($type != 'training') {
            $output .= (!empty($location_ready)) ? $location_ready . ', ' : '';
        } else {
            $output .= (!empty($location_ready)) ? $location_ready . ', ' : '';
        }
        $output .= (!empty($time_hours_minutes_all)) ? $time_hours_minutes_all . ' ' : '';
        $output .= (!empty($time_hours_minutes)) ? $time_hours_minutes . '' : '';
        $output .= ($type == 'training' && !empty($training_cost)) ? ' ' . $training_cost . ' ' : '';
        $output .= '<br />';
//        $output.= ($type!='training')?'<a class="before-calendar">'.t('Add to calendar').'</a>':'';
        if ($start_date_date > time()) {
            $output .= ($type == 'training') ? '<a href="/events/calendar/api/add/' . $event->nid . '/' . $start_date_date . '" data-plugin="modal" class="before-calendar">' . t('Add to calendar') . '</a>' : '';
            if (!empty($reg_form_id)) {
                $output .= ($type == 'training') ? '<br><a href="training-calendar/register/' . $event->nid . '/' . $reg_form_id . '/' . $start_date_date . '" data-plugin="modal" class="before-register">' . t('Register to training') . '</a>' : '';
            }
        }
        $output .= (!empty($tags_ready) && $type != 'training') ? '<ul class="tags">' : '';
        $output .= (!empty($tags_ready) && $type != 'training') ? $tags_ready : '';
        $output .= (!empty($tags_ready) && $type != 'training') ? '</ul><!--/tags-->' : '';
        $output .= (!empty($training_tags) && $type == 'training') ? '<ul class="tags">' : '';
        $output .= (!empty($training_tags) && $type == 'training') ? $training_tags : '';
        $output .= (!empty($training_tags) && $type == 'training') ? '</ul><!--/tags-->' : '';
        $output .= '</div><!--/object-footer-->';
        $output .= '</div><!--/object-content-->';
        $output .= '<div class="object-button">';
        $output .= '<!-- toggle muutuja on ID.. OBJEKTI ID -->';
        $details_number = $event->nid + $start_date_date;
        $details_number .= (!empty($number)) ? $number : '';

        $output .= '<a href="javascript:void(0);" class="btn sm-stretch" data-toggle="object-details_' . $details_number . '" data-hide="object-details_' . $details_number . '">' . t('Read more') . '</a>';
        $output .= '<div data-show="object-details_' . $details_number . '">';
        $output .= '<a href="javascript:void(0);" class="btn-circle before-share" data-plugin="share"></a>';
        $output .= '<a href="javascript:window.print();" class="btn-circle before-print"></a>';
        $output .= '<a href="javascript:void(0);" data-toggle="object-details_' . $details_number . '" class="sm-show btn btn-transparent after-close">' . t('Close') . '</a>';
        $output .= '</div><!--/object-details_' . $event->nid . '-->';
        $output .= '</div><!--/object-button-->';
        $output .= '</div><!--/object-inner-->';
        $output .= '<div class="object-details" data-show="object-details_' . $details_number . '">';
        //$output .= '<p>';
        $output .= (!empty($event->body)) ? $event->body['und'][0]['value'] : '';
        //$output .= '</p>';
        $output .= '</div>';
        $output .= '</div>';
    }
    return array('html' => $output, 'periods' => $periood, 'start_date' => $start_date_date);
}

function hitsa_events_get_time_period_block()
{
    $time_period_block_title = variable_get('period_title');
    $time_periods = hitsa_events_get_time_periods();
    $output = '';
    if (!empty($time_periods)) {
        $output .= '
            <div class="block block-narrow">';
        $output .= (!empty($time_period_block_title)) ? '<h2 class="block-title">' . $time_period_block_title . '</h2>' : '';
        $output .= '<div class="row">';
        $output .= $time_periods;
        $output .= '</div><!--/row-->';
        $output .= '</div><!--/block-->';
    }
    return $output;
}

function hitsa_events_get_time_periods()
{
    $time_periods_vocabulary = taxonomy_vocabulary_machine_name_load('time_period_info');
    $time_periods = taxonomy_get_tree($time_periods_vocabulary->vid, 0, null, true);

    $output = '';
    $time_periods_count = count($time_periods);
    $i = 0;
    foreach ($time_periods as $time_period) {
        if (module_exists('i18n_taxonomy')) { //To not break your site if module is not installed
            $time_period = i18n_taxonomy_localize_terms($time_period); // The important part!
        }
        $time_period_start = (!empty($time_period->field_time_period_dates_info)) ? $time_period->field_time_period_dates_info['und'][0]['value'] : null;
        $time_period_end = null;
        if ($time_period->field_time_period_dates_info['und'][0]['value2'] != $time_period->field_time_period_dates_info['und'][0]['value']) {
            $time_period_end = $time_period->field_time_period_dates_info['und'][0]['value2'];
        }
        $dated_start = (!empty($time_period_start)) ? strftime('%d. %B', $time_period_start) : null;
        $dated_end = (!empty($time_period_end)) ? strftime('%d. %B', $time_period_end) : null;
        $output .= '          <div class="col-12">';
        $output .= '             <a href="" class="object object-small object-horizontal object-inactive">';
        $output .= '                <span class="object-inner">';
        $output .= '                   <span class="object-content">';
        $output .= '                      <span class="object-title">' . t($time_period->name) . '</span>';
        $output .= '                      <span class="object-footer">';
        $output .= (!empty($dated_start)) ? '<span class="before-calendar">' . $dated_start : '';
        $output .= (!empty($dated_end)) ? ' - ' . $dated_end : '';
        $output .= (!empty($dated_start)) ? '</span>' : '';
        $output .= '                      </span><!--/object-footer-->';
        $output .= '                   </span><!--/object-content-->';
        $output .= '                </span><!--/object-inner-->';
        $output .= '             </a><!--/object-->';
        $output .= '          </div><!--/col-12-->';
        $output .= ($i != $time_periods_count - 1) ? '          <hr />' : '';
        $i++;
    }
    return $output;
}

function hitsa_events_front_page_block()
{
    global $language;
    $events = hitsa_core_get_content_by_type('node', 'event', $language->language, $conditions = array('event_type' => 'event'));
    $school_type = hitsa_core_get_school_type();
    if (isset($events['node'])) {
        $event_nids = array_keys($events['node']);
        $events = entity_load('node', $event_nids);
    }
    $time = time();

    foreach ($events as $key => $event) {
        if (!empty($event->field_event_type)) {
            if ($event->field_event_type['und'][0]['value'] != 'training') {
                if (!empty($event->event_date)) {
                    $event_start_date = $event->event_date['und'][0]['value'];
                    $event_end_date = $event->event_date['und'][0]['value2'];
                    if ($event_start_date > $time) {
                    } elseif ($event_start_date < $time && $time < $event_end_date) {
                        // code...
                    } else {
                        unset($events[$key]);
                    }
                    //dpm($event);
                }
            } else {
                unset($events[$key]);
            }
        } else {
            unset($events[$key]);
        }
    }
    if (!empty($events)) {
        $event_tags = taxonomy_vocabulary_machine_name_load('hitsa_event_tags');
        $event_tags = taxonomy_get_tree($event_tags->vid);

        $events_array = array();
        foreach ($events as $key => $event) {
            if (!empty($event->event_tags)) {
                foreach ($event->event_tags[$language->language] as $tags) {
                    $loaded_tag = taxonomy_term_load($tags['tid']);
                    $loaded_tag = i18n_taxonomy_localize_terms($loaded_tag);
                    $events_array[$loaded_tag->name][] = $event;
                }
            }
        }
        $output = '<div class="block" data-plugin="tabs">';
        $output .= '<h2 class="block-title">' . t('Events calendar') . '</h2>';
        $output .= '           ';
        $output .= '           <div class="row pull-up">';
        $output .= '              <div class="col-12">';
        $i = 0;
        foreach ($events_array as $key => $event_type) {
            $output .= '<a href="javascript:void(0);" data-target="tab-' . $i . '" class="link-tab">' . $key . '</a>';
            $i++;
        }
        $output .= '              </div><!--/col-12-->';
        $output .= '           </div><!--/row-->';
        $events_count = count($events);
        $j = 0;

        foreach ($events_array as $key => $event_type) {
            $i = 0;
            $output .= '<div data-tab="tab-' . $j . '">';

            usort($event_type, function ($a, $b) {
                return $a->event_date['und'][0]['value'] - $b->event_date['und'][0]['value'];
            });
            $event_type_count = count($event_type);
            $location = '';
            foreach ($event_type as $event) {
                if (!empty($event->locations)) {
                    if (!empty($event->locations[$language->language][0])) {
                        $location = taxonomy_term_load($event->locations[$language->language][0]['tid']);
                        $location = i18n_taxonomy_localize_terms($location);
                        $location = $location->name;
                    }
                } else {
                    $location = null;
                }
                if ($i == 0 || $i == 2) {
                    $output .= '<div class="row">';
                }
                if (!empty($event->event_date)) {
                    $time = strtotime('today midnight');
                    $start = $event->event_date['und'][0]['value'];
                    $start_readable_day = date('d', $start);
                    $start_readable_month = strftime('%B', $start);
                    $start_readable_month = format_date($start, 'custom', 'F', null, null);

                    $start_readable_time = strftime('%H:%M', $start);
                    $end = $event->event_date['und'][0]['value2'];
                }
                if ($school_type == 1) {
                    $output .= '<div class="col-12">';
                } else {
                    $output .= '<div class="col-6 sm-12">';
                }
                $output .= '                <div class="object object-event">';
                $output .= '                   <div class="object-inner">';
                $output .= '                      <a href="" class="object-date">';
                $output .= '                         <span class="object-date_day">' . $start_readable_day . '</span>';
                $output .= '                         <span class="object-date_month">' . $start_readable_month . '</span>';
                $output .= '                      </a><!--/object-date-->';
                $output .= '                      <span class="object-content">';
                $output .= '                         <a href="" class="object-title">' . $event->title . '</a>';
                $output .= '                         <span class="object-footer">';
                $output .= (!empty($location)) ? '                     ' . t('Location') . ': ' . $location : '';
                $output .= '                             , ' . t('Time') . ' ' . $start_readable_time . '<br />';
                $output .= '                            <a href="/events/calendar/api/add/' . $event->nid . '/' . $start . '" data-plugin="modal" class="before-calendar">' . t('Add to calendar') . '</a>';
                $output .= '                         </span><!--/object-footer-->';
                $output .= '                      </span><!--/object-content-->';
                $output .= '                   </div><!--/object-inner-->';
                $output .= '                </div><!--/object-->';
                $output .= '             </div><!--/col-6-->';
                if ($i == 1 || $i == 3 || $i == $event_type_count - 1) {
                    $output .= ' </div><!--/row-->';
                }

                if ($i == 1 || $i == 3 || $i == $event_type_count - 1) {
                    $output .= ' <hr />';
                    $output .= ' <div class="row-spacer-xs"></div>';
                }
                if($schhool_type==2 && $i==0){
                    $output.= '<hr class="sm-show">';
                }
                if ($school_type == 1 && $i == 0) {
                    $output .= ' <hr />';
                    $output .= ' <div class="row-spacer-xs"></div>';
                }
                if ($i == 3 || $i == $event_type_count - 1) {
                }
                $i++;
                if ($school_type == 1) {
                    if ($i == 2) {
                        break;
                    }
                }
                if ($i == 4) {
                    break;
                }
            }
            if ($j == 0) {
                $link = url('calendar');
            }
            if ($j == 1) {
                $link = url('training_calendar');
            }
            $output .= ' <div class="row">';
            $output .= '          <div class="col-12">';
            $output .= '             <a  href="' . $link . '" class="btn btn-filled sm-stretch">' . t(':key calendar', array(':key' => $key)) . '</a>';
            $output .= '          </div><!--/col-12-->';
            $output .= '       </div><!--/row-->';
            $output .= '</div><!--/data-tab-' . $j . '-->';
            $j++;
        }


        $output .= '</div><!--/block-->';

        return $output;
    }
}

function hitsa_events_node_presave($node)
{

    if ($node->type == 'event') {
        $time_periods_vocabulary = taxonomy_vocabulary_machine_name_load('time_periods');
        $time_periods = taxonomy_get_tree($time_periods_vocabulary->vid);
        $period_start = null;
        $period_end = null;
        $event_date = null;
        $time_period_tid = null;
        if (!empty($node->event_date)) {
            $event_date = $node->event_date[LANGUAGE_NONE][0]['value'];
        }
        foreach ($time_periods as $time_period) {
            $loaded_period = taxonomy_term_load($time_period->tid);
            if (!empty($loaded_period->field_time_period_dates)) {
                $period_start = $loaded_period->field_time_period_dates['und'][0]['value'];
                $period_end = $loaded_period->field_time_period_dates['und'][0]['value2'];
                if ($event_date >= $period_start && $event_date <= $period_end) {
                    $time_period_tid = $loaded_period->tid;
                }
            }
        }
        if ($time_period_tid) {
            if (!isset($node->period)) {
                global $language;
                $node->period[$language->language][0]['tid'] = $time_period_tid;
            } else {
                global $language;
                $node->period[$language->language][0]['tid'] = $time_period_tid;
            }
        }
//        krumo($node);
        if (!empty($node->field_event_type)) {
            $event_type = $node->field_event_type['und'][0]['value'];
            if ($event_type == 'training') {
                // hitsa_events_create_registration_form($node);
            }
        }
        // exit();
    }
}

function hitsa_events_training_calendar()
{
    global $language;
    if (empty($_REQUEST)) {
        $events = hitsa_core_get_content_by_type('node', 'event', $language->language, $conditions = array('event_type' => 'training'));

        if (isset($events['node'])) {
            $event_nids = array_keys($events['node']);
            $events = entity_load('node', $event_nids);
        }

        $periods = array();
        if (!empty($events)) {
            $output = '';
            $events_array = array();
            if (is_array($events)) {
                foreach ($events as $event) {
                    if (!empty($event->event_date)) {
                        if ($event->event_date['und'][0]['value'] == $event->event_date['und'][0]['value2']) {
                            $event_html = hitsa_events_event_html($event, $type = 'training');
                            $events_array[] = $event_html;
                            // $output.= $event_html['html'];
                            $periods[$event_html['periods']->tid] = $event_html['periods'];
                            $periods[$event_html['periods']->tid]->events[] = array('date' => $event_html['start_date'], 'html' => $event_html['html']);
                        } else {
                            $start_date = $event->event_date['und'][0]['value'];
                            $end_date = $event->event_date['und'][0]['value2'];
                            $numDays = abs($start_date - $end_date) / 60 / 60 / 24;
                            for ($i = 0; $i <= $numDays; $i++) {
                                $start_date_date = date('U', strtotime("+{$i} day", $start_date));
                                $event_html = hitsa_events_event_html($event, $type = 'training', $start_date_date);
                                $events_array[] = $event_html;
                                $periods[$event_html['periods']->tid] = $event_html['periods'];
                                $periods[$event_html['periods']->tid]->events[] = array('date' => $event_html['start_date'], 'html' => $event_html['html']);
                            }
                        }
                    }
                }
            }
        }
        usort($periods, function ($a, $b) {
            return $a->field_time_period_dates['und'][0]['value'] - $b->field_time_period_dates['und'][0]['value'];
        });
    }
//    $field = field_info_field('field_event_type');
    $allowed = list_allowed_values($field);
    $taxonomy = taxonomy_vocabulary_machine_name_load('hitsa_event_tags');
    $taxonomy_tree = taxonomy_get_tree($taxonomy->vid);
    $allowed = array();
//    foreach ($taxonomy_tree as $term) {
//        $allowed[$term->tid] = $term->name;
//    }
    //TODO Koolituste filtrid korda teha.
    if (!isset($output)) {
        $output = '';
    }
    $output .= '
      
      
            <div class="block">';
    $output .= '<h2 class="block-title">' . t('Calendar') . '</h2>';
    $output .= '<div class="row">
                  <div class="col-12">
                     <h3>' . t('Filter events') . '</h3>
                  </div><!--/col-12-->
               </div><!--/row-->
               ';
    $output .= '<form method="post" action="kalender.html" data-plugin="filters" class="no-print">
						
               <div class="row">
                  <div class="col-9 sm-12">
                     <h4 data-show="hiddenFilter"></h4>
                     <div data-show="hiddenFilter" class="row-spacer"></div>
                     
                     <div class="btn-bar">';
    if (!empty($allowed)) {
        $output .= '     <span class="btn-input" > ';
        $output .= ' <input type = "checkbox" name = "category" value = "all" checked />';
        $output .= '                      <span class="btn btn-xs btn-alternate" > ' . t('All') . '</span >';
        $output .= '                   </span ><!--/btn - input-->';
    }
    foreach ($allowed as $allowed_key => $allowed_value) {
        $output .= '     <span class="btn-input" > ';
        $output .= ' <input type = "checkbox" name = "category" value = "' . $allowed_key . '"/>';
        $output .= '                      <span class="btn btn-xs btn-alternate" > ' . $allowed_value . '</span >';
        $output .= '                   </span ><!--/btn - input-->';
    }
    $time_periods_tree = taxonomy_vocabulary_machine_name_load('time_periods');
    $time_periods_tree = taxonomy_get_tree($time_periods_tree->vid);
    $time_periods = array();
    foreach ($time_periods_tree as $time_term) {
        if ($time_term->depth == 0) {
            $time_periods[$time_term->tid] = $time_term->name;
        }
    }

    $output .= '      </div><!--/btn-bar-->
                     
                  </div><!--/col-9-->
                  <div class="col-3 sm-12">
                     <a href="javascript:void(0);" class="cta-link pull-right before-plus sm-no-pull" data-toggle="hiddenFilter" data-class="\'active\' : hiddenFilter">' . t('More options') . '</a>
                  </div><!--/col-3-->
               </div><!--/row-->
                  
               <div class="row" data-show="hiddenFilter | flex">
                  <div class="col-12">
                     <div>
                        <div class="row-spacer sm-hide"></div>';
    if (!empty($time_periods)) {
        $output .= '<h4>' . t('School years') . '</h4>
                        <div class="row-spacer"></div>
                        <div class="btn-bar">
                            <span class="btn-input">
                              <input type="checkbox" name="year" value="all" checked="checked"/>
                              <span class="btn btn-xs btn-alternate">' . t('All') . '</span>
                           </span><!--/btn-input-->';
        foreach ($time_periods as $time_key => $time_period) {
            $time_period_value = str_replace('/', '-', $time_period);
            $output .= '
                                <span class="btn-input">
                                  <input type="checkbox" name="year" value="' . $time_period_value . '"  />
                                  <span class="btn btn-xs btn-alternate"><span class="sm-hide">' . $time_period . '</span><span class="sm-show">' . $time_period . '</span></span>
                               </span><!--/btn-input-->';

        }
        $output .= '</div><!--/btn-bar-->';
    }
    $output .= '
                     </div><!--hiddenFilter-->
                  </div><!--/col-12-->
               </div><!--/row-->
					
               <div class="row-spacer-xs"></div>
               <hr />
               <div class="row-spacer"></div>
               
               <div class="row">
                  <div class="col-12">
                     <div class="form-item-row">
                        
                        <div class="form-item after-search form-item_rounded">
                           <div class="form-item_title">Otsitav sündmus</div>
                           <input type="text" name="event-title" placeholder="Otsi sündmust" data-plugin="autocomplete" data-url="/api/events_autocomplete" data-onSubmit="true" />
                        </div><!--/form-item-->

                        <div class="form-item form-item_rounded after-calendar form-item-stretch">
                           <div class="form-item_title">' . t('Date') . '</div>
                           <input type="text" name="date" data-plugin="datepickerRange" data-onSubmit="true" placeholder="' . t('Choose date') . '" />
                        </div><!--/form-item-->

                        <div class="form-item">
                           <div class="form-item_title">&nbsp;</div>
                           <button class="btn btn-filled">Otsi</button>
                        </div><!--/form-item-->
                        
                     </div><!--/form-item-row-->
                  </div><!--/col-12-->
               </div><!--/row-->
               
                              <input type="hidden" name="type" value="training" />
               </form>';
    $output .= '<div class="row-spacer"></div>';
    $output .= '<div class="row">';
    $output .= '<div class="col-12" data-postURL="api/events" data-plugin="filterContents">';
//    $output .= '<div class="accordion" data-plugin="accordion">';
//    foreach ($periods as $period) {
//        $output .= '<div class="accordion-entry">';
//        $output .= '<div class="accordion-title">' . $period->name . '</div>';
//        $output .= '<div class="accordion-content">';
//        $events_count = count($period->events);
//        $i = 0;
//
//        $time = strtotime('today midnight');
//
//        if (!empty($period->field_time_period_dates)) {
//            if ($time >= $period->field_time_period_dates['und'][0]['value'] && $time <= $period->field_time_period_dates['und'][0]['value2']) {
//                array_unshift($period->events, array(
//                    'date' => (string)strtotime('today midnight'),
//                    'html' => '<div class="object-dateseparator"><span>' . t('today') . ', ' . format_date($time, 'custom', 'd.F') . '</span></div>',
//                    'today' => true,
//                ));
//            }
//        }
//        usort($period->events, function ($a, $b) {
//            return $a['date'] - $b['date'];
//        });
//
//        $new_counter = 2;
//        foreach ($period->events as $key => $event_html) {
//            $time = strtotime('today midnight');
//            $date = date('dmY', $time);
//            $date_out = '<div class="object-dateseparator"><span>' . t('today') . ', ' . strftime('%d. %B', $time) . '</span></div>';
//            $tomorrow = false;
//
//            if (!empty($period->events[$key + 2])) {
//                if ($time < $period->events[$key + 2]['date']) {
//                    if ($event_html['date'] <= $time) {
//                        $tomorrow = true;
//                    }
//                }
//
//                // code...
//            }
//            if (isset($event_html['today'])) {
//                $today = true;
//            }
//            if ($key != 0) {
//                if (isset($today)) {
//                    if ($new_counter == 0) {
//                        unset($today);
//                    }
//                    $new_counter--;
//                }
//                if (!isset($today)) {
//                    $output .= '<hr />';
//                }
//                if ($new_counter == 0) {
//                    $output .= '<hr />';
//                }
//            }
//            if ($tomorrow) {
//                // $output.= $date_out;
//            }
//            $output .= $event_html['html'];
//
//            $i++;
//        }
//        $output .= '</div><!--/accordion-content-->';
//        $output .= '</div><!--/accordion-entry-->';
//    }

    if (empty($_REQUEST)) {
        if (!empty($periods)) {
            $output .= hitsa_events_htmlize_periods($periods);
        }
    } else {
        $output .= hitsa_events_endpoint('loaded_page');
    }
//    $output .= '</div><!--/accordion-->';
    $output .= '</div><!--/col-12-->';
    $output .= '</div><!--/row-->';
    $output .= '
            </div><!--/block-->
            
         </div><!--/col-9-->';


    return ($output);
}

function hitsa_events_front_page_training_block()
{
    return hitsa_events_for_services();
}

function hitsa_events_for_services()
{
    global $language;

    $time = strtotime('today midnight');
    $events = hitsa_core_get_content_by_type('node', 'event', $language->language, $conditions = array('event_type' => 'training'));
    if (isset($events['node'])) {
        $event_nids = array_keys($events['node']);
        $events = entity_load('node', $event_nids);
    }
    $new_events = array();
    if (!empty($events)) {
        foreach ($events as $event) {
            if (!empty($event->event_date)) {
                $start = $event->event_date['und'][0]['value'];
                $end = $event->event_date['und'][0]['value2'];
                if ($start >= $time) {
                    $new_events[] = $event;
                } elseif ($time <= $end) {
                    $new_events[] = $event;
                }
            }
        }
    }
    if (!empty($new_events)) {
        $output = '';
        $events_count = count($new_events);
        $i = 0;
        usort($new_events, function ($a, $b) {
            return $a->event_date['und'][0]['value'] - $b->event_date['und'][0]['value'];
        });
        if (!empty($new_events)) {
            $output .= ' <div data-tab="tab-2">';
            $output .= '             <div class="row">';
        }
        foreach ($new_events as $event) {
            $start = $event->event_date['und'][0]['value'];
            $end = $event->event_date['und'][0]['value2'];
            $start_out = date('d.m', $start);
            $end_out = date('d.m', $end);
            $date_out = '';
            $price = null;
            if ($start == $end) {
                $date_out = $start_out;
            } else {
                $date_out = $start_out . ' - ' . $end_out;
            }

            if (!empty($event->field_training_cost)) {
                $price = $event->field_training_cost['und'][0]['value'];
            }
            $output .= '<div class="col-12">';
            $output .= '   <a href="" class="object object-small object-horizontal">';
            $output .= '      <span class="object-inner">';
            $output .= '         <span class="object-content">';
            $output .= '            <span class="object-title">' . $event->title . '</span>';
            $output .= '            <span class="object-footer">';
            $output .= '               <span class="before-calendar">' . $date_out . '</span>';
            $output .= (!empty($price)) ? '               <span class="before-money">' . $price . ' €</span>' : '';
            $output .= '            </span><!--/object-footer-->';
            $output .= '         </span><!--/object-content-->';
            $output .= '      </span><!--/object-inner-->';
            $output .= '   </a><!--/object-->';
            $output .= '</div><!--/col-12-->';
            if ($i != 0) {
                $output .= '<hr>';
            }
            if ($i == 4) {
                break;
            }
            $i++;
        }
        if (!empty($new_events)) {
            $output .= '<div class="col-12 col-margin">';
            $output .= '                  <a href="' . url('training_calendar') . '" class="btn btn-filled btn-stretch">' . t('Training calendar') . '</a>';
            $output .= '               </div><!--/col-12-->';
            $output .= '</div><!--/row-->';
            $output .= '         </div><!--/data-tab-->';
        }
        return $output;
    }
}

function hitsa_events_htmlize_periods($periods)
{
    $output = '';

    $output .= '<div class="accordion" data-plugin="accordion">';
    foreach ($periods as $period) {
        $output .= '<div class="accordion-entry">';
        $events_count = count($period->events);
        $output .= '<div class="accordion-title">' . $period->name . '(' . $events_count . ')</div>';
        $output .= '<div class="accordion-content">';

        $i = 0;

        $time = strtotime('today midnight');

        if (!empty($period->field_time_period_dates)) {
            if ($time >= $period->field_time_period_dates['und'][0]['value'] && $time <= $period->field_time_period_dates['und'][0]['value2']) {
                array_unshift($period->events, array(
                    'date' => (string)strtotime('today midnight'),
                    'html' => '<div class="object-dateseparator"><span>' . t('today') . ', ' . format_date($time, 'custom', 'd.F') . '</span></div>',
                    'today' => true,
                ));
            }
        }
        usort($period->events, function ($a, $b) {
            return $a['date'] - $b['date'];
        });
        $new_counter = 2;
        foreach ($period->events as $key => $event_html) {
            if (isset($event_html['today'])) {
                $today = true;
            }
            if ($key != 0) {
                if (isset($today)) {
                    if ($new_counter == 0) {
                        unset($today);
                    }
                    $new_counter--;
                }
                if (!isset($today)) {
                    $output .= '<hr />';
                }
                if (!empty($period->events[$key - 1])) {
                    if (isset($period->events[$key - 1]['today'])) {

                    } else {

                        if ($new_counter == 0) {
                            $output .= '<hr />';
                        }
                    }
                }

            }
            $output .= $event_html['html'];
            $i++;
        }
        $output .= '</div><!--/accordion-content-->';
        $output .= '</div><!--/accordion-entry-->';
    }
    $output .= '</div><!--/accordion-->';

    return $output;
}

function hitsa_events_autocomplete()
{
    global $language;
    $q = db_select('node', 'n');
    $q->condition('n.type', 'event', '=');
    $q->condition('n.language', $language->language, '=');
    if (!empty($_REQUEST)) {
        if (!empty($_REQUEST['search'])) {
            $q->condition('n.title', '%' . $_REQUEST['search'] . '%', 'LIKE');
        }
        if (!empty($_REQUEST['type'])) {
            $q->join('field_data_field_event_type', 'fdfet', 'n.nid=fdfet.entity_id');
            $q->condition('fdfet.field_event_type_value', $_REQUEST['type'], '=');
        }
    }
    $q->fields('n');

    $result = $q->execute();
    $data = array();
    $data['list'] = array();
    foreach ($result as $node) {
        $node_title = $node;
        $data['list'][] = array(
            'title' => $node->title,
        );
    }
    if (!empty($data['list'])) {
        $json = json_encode($data);
        print($json);
    }


}

function hitsa_events_calendar_add($event_id = null, $date = null)
{
    $build = array();
    $build['calender_add_block'] = array(
        '#type' => 'markup',
        '#markup' => hitsa_events_calendar_add_block($event_id, $date),
    );
//    $page = array(
//        '#type' => 'page',
//    );
//    $page = drupal_render_page($page);
//    print($page);

    return $build;
}

function hitsa_events_calendar_add_block($event_id = null, $date = null)
{
    $form = drupal_get_form('hitsa_events_add_to_calendar_form', $event_id, $date);
    // $form['email_container']['submit']['#attached']['js'][0]['data']['ajax']['edit-submit']['prevent']= 'default';
    $form_real = array(
        'form' => $form,
    );
//    krumo($form_real);
    $output = '';
    $drupal_js = drupal_get_js();
//        krumo($drupal_js);
    $output .= '<div class="block" data-modal="true">';
    $output .= '           ';
    $output .= '           <h1 class="block-title">' . t('Add to calendar') . ' <a href="javascript:void(0);" data-close="true" class="btn btn-transparent pull-right after-close">' . t('Close') . '</a></h1>';
    $output .= '			';
    $output .= '			<div class="row-spacer-xs"></div>';
    $output .= '			';
    $output .= drupal_render($form_real);
    // $output.= drupal_get_js();
    $output .= '    </div><!--/block-->';
    return $output;
}

function hitsa_events_add_to_calendar_form($form, &$form_state, $event_id = null, $date = null)
{
    $form = array(
        '#id' => 'ajax-target-sending',
        '#action' => 'events/calendar/form-submission',
        '#attributes' => array(
            'data-plugin' => 'ajaxForm',
        ),
        '#method' => 'POST',
    );
    $form['event'] = array(
        '#type' => 'hidden',
        '#value' => $event_id,
    );
    $form['date'] = array(
        '#type' => 'hidden',
        '#value' => $date,
    );
    $form['selections'] = array(
        '#type' => 'container',
        '#theme_wrappers' => array(),
        '#prefix' => '<div class="form-item">',
        '#suffix' => '</div><!--/form-item-->',

    );
    $form['selections']['icaldownload'] = array(
        '#name' => 'icaldownload',
        '#id' => 'icaldownload',
        '#type' => 'checkbox',
        '#theme_wrappers' => array(),
        '#title' => t('Download as iCal calendar event'),
        '#value' => 'icaldownload',
        '#suffix' => '<span class="check"></span>
								</span><!--/customCheckbox-->
								<span class="label-title">' . t('Download event as iCal event') . '</span>
							</label>',
        '#prefix' => '<label class="full-width">
								<span class="customCheckbox">',
    );
//    $form['selections']['outlookevent'] = array(
//        '#name' => 'outlookevent',
//        '#id' => 'outlookevent',
//        '#type' => 'checkbox',
//        '#theme_wrappers' => array(),
//        '#title' => t('Download as iCal calendar event'),
//        '#value' => 'outlookevent',
//        '#suffix' => '<span class="check"></span>
//								</span><!--/customCheckbox-->
//								<span class="label-title">'.t('Add event to calendar (Outlook)').'</span>
//							</label>',
//        '#prefix' => '<label class="full-width">
//								<span class="customCheckbox">',
//    );
    $form['selections']['email'] = array(
        '#name' => 'email',
        '#id' => 'email',
        '#attributes' => array(
            'data-plugin' => 'hideElement',
            'data-relative' => 'emailInput',
        ),
        '#type' => 'checkbox',
        '#theme_wrappers' => array(),
        '#title' => t('Download as iCal calendar event'),
        '#value' => 'email',
        '#suffix' => '<span class="check"></span>
								</span><!--/customCheckbox-->
								<span class="label-title">' . t('Send event to your e-mail') . '</span>
							</label>',
        '#prefix' => '<label class="full-width">
								<span class="customCheckbox">',
    );
    $form['email_container'] = array(
        '#type' => 'container',
        '#theme_wrappers' => array(),
        '#prefix' => '<div class="row-spacer"></div><div class="row">',
        '#suffix' => '</div><!--/row-->'

    );
    $form['email_container']['email'] = array(
        '#type' => 'textfield',
        '#theme_wrappers' => array(),

        '#prefix' => '<div class="col-12" id="emailInput">
							<div class="form-item form-item_maxWidth form-item-h-offset">
								<div class="form-item_title">' . t('Your e-mail address') . ' *</div>',
        '#suffix' => '</div><!--/form-item-->
						</div><!--/col-8-->',
    );

    $form['submit'] = array(
        '#value' => t('Ready'),
        '#name' => 'event_submit',
        '#buttontype' => 'button',
        '#attributes' => array(
            'class' => array('btn ', ' btn-filled', ' btn-maxWidth'),
        ),
        '#prefix' => '<div class="col-12">
							<div class="form-item form-item-h-offset">
								<div class="form-item_title">&nbsp;</div>',
        '#suffix' => '</div><!--/form-item-->
						</div><!--/col-4-->',
        '#type' => 'button',

    );

    return $form;
}

function hitsa_events_add_event_to_calendar_actual($form, &$form_state)
{
    $commands[] = ajax_command_replace('#ajax-target-sending', 'kala');
    return array('#type' => 'ajax', '#commands' => $commands);
}

function hitsa_events_create_registration_form($node)
{
    $enode = $node;
    unset($node);
    $node = new stdClass();
    $node->type = 'webform';
    node_object_prepare($node);
    $node->title = 'Registration form for event ' . $enode->title;
    $node->language = $enode->language;
    $node->body[LANGUAGE_NONE][0]['value'] = '';
    $node->body[LANGUAGE_NONE][0]['format'] = 'full_html';
    $node->uid = 1;
    $node->promote = 0;
    $node->comment = 0;

    // Create the webform components.
    $components = array(
        array(
            'name' => t('First name'),
            'form_key' => 'first_name',
            'type' => 'textfield',
            'mandatory' => 1,
            'weight' => 10,
            'pid' => 0,
            'extra' => array(
                'title_display' => 'inline',
                'private' => 0,
            ),
        ),
        array(
            'name' => t('Last name'),
            'form_key' => 'name',
            'type' => 'textfield',
            'mandatory' => 1,
            'weight' => 5,
            'pid' => 0,
            'extra' => array(
                'title_display' => 'inline',
                'private' => 0,
            ),
        ),
        array(
            'name' => t('Email address'),
            'form_key' => 'email_address',
            'type' => 'email',
            'mandatory' => 1,
            'weight' => 25,
            'pid' => 0,
            'extra' => array(
                'title_display' => 'inline',
                'private' => 0,
            ),
        ),
    );
    // Setup notification email.
    $emails = array(
        array(
            'email' => 'somebody@example.tld',
            'subject' => 'default',
            'from_name' => 'default',
            'from_address' => 'default',
            'template' => 'default',
            'excluded_components' => array(),
        ),
    );

    // Attach the webform to the node.
    $node->webform = array(
        'confirmation' => '',
        'confirmation_format' => null,
        'redirect_url' => '<confirmation>',
        'status' => '1',
        'block' => '0',
        'teaser' => '0',
        'allow_draft' => '0',
        'auto_save' => '0',
        'submit_notice' => '1',
        'submit_text' => '',
        'submit_limit' => '-1', // User can submit more than once.
        'submit_interval' => '-1',
        'total_submit_limit' => '-1',
        'total_submit_interval' => '-1',
        'record_exists' => true,
        'roles' => array(
            0 => '1', // Anonymous user can submit this webform.
        ),
        'emails' => $emails,
        'components' => $components,
    );
    // krumo($node);
    // Save the node.
    node_save($node);
}

function hitsa_events_register_event($event, $form_id, $date)
{
    $build = array();
    $node = node_load($form_id);
    $webform = webform_node_view($node, 'full');
    $event = node_load($event);
    if (!empty($node)) {
        if (!empty($node->webform)) {
            if (!empty($node->webform['components'])) {
                $form = drupal_get_form('hitsa_events_generate_custom_form', $node->webform['components'], $node->webform['nid']);
            }
        }
    }

    if (!empty($form)) {
        $form = render($form);
        $markup = ' <div class="block" data-modal="true">
               
               <h1 class="block-title">' . t('Add to calendar') . ' <a href="javascript:void(0);" data-close="true" class="btn btn-transparent pull-right after-close">' . t('Close') . '</a></h1>
					
					<div class="row-spacer-xs"></div>' . $form . '</div>';
    } else {
        $markup = ' <div class="block" data-modal="true">
               
               <h1 class="block-title">' . t('Add to calendar') . ' <a href="javascript:void(0);" data-close="true" class="btn btn-transparent pull-right after-close">' . t('Close') . '</a></h1>
					
					<div class="row-spacer-xs"></div></div>';

    }
    $build['webform'] = array(
        '#markup' => $markup,
    );
    return $build;
}

function hitsa_events_calendar_submission()
{
    $build = array();
    $file = hitsa_events_generate_ics($_POST);
    $build['element'] = array(

        '#markup' => '  <div class="block" data-modal="true">
               
               <h1 class="block-title">' . t('Add to calendar') . ' <a href="javascript:void(0);" data-close="true" class="btn btn-transparent pull-right after-close">' . t('Close') . '</a></h1>
					
					<div class="row-spacer-xs"></div>
					
					' . $file . '
					
            </div><!--/block-->',
    );
    return $build;
}

function hitsa_events_generate_ics($post)
{
//    krumo($post);
    global $language;
    if (!empty($post)) {
        if (!empty($post['event'])) {
            $event = node_load($post['event']);
            if (!empty($event->locations)) {
                $location = $event->locations[$language->language][0]['tid'];
                $location = taxonomy_term_load($location);
            }
            $start_date = time();
            $end_date = time();
            module_load_include('inc', 'hitsa_events', 'includes/ICS');
            header('Content-type: text/calendar; charset=utf-8');
            header('Content-Disposition: attachment; filename=invite.ics');
            if (!empty($event->event_date)) {
                $start_date = date('Y-m-d g:iA', $event->event_date['und'][0]['value']);
                $end_date = date('Y-m-d g:iA', $event->event_date['und'][0]['value2']);
            }
            if (!empty($event->body)) {
                $description = strip_tags($event->body['und'][0]['safe_value']);
            } else {
                $description = $event->title;
            }
            $ics = new ICS(array(
                'location' => $location->name,
                'description' => $description,
                'dtstart' => $start_date,
                'dtend' => $end_date,
                'summary' => $event->title,
                'url' => url('calendar')
            ));

            $file_contents = $ics->to_string();
            $calendar_location = 'public://calendars';
            file_prepare_directory($calendar_location, $options = FILE_CREATE_DIRECTORY);
            $file = file_save_data($file_contents, $calendar_location . '/calendar_event_' . $post['date'] . '.ics', FILE_EXISTS_REPLACE);
            $file_link = file_create_url($file->uri);
            $errors = false;
            $output = '';
            if (!empty($post['icaldownload'])) {
                $output = '<a class="cta-link before-calendar" href="' . $file_link . '">' . t('To download calendar .ics file click here') . '</a>';
            }
            if (!empty($post['email'])) {
                if (!filter_var($post['email'], FILTER_VALIDATE_EMAIL)) {
                    $form = drupal_get_form('hitsa_events_add_to_calendar_form');
                    $form['event']['#value'] = $post['event'];
                    $form['email_container']['email']['#attributes']['class'][] = 'notification';
                    $form['email_container']['email']['#attributes']['class'][] = 'notification-error';

                    $attributes = $form['selections']['email']['#attributes'];
                    $attributes['checked'] = '';
                    $form['selections']['email']['#attributes'] = $attributes;
                    $errors = true;
                    $output .= '<div class="notification notification-error">' . t('Entered e-mail is not correct') . '</div>';
                    $output .= drupal_render($form);

                    return $output;
                } else {
                    $send_mail = hitsa_events_send_mail($file->fid, $post, $event);
                }
                if (!empty($send_mail)) {
                    if (!empty($output)) {
                        $output .= '<br>';
                        $output .= '<br>';
                    }
                    if ($send_mail['success'] == true) {
                        $output .= $send_mail['message'];
                    } else {
                        $output .= '<div class="notification notification-error">' . $send_mail['message'] . '</div>';
                    }
                }
            }
            if (!$errors) {
                return $output;
            }
        }
    }
}

function hitsa_events_cron()
{
    $path = 'public://calendars';
    $files = file_scan_directory($path, '/\.ics/');
    if (!empty($files)) {
        file_unmanaged_delete_recursive($path);
    }
//    exit();
}

function hitsa_events_send_mail($file_link, $post, $event)
{
    if (!empty($post['email'])) {
        $attachment = file_load($file_link);

        $from = variable_get('site_mail', '');
        $params = array(
            'key' => 'event_initation',
            'to' => $post['email'],
            'from' => $from,
            'subject' => t('Event invitation'),
            'body' => t('Attached you find event invitation in .ics format'),
            'attachment' => $attachment
        );
        $key = 'event_initation';
        $to = $post['email'];
        $language = $event->language;
        $message = drupal_mail('hitsa_events', $key, $to, $language, $params, $from);
        if ($message['send'] == true) {
            if ($message['response'] == true) {
                $return = array(
                    'success' => true,
                    'message' => t('E-mail was successfully sent to: ') . $post['email']
                );
                return $return;
            } else {
                $return = array(
                    'success' => false,
                    'message' => t('There was problem sending e-mail to address:') . $post['email']
                );
                return $return;
            }
        } else {

            $return = array(
                'success' => false,
                t('There was problem sending e-mail to address:') . $post['email']
            );
            return $return;
        }
    }
}

/**
 * Implements hook_mail().
 */
function hitsa_events_mail($key, &$message, $params)
{
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['body'];

    // Add attachment when available.
    if (isset($params['attachment'])) {
        $message['params']['attachments'][] = $params['attachment'];
    }
}


function hitsa_events_generate_custom_form($form, &$form_state, $components, $nid)
{
//TODO Failide üleslaadimise osad teha
    if (!empty($components)) {
        $form = array(
            '#action' => 'training-calendar/registration',
            '#attributes' => array(
                'data-plugin' => 'ajaxForm'
            ),
            '#method' => 'post',
        );
        if (is_array($components)) {
            if (!empty($nid)) {
                $form['nid'] = array(
                    '#type' => 'hidden',
                    '#value' => $nid,
                );
            }
            foreach ($components as $cmp_key => $component) {
                if ($component['type'] == 'textfield' || $component['type'] == 'e-mail') {
                    $form[$cmp_key] = array(
                        '#prefix' => '<div class="col-12"><div class="form-item">
								<div class="form-item_title">' . t($component['name']) . '*</div>',
                        '#suffix' => '</div></div>',
                        '#type' => ($component['type' != 'email']) ? $component['type'] : 'textfield',
                        '#name' => $cmp_key,
                        '#required' => $component['required'],
                        '#weight' => $component['weight'],

                    );
                } elseif ($component['type'] == 'textarea') {

                    $form[$cmp_key] = array(
                        '#prefix' => '<div class="col-12"><div class="form-item">
								<div class="form-item_title">' . t($component['name']) . '*</div>',
                        '#suffix' => '</div></div>',
                        '#type' => ($component['type' != 'email']) ? $component['type'] : 'textfield',
                        '#name' => $cmp_key,
                        '#required' => $component['required'],
                        '#weight' => $component['weight'],

                    );
                } elseif ($component['type'] == 'number') {

                    $form[$cmp_key] = array(
                        '#prefix' => '<div class="col-12"><div class="form-item">
								<div class="form-item_title">' . t($component['name']) . '*</div>',
                        '#suffix' => '</div></div>',
                        '#type' => ($component['type' != 'email']) ? $component['type'] : 'textfield',
                        '#name' => 'number_' . $cmp_key,
                        '#required' => $component['required'],
                        '#weight' => $component['weight'],

                    );
                } elseif ($component['type'] == 'email') {

                    $form[$cmp_key] = array(
                        '#prefix' => '<div class="col-12"><div class="form-item">
								<div class="form-item_title">' . t($component['name']) . '*</div>',
                        '#suffix' => '</div></div>',
                        '#type' => ($component['type' != 'email']) ? $component['type'] : 'textfield',
                        '#name' => 'email_' . $cmp_key,
                        '#required' => $component['required'],
                        '#weight' => $component['weight'],

                    );
                } elseif ($component['type'] == 'select') {

                    if (!empty($component['extra'])) {
                        if ($component['extra']['multiple'] == 1) {
                            $options = $component['extra']['items'];
                            $options = preg_split('/\n|\r\n?/', $options);
                            $elements = array();
                            foreach ($options as $option) {
                                $element = explode('|', $option);
                                $elements[strval($element[0])] = $element[1];
                            }
                            $form[$cmp_key] = array(
                                '#prefix' => '<div class="col-12"><div class="form-item">
								<div class="form-item_title">' . t($component['name']) . '*</div>',
                                '#suffix' => '</div></div>',
                                '#theme_wrappers' => array(),
                                '#type' => 'checkboxes',
                                '#name' => $cmp_key,
                                '#options' => $elements,
                                '#required' => $component['required'],
                                '#weight' => $component['weight'],
                            );

                        }
                        if ($component['extra']['multiple'] == 0) {
                            if ($component['extra']['aslist'] == 0) {
                                $options = $component['extra']['items'];
                                $options = preg_split('/\n|\r\n?/', $options);
                                $elements = array();
                                foreach ($options as $option) {
                                    $element = explode('|', $option);
                                    $elements[strval($element[0])] = $element[1];
                                }
                                $form[$cmp_key] = array(
                                    '#prefix' => '<div class="col-12"><div class="form-item">
								<div class="form-item_title">' . t($component['name']) . '*</div>',
                                    '#suffix' => '</div></div>',
                                    '#attributes' => array(
                                        'module' => 'hitsa_events'
                                    ),
                                    '#type' => 'radios',
                                    '#name' => $cmp_key,
                                    '#options' => $elements,
                                    '#required' => $component['required'],
                                    '#weight' => $component['weight'],
                                );
                            } else {

                                $options = $component['extra']['items'];
                                $options = preg_split('/\n|\r\n?/', $options);
                                $elements = array();
                                foreach ($options as $option) {
                                    $element = explode('|', $option);
                                    $elements[strval($element[0])] = $element[1];
                                }
                                $form[$cmp_key] = array(
                                    '#prefix' => '<div class="col-12"><div class="form-item">
								<div class="form-item_title">' . t($component['name']) . '*</div>',
                                    '#theme_wrappers' => array(),
                                    '#suffix' => '</div></div>',
                                    '#type' => 'select',
                                    '#name' => $cmp_key,
                                    '#options' => $elements,
                                    '#required' => $component['required'],
                                    '#weight' => $component['weight'],
                                );
                            }

                        }
                    }
                }
            }

            if (!empty($form)) {

                $form['captcha'] = array(
                    '#prefix' => '<div class="col-12"><div class="form-item">
								<div class="form-item_title">' . t('') . '</div>',
                    '#suffix' => '</div></div>',
                    '#type' => 'captcha',
                    '#captcha_type' => 'captcha/Math',
                    '#weight' => 99,
                    '#name' => 'captcha'
                );
                $form['submit'] = array(
                    '#type' => 'submit',
                    '#buttontype' => 'button',
                    '#attributes' => array(
                        'style' => 'margin-top:15px;',
                        'class' => array('btn', 'btn-filled', 'btn-maxWidth'),
                    ),
                    '#name' => 'submit',
                    '#value' => t('Register'),
                    '#weight' => 100,
                );

                return $form;
            }
        }
    }
    return false;
}

function hitsa_events_training_event_registration()
{
    $build = array();

    if (!empty($_POST)) {
        $form_validated = hitsa_events_registration_processing($_POST);
    }
    $markup = ' <div class="block" data-modal="true">

               <h1 class="block-title">' . t('Add to calendar') . ' <a href="javascript:void(0);" data-close="true" class="btn btn-transparent pull-right after-close">' . t('Close') . '</a></h1>

					<div class="row-spacer-xs"></div>' . $form_validated . '</div>';
    $build['form'] = array(
        '#markup' => $markup,
    );
    return drupal_render($build);
}

function hitsa_events_registration_processing($post)
{
    $validated = hitsa_events_registration_validation($post);
    if ($validated['success'] == true) {
        $registration = hitsa_events_registration_submission($post);
    } elseif ($validated['success'] == false) {
        $form = $validated['form'];
        $node = node_load($_REQUEST['nid']);
        $components = $node->webform['components'];
        $form = drupal_get_form('hitsa_events_generate_custom_form', $components, $_REQUEST['nid']);
        if (!empty($validated['errors'])) {
            if (isset($validated['errors']['captcha'])) {
                $form['captcha']['captcha_widgets']['captcha_response']['#attributes']['class'] = array(
                    0 => 'error',
                );

                $errors['errors'][] = array(
                    '#type' => 'markup',
                    '#markup' => '<div class="row">
			<div class="col-12">
				<div class="notification notification-danger" data-plugin="notification">
					<div class="notification-sign"></div>
					<div class="notification-text">
						<p>' . $validated['errors']['captcha'] . '</p>
					</div><!--/notification-text-->
					<div class="notification-close">
						<span class="notification-close-label">Sulge</span> <span class="before-close"></span>
					</div>
				</div><!--/notification-->
			</div><!--/col-12-->
        </div>
        ',
                );
            }
        }
        array_unshift($form, $errors);
        $form = drupal_render($form);
        dpm($form);
        return $form;
    }
    if ($registration) {
        return 'Successfully registered';
    } else {
        return 'Something went wrong';
    }
}

function hitsa_events_registration_validation($post)
{
    $errors = false;
    $error = array();
    $data = array();
    if (!empty($post['nid'])) {
        $nid = $post['nid'];
        $node = node_load($nid);
        global $user;
        $uid = $user->uid;
        $serial = _webform_submission_serial_next_value($nid);
        unset($post['nid']);
        if (!empty($post['form_build_id'])) {
            unset($post['form_build_id']);
        }
        if (!empty($post['form_id'])) {
            unset($post['form_id']);
        }
        if (!empty($post['form_token'])) {
            unset($post['form_token']);
        }
        if (!empty($post['captcha_sid'])) {
            $captcha_checker = db_select('captcha_sessions', 'cs');
            $captcha_checker->condition('cs.csid', $post['captcha_sid'], '=');
            $captcha_checker->fields('cs');
            $captcha_checker->condition('cs.token', $post['captcha_token'], '=');
            $response = $captcha_checker->execute();
            foreach ($response as $key => $value) {
                dpm($value);
                if ($value->solution != $post['captcha_response']) {
                    $errors = true;
                    $error['captcha'] = t('Captcha solution was wrong');
                }
            }
        }
        //TODO  Lisada erinevad valideerimised registreerimise vormile
       //TODO Lisada ka captcha valideerumine
        //foreach ($post as $post_key => $fields) {

//            if (strpos($post_key, 'email_') !== FALSE) {
//                if (filter_var($post_key, FILTER_VALIDATE_EMAIL)) {
//                    echo "Email address '$post_key' is considered valid.\n";
//                }
//                else{
//                    $errors = TRUE;
//                    $post_key = str_replace('email_','',$post_key);
//                    $node->webform['components'][$post_key]['value'] =$fields;
//                    $error[$post_key] = t(':email is not valid email address',array(':email' => $fields));
//                }
//            }
//            if (strpos($post_key, 'number_') !== FALSE) {
//                if (!is_integer($fields)){
//                    $errors = TRUE;
//                    $post_key = str_replace('number_','',$post_key);
//                    $node->webform['components'][$post_key]['value'] =$fields;
//                    $error[$post_key] = t(':number is not valid number',array(':number' => $fields));
//                }
//
//
//            }

        //}

    }
    if (!$errors) {
        return array(
            'success' => true,
        );
    } else {
        $form = drupal_get_form('hitsa_events_generate_custom_form', $node->webform['components'], $node->webform['nid']);
        $form = drupal_render($form);
        return array(
            'success' => false,
            'errors' => $error,
            'form' => $form,

        );
    }
}

function hitsa_events_registration_submission($post)
{
    var_dump($post);
    if (!empty($post['nid'])) {
        $data = array();
        $nid = $post['nid'];
        $node = node_load($nid);
        global $user;
        $uid = $user->uid;
        $serial = _webform_submission_serial_next_value($nid);
        unset($post['nid']);
        if (!empty($post['form_build_id'])) {
            unset($post['form_build_id']);
        }
        if (!empty($post['form_id'])) {
            unset($post['form_id']);
        }
        if (!empty($post['form_token'])) {
            unset($post['form_token']);
        }
        //dpm($post);
        if (!empty($post['captcha_sid'])) {
            unset($post['captcha_sid']);
        }
        if (!empty($post['captcha_token'])) {
            unset($post['captcha_token']);
        }
        if (!empty($post['captcha_response'])) {
            unset($post['captcha_response']);
        }

        foreach ($post as $post_key => $fields) {
            $key = $post_key;
            if (strpos($post_key, 'email_') !== false) {
                $key = str_replace('email_', '', $post_key);
            }
            if (strpos($post_key, 'number_') !== false) {
                $key = str_replace('number_', '', $post_key);
            }
            if (strpos($post_key, 'form_element_id') !== false) {
                $key = str_replace('form_element_id_', '', $post_key);
            }
            if (is_array($fields)) {
                foreach ($fields as $checks_values) {
                    $data[$key][] = $checks_values;
                }
            } else {
                $data[$key][] = $fields;
            }
        }
        $submission = (object)array(
            'nid' => $nid,
            'uid' => 0,
            'submitted' => REQUEST_TIME,
            'remote_addr' => ip_address(),
            'is_draft' => false,
            'serial' => $serial,
            'data' => $data,
        );
        if (module_exists('webform')) {
            module_load_include('inc', 'webform', 'includes/webform.submissions');
            $sid = webform_submission_insert($node, $submission);

        }
        if (!empty($sid)) {
            return true;
        } else {
            return false;
        }
    }
}