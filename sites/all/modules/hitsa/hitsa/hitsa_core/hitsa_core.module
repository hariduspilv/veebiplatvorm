<?php
module_load_include('inc', 'hitsa_core', 'includes/hitsa_core.theme');
module_load_include('inc', 'hitsa_core', 'includes/hitsa_core.variable');
module_load_include('inc', 'hitsa_core', 'includes/hitsa_core.views');

define('HITSA_SCHOOL_GYMNASIUM', 1);
define('HITSA_SCHOOL_VOCATIONAL', 2);

function hitsa_core_menu()
{
    $items['admin/hitsa'] = array(
        'title' => 'HITSA Admin',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('variable_group_form', 'general_variables'),
        'access callback' => 'user_access',
        'access arguments' => array('administer hitsa page settings'),
        'weight' => -10,
    );
    $items['admin/hitsa/event_settings'] = array(
        'title' => t('Event settings'),
        'position' => 'left',
        'type' => MENU_LOCAL_TASK,
        'weight' => -19,
        'page callback' => 'hitsa_core_event_settings',
        'access arguments' => array('administer hitsa page settings'),
        'file' => 'includes/hitsa_core_events.admin.inc',
    );

    $items['admin/hitsa/variables'] = array(
        'title' => 'Variables',
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('variable_group_form', 'general_variables'),
        'access callback' => 'user_access',
        'access arguments' => array('administer hitsa page settings'),
    );

    $items['admin/hitsa/variables/general'] = array(
        'title' => 'General',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('variable_group_form', 'general_variables'),
        'type' => MENU_LOCAL_TASK,
        'access callback' => 'user_access',
        'access arguments' => array('administer hitsa page settings'),
        'weight' => 0,
    );

    $items['admin/hitsa/variables/header_footer'] = array(
        'title' => 'Header & Footer',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('variable_group_form', 'header_footer_variables'),
        'type' => MENU_LOCAL_TASK,
        'access callback' => 'user_access',
        'access arguments' => array('administer hitsa page settings'),
        'weight' => 1,
    );
    $items['sitemap'] = array(
        'title' => 'Sisukaart',
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'hitsa-footer-menu',
        'weight' => 2,
        'page callback' => 'hitsa_core_render_sitemap',
        'access callback' => true,
    );

    $items['search'] = array(
        'title' => 'Search',
        'page callback' => 'hitsa_core_search_page',
        'access callback' => true,
    );

    $items['api/search'] = array(
        'title' => 'Search',
        'page callback' => 'hitsa_core_search_page',
        'page arguments' => array(true),
        'access callback' => true,
    );

    $items['login'] = array(
        'title' => 'Login',
        'page callback' => 'hitsa_core_login_page',
        'page arguments' => array(true),
        'access callback' => 'user_is_anonymous',
        'file' => 'includes/hitsa_core.login.inc',     // don't forget to add the file and path
        'file path' => drupal_get_path('module', 'hitsa_core'),
    );

    $items['login/status'] = array(
        'title' => 'Login',
        'page callback' => 'hitsa_core_check_id_status',
        'access callback' => 'user_is_anonymous',
        'file' => 'includes/hitsa_core.login.inc',     // don't forget to add the file and path
        'file path' => drupal_get_path('module', 'hitsa_core'),
    );

    $items['id_card_login'] = array(
        'title' => 'Login',
        'page callback' => 'hitsa_core_id_card_login',
        'access callback' => 'user_is_anonymous',
        'file' => 'includes/hitsa_core.login.inc',     // don't forget to add the file and path
        'file path' => drupal_get_path('module', 'hitsa_core'),
    );

    return $items;
}
function hitsa_core_menu_alter(&$items)
{
    $items['search'] = array(
        'title' => 'Search',
        'page callback' => 'hitsa_core_search_page',
        'access callback' => true,
    );
    $items['taxonomy/term/%taxonomy_term']['page callback'] = 'hitsa_core_redirect_front';
    $items['admin/structure/menu/manage/%menu']['access callback'] = 'hitsa_core_menu_access';//For hiding main menu from toolbar
    $items['admin/structure/menu/manage/%menu']['access arguments'][] = 4;//For hiding main menu from toolbar
    $items['node/%node']['page callback'] = 'hitsa_core_redirect_content_type'; //For hiding content that doesnt have detailed view
}

function hitsa_core_menu_access($menu, $menu_item)
{
    if ($menu_item['menu_name'] == 'main-menu') {
        return false;
    } else {
        if (user_access($menu)) {
            return true;
        }
    }
}

/**
 * Implements hook_module_implements_alter().
 */
function hitsa_core_module_implements_alter(&$implementations, $hook)
{
    if ($hook == "menu_alter") {
        unset($implementations['hitsa_core']);
        $mymodule = array('hitsa_core' => false);
        $implementations = $implementations + $mymodule;
    }
}

function hitsa_core_redirect_front($content)
{
    drupal_goto('<front>');
}
function hitsa_core_redirect_content_type($node)
{
    switch ($node->type) {
        case 'event':
            if (!empty($node->field_event_type[LANGUAGE_NONE])) {
                if ($node->field_event_type[LANGUAGE_NONE][0]['value'] == 'event') {
                    drupal_goto('calendar');
                }
                if ($node->field_event_type[LANGUAGE_NONE][0]['value'] == 'training') {
                    drupal_goto('training-calendar');
                }
            }
            break;
        case 'catering':
            if (!empty($node->path)) {
                return node_page_view($node);
            } else {
                drupal_goto('catering');
            }
            break;
        default:
            return node_page_view($node);
            break;
    }

}
function hitsa_core_html_head_alter(&$head_elements)
{
    //dpm($head_elements);
}

function hitsa_core_forms($form_id, $args)
{
    $forms = array();

    if (strncmp($form_id, 'hitsa_core_id_login_form_', 25) === 0) {
        $argument = str_replace('hitsa_core_id_login_form_', '', $form_id);
        $forms[$form_id] = array(
            'callback' => 'hitsa_core_id_login_form',
            'callback arguments' => array(
                $argument,
            ),
        );
    }
    return $forms;
}

function hitsa_core_cron()
{
    hitsa_core_search_server_add_index(); // Check the server->index relationship, add index if necessary.
}

function hitsa_core_permission()
{
    return array(
        'administer hitsa page settings' => array(
            'title' => t('Administer HITSA page settings'),
        ),
    );
}

function hitsa_core_block_info()
{
    $blocks = array();
    $school_type = hitsa_core_get_school_type();
    $blocks['hitsa_services_events'] = array(
        'info' => t('HITSA Services & Events'),
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => '<front>',
        'region' => 'sidebar_right',
        'status' => "1",
    );


    $blocks['hitsa_front_mobile_links'] = array(
        'info' => t('HITSA mobile links'),
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => '<front>',
        'region' => 'super_news',
        'status' => "1",
        'weight' => 1,
    );
    if ($school_type == 1) {
        $blocks['hitsa_front_events_catering'] = array(
            'info' => t('HITSA front catering block'),
            'visibility' => BLOCK_VISIBILITY_LISTED,
            'pages' => '<front>',
            'region' => 'content',
            'cache' => DRUPAL_NO_CACHE,
            'status' => "1",
            'weight' => -17,
        );
    }
    return $blocks;
}

function hitsa_core_block_view($delta = '')
{
    $output = array();
    $school_type = hitsa_core_get_school_type();
    switch ($delta) {
        case 'hitsa_services_events':
            if (module_exists('hitsa_events')) {
                $events_content = hitsa_events_front_page_training_block();
            }
            if (module_exists('hitsa_content_page')) {
                $services_content = hitsa_content_page_services_block();
            }
            $content = theme('hitsa_services_events', array(
                'events' => !empty($events_content) ? $events_content : null,
                'services' => !empty($services_content) ? $services_content : null,
            ));
            $output = array('subject' => null, 'content' => $content);
            break;
        case 'language_mobile':
            if (drupal_multilingual()) {
                $path = drupal_is_front_page() ? '<front>' : $_GET['q'];
                $type = 'language';
                $links = language_negotiation_get_switch_links($type, $path);

                if (isset($links->links)) {
                    drupal_add_css(drupal_get_path('module', 'locale') . '/locale.css');
                    $class = "language-switcher-{$links->provider}";
                    $variables = array('links' => $links->links, 'attributes' => array('class' => array($class)));
                    $block['content'] = theme('links__mobile_locale_block', $variables);
                    $block['subject'] = t('Languages');
                    return $block;
                }
            }
            break;
        case 'hitsa_front_mobile_links':
            $block = array();
            $links = menu_load_links('hitsa-header-menu');
            $block['content'] = theme('hitsa_mobile_quicklinks', array('links' => $links));
            $block['subject'] = '';
            return $block;
            break;
            break;
        case 'hitsa_front_events_catering':
            if (module_exists('hitsa_events') and module_exists('hitsa_catering') && $school_type == 1) {
                $events_block = (hitsa_events_front_page_block());
                $catering_block = hitsa_catering_front_page_block();
                $block = array();
                $block['content'] = theme('hitsa_front_page_events_catering', array(
                    'events' => $events_block,
                    'catering' => $catering_block
                ));
                $block['subject'] = '';
                return $block;
            }
            break;
    }
    return $output;
}

function hitsa_core_render_sitemap()
{
    $menu = i18n_menu_localize_tree(menu_tree_all_data('hitsa-main-menu'));
    $menu_tree_output = menu_tree_output($menu);
    $menu_tree_output['#theme_wrappers'] = array('menu_tree__hitsa_sitemap');
    return theme('hitsa_sitemap', array('menu_tree' => $menu_tree_output));
}

/*
 * Implements hook_form_alter().
 */
function hitsa_core_form_alter(&$form, &$form_state, $form_id)
{
    if (!empty($form['body']) && $form['#node']->type !== 'curriculum') {
        //$form['body'][LANGUAGE_NONE][0]['#required'] = TRUE;
        //$form['body'][LANGUAGE_NONE][0]['summary']['#required'] = TRUE;
        //$form['body'][LANGUAGE_NONE][0]['summary']['#description'] = ''; // Hide summary description
    }
    if (!empty($form['#node_edit_form']) && !empty($form['language'])) { // Set language as the topmost element, before title
        $form['#pre_render'][] = 'hitsa_core_reposition_node_form_fields';
    }
    // Any node form with an academic year field.
    if (!empty($form['#node_edit_form']) && isset($form['academic_year'])) {
        hitsa_core_set_default_academic_year($form);
    }

    if ($form_id === 'menu_overview_form' && $form['#menu']['menu_name'] === 'hitsa-main-menu') {
        global $language;

        foreach ($form as $menu_item) {
            if (!isset($menu_item['#item'])) {
                continue;
            }
            if ($menu_item['#item']['language'] !== $language->language && $menu_item['#item']['language'] !== LANGUAGE_NONE) {
                $menu_item['#item']['hidden'] = true;
            }
        }

        //$form['#theme'] = 'main_menu_overview_form';
    }
    switch ($form_id) {
        case 'taxonomy_form_term':
            $form['description']['#access'] = false;
            $form['description']['#format'] = 'text_plain'; // Gets rid of translation text format warning.
            $form['#submit'][] = 'hitsa_core_redirect_after_submit';
            break;
        case 'menu_edit_item':
            if (!empty($form['original_item'])) {
                if (!empty($form['original_item']['#value'])) {
                    if (!empty($form['original_item']['#value']['menu_name'])) {
                        if ($form['original_item']['#value']['menu_name'] == 'hitsa-header-menu') {
                            $form['description']['#access'] = false;
                        }
                    }
                }
            }
            break;
    }
}

function hitsa_core_reposition_node_form_fields($elements)
{
    if (!empty($elements['language'])) {
        $elements['language']['#weight'] = -100;
    }
    return $elements;
}

function hitsa_core_webform_component_info_alter(&$components)
{
    $components['fieldset']['enabled'] = false;
    $components['grid']['enabled'] = false;
    $components['hidden']['enabled'] = false;
    $components['markup']['enabled'] = false;
    $components['pagebreak']['enabled'] = false;
    $components['file']['enabled'] = false;
}

function hitsa_core_set_default_academic_year(&$form)
{
    $academic_year_field = &$form['academic_year'][LANGUAGE_NONE];
    // Set the current academic year as the default value.
    $query = new EntityFieldQuery();

    $now = time();
    $query->entityCondition('entity_type', 'taxonomy_term')
        ->entityCondition('bundle', 'academic_years')
        ->fieldCondition('academic_year_period', 'value', $now, '<=')
        ->fieldCondition('academic_year_period', 'value2', $now, '>=');

    $result = $query->execute();

    if (!empty($result['taxonomy_term'])) {
        // Set the matching academic year as the default value.
        $academic_year_term = reset($result['taxonomy_term']);
        $academic_year_field['#default_value'] = $academic_year_term->tid;
    } else {
        // Create new academic year term.
        $current_month = (int)date('n', $now);
        $current_year = (int)date('Y', $now);
        if ($current_month >= 7) {
            $academic_year_string = sprintf('%d/%d', $current_year, $current_year + 1);
            $academic_year_from = strtotime('1. July ' . $current_year);
            $academic_year_to = strtotime('30. June ' . ($current_year + 1) . ' 23:59:59');
        } else {
            $academic_year_string = sprintf('%d/%d', $current_year - 1, $current_year);
            $academic_year_from = strtotime('1. July ' . ($current_year - 1));
            $academic_year_to = strtotime('30. June ' . $current_year . ' 23:59:59');
        }
        // New taxonomy term
        $term = new stdClass();
        $term->name = $academic_year_string;
        $term->vid = variable_get('hitsa_academic_years_vid');
        taxonomy_term_save($term);

        $emw_term = entity_metadata_wrapper('taxonomy_term', $term);

        $emw_term->academic_year_period = array('value' => $academic_year_from, 'value2' => $academic_year_to);
        $emw_term->save();

        // Set the new term as default.
        $academic_year_field['#options'][$emw_term->getIdentifier()] = $emw_term->label();
        $academic_year_field['#default_value'] = $emw_term->getIdentifier();
    }
}

function hitsa_core_get_content_by_type($e_type = 'node', $type = null, $language = null, $conditions = null)
{
    //dpm($type);
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', $e_type);
    $query->entityCondition('bundle', $type);
    if ($e_type == 'node') {
        $query->propertyCondition('status', NODE_PUBLISHED);
    }
    if ($type == 'event') {
        $query->fieldOrderBy('event_date', 'value', 'ASC');
    }
    if (!empty($conditions)) {
        foreach ($conditions as $condition_key => $condition) {
            switch ($condition_key) {
                case 'event_type':
                    $query->fieldCondition('field_event_type', 'value', $condition, '=');
                    break;
                case 'cur_type':
                    $query->fieldCondition('field_school_selections', 'value', $condition, '=');
                    break;
                case 'content_page_type':
                    $query->fieldCondition('cp_type', 'value', 'cp_simple', '=');
                    if (!empty($query->propertyConditions)) {
                        foreach ($query->propertyConditions as $properties_key => $value) {
                            if ($value['column'] == 'status') {
                                unset($query->propertyConditions[$properties_key]);
                            }
                        }
                    }
                    break;
                case 'subject_field':
                    $query->fieldCondition('field_field', 'target_id', $condition, '=');
                    break;
                case 'limit':
                    $query->range(0, $condition);
                    break;
                case 'cp_type':
                  $query->fieldCondition('cp_type', 'value', $condition, '=');
                  break;
                case 'service_public':
                  $query->fieldCondition('cp_service_type', 'value', $condition, '=');
                  break;
                case 'curr_type':
                  $query->fieldCondition('field_school_selections', 'value', $condition, '=');
                  break;
            }
        }
    }
    if ($language) {
        $query->propertyCondition('language', $language);
    }
    $result = $query->execute();
    return $result;
}

/*
 * Add JS to keep the text with summary field open by default.
 */
function hitsa_core_formatted_text_show_summary()
{
    $script = 'jQuery(document).ready(function(){jQuery(".link-edit-summary").click(),$(document).ajaxComplete(function(){jQuery(".link-edit-summary").click()})});';
    drupal_add_js($script, 'inline');
}

/**
 * HITSA Search
 */
function hitsa_core_default_search_api_server()
{
    $defaults['hitsa_search_server'] = entity_create('search_api_server', array(
        'name' => 'HITSA Search server',
        'machine_name' => 'hitsa_search_server',
        'class' => 'search_api_db_service',
        'options' => array(
            'partial_matches' => true,
            'min_chars' => 1,
            'database' => 'default:default',
            'indexes' => array(
                'hitsa_search_index' => array(),
            ),
        ),
    ));

    return $defaults;
}

function hitsa_core_default_search_api_index()
{
    $defaults['hitsa_search_index'] = entity_create('search_api_index', array(
        'name' => 'HITSA Search index',
        'machine_name' => 'hitsa_search_index',
        'item_type' => 'node',
        'server' => 'hitsa_search_server',
        'enabled' => 1,
        'options' => array(
            'datasource' => array(
                'bundles' => array(
                    'contact',
                    'curriculum',
                    'content_page',
                    'catering',
                    'article',
                    'gallery',
                    'event',
                ),
            ),
            'data_alter_callbacks' => array(
                'search_api_alter_node_status' => array(
                    'status' => 1,
                    'weight' => -45,
                ),
                'search_api_alter_node_access' => array(
                    'status' => 1,
                    'weight' => -44,
                ),
                'search_api_alter_language_control' => array(
                    'status' => 1,
                    'weight' => -43,
                ),
            ),
            'processors' => array(
                'search_api_case_ignore' => array(
                    'status' => 1,
                    'weight' => 0,
                ),
                'search_api_porter_stemmer' => array(
                    'status' => 1,
                    'weight' => 35,
                ),
                'search_api_highlighting' => array(
                    'status' => 1,
                    'weight' => 40,
                    'settings' => array(
                        'prefix' => '<u>',
                        'suffix' => '</u>',
                        'excerpt' => 1,
                        'excerpt_length' => '256',
                        'exclude_fields' => array(),
                        'highlight' => 'always',
                        'highlight_partial' => 1,
                    ),
                ),
            ),
            'fields' => array(
                'title' => array(
                    'type' => 'text',
                    'boost' => '5.0',
                ),
                'body:value' => array(
                    'type' => 'text',
                ),
                'body:summary' => array(
                    'type' => 'text',
                ),
                'first_name' => array(
                    'type' => 'text',
                    'boost' => '3.0'
                ),
                'last_name' => array(
                    'type' => 'text',
                    'boost' => '3.0'
                ),
                'gallery_author' => array(
                    'type' => 'text',
                ),
                'field_event_type' => array(
                    'type' => 'string',
                ),
                'search_api_language' => array(
                    'type' => 'string',
                ),
                'type' => array(
                    'type' => 'string',
                ),
                'status' => array(
                    'type' => 'integer',
                ),
                'created' => array(
                    'type' => 'date',
                ),
                'event_date:value' => array(
                    'type' => 'date',
                ),
                'event_date:value2' => array(
                    'type' => 'date',
                ),
                'gallery_images:file:field_file_image_alt_text' => array(
                    'type' => 'list<text>',
                ),
                'gallery_images:file:field_file_image_title_text' => array(
                    'type' => 'list<text>',
                ),
                'gallery_images:file:name' => array(
                    'type' => 'list<text>',
                ),
                'gallery_images:file:field_image_author' => array(
                    'type' => 'list<text>',
                ),
            ),
        ),
    ));
    return $defaults;
}

function hitsa_core_search_server_add_index()
{
    $index = search_api_index_load('hitsa_search_index');
    $server = search_api_server_load('hitsa_search_server');
    if (!empty($index) && !empty($server) && empty($server->options['indexes']['hitsa_search_index'])) {
        // Add index
        $server->addIndex($index);
    }
}

function hitsa_core_search_index_add_facet_filter()
{
    $searcher = 'search_api@hitsa_search_index';
    $realm_name = 'block';
    $adapter = facetapi_adapter_load($searcher);
    $realm = facetapi_realm_load($realm_name);
    $facet_info = facetapi_get_facet_info($searcher); // $facet array
    $status = 1;
    $weight = 0;
    $batch_process = false;

    facetapi_save_facet_status($adapter, $realm, $facet_info['type'], $status, $weight, $batch_process);
}

function hitsa_core_get_school_type()
{
    return variable_get('hitsa_school_type', HITSA_SCHOOL_GYMNASIUM);
}

function hitsa_core_js_alter(&$javascript)
{
    // remove the JS that does the show/hide summary
    unset($javascript['modules/field/modules/text/text.js']);
}

function hitsa_core_search($q = null)
{
    $query = search_api_query('hitsa_search_index');

    if (!empty($q['query'])) {
        $query->keys($q['query']);
    }

    if (!empty($q['title'])) {
        $query->condition('title', $q['title']);
    }

    // Category filter
    if (!empty($q['category'])) {
        $categories = explode(',', $q['category']);
        $subquery = $query->createFilter('OR');
        foreach ($categories as $c) {
            if ($c === 'content_page') {
                $subquery->condition('type', $c);
                $subquery->condition('type', 'curriculum');
            } else if ($c === 'training') { // Special exception for training event node subtype
                $t_subquery = $query->createFilter('AND');
                $t_subquery->condition('type', 'event');
                $t_subquery->condition('field_event_type', 'training');
                $subquery->filter($t_subquery);
            } else if ($c === 'event') {
                $e_subquery = $query->createFilter('AND');
                $e_subquery->condition('type', 'event');
                $e_subquery->condition('field_event_type', 'event');
                $subquery->filter($e_subquery);
            } else if ($c !== 'all') {
                $subquery->condition('type', $c);
            }
        }

        $query->filter($subquery);
    }

    if (!empty($q['date']) && preg_match("/\d{2}\/\d{2}\/\d{4} - \d{2}\/\d{2}\/\d{4}/", $q['date']) === 1) {
        $date_range = explode(" - ", $q['date']);
        $date_from = date_create_from_format("d/m/Y H:i", $date_range[0] . ' 00:00');
        $date_to = date_create_from_format("d/m/Y H:i", $date_range[1] . ' 23:59');

        $query->condition('created', $date_from->getTimestamp(), '>=');
        $query->condition('created', $date_to->getTimestamp(), '<=');
    }

    $data = $query->execute();

    return $data;
}

function hitsa_core_get_placeholder_image()
{
    $placeholder_url = &drupal_static(__FUNCTION__);
    if (!isset($placeholder_url)) {
        $placeholder_url = "";
        $placeholder_logo_fid = variable_get_value('hitsa_site_logo_fid');
        if(!empty($placeholder_logo_fid)){
          $placeholder_logo = file_load($placeholder_logo_fid);
          if ($placeholder_logo) {
              $placeholder_url = file_create_url($placeholder_logo->uri);
          }
      }
    }
    return $placeholder_url;
}

function hitsa_core_redirect_after_submit($form, &$form_state)
{

    $form_state['redirect'] = 'admin/structure/taxonomy/' . $form['#bundle'];
}
