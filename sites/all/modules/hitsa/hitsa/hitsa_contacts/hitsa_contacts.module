<?php

//module_load_include('inc', 'hitsa_contacts', 'includes/hitsa_contacts.views');
module_load_include('inc', 'hitsa_contacts', 'includes/hitsa_contacts.theme');
module_load_include('inc', 'hitsa_contacts', 'includes/hitsa_contacts.import');

function hitsa_contacts_menu() {
  
  $items['contact'] = array(
    'title' => 'Contact',
    'page callback' => 'hitsa_contact_page',
    'file' => 'includes/hitsa_contacts.form.inc',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'hitsa-main-menu',
    'access callback' => TRUE,
    'weight' => 7,
  );
  
  $items['api/contact'] = array(
    'title' => 'Contact API',
    'page callback' => 'hitsa_contacts_filter',
    'access arguments' => array('access content'),
  );
  
  $items['api/contact-autocomplete'] = array(
    'title' => 'Contact API',
    'page callback' => 'hitsa_contacts_filter_autocomplete',
    'access arguments' => array('access content'),
  );
  
  $items['admin/hitsa/contacts/import'] = array(
    'title' => 'Contact Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hitsa_contacts_import_form'),
    'access arguments' => array('administer content'),
  );
  
  return $items;
}

function hitsa_contacts_block_info() {
  $blocks['hitsa_contacts'] = array(
    'info' => t('HITSA Contacts'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'contact',
    'region' => 'content',
    'status' => "1",
  );
  
  return $blocks;
}

function hitsa_contact_page() {
  return '';
}

function hitsa_contacts_block_view($delta = '') {
  $output = array();
  switch($delta) {
    case 'hitsa_contacts':
      $output = array('subject' => NULL, 'content' => hitsa_contacts_page_view());
      break;
  }
  return $output;
}

function hitsa_contacts_page_view() {
  global $language; 
  
  // Contact Departments
  $department_vocab_vid = variable_get('hitsa_contacts_department_vid');
  $contact_departments = i18n_taxonomy_localize_terms(taxonomy_get_tree($department_vocab_vid));
  // Contact Job positions
  $job_position_vocab_vid = variable_get('hitsa_contacts_job_position_vid');
  $job_positions_array = i18n_taxonomy_localize_terms(taxonomy_get_tree($job_position_vocab_vid));
  foreach($job_positions_array as $j) {
    $job_positions[$j->tid] = $j;
  }

  // "Contact Us" form
  $hitsa_contacts_contact_us_webform_nid = variable_get('hitsa_contacts_contact_us_webform_nid');
  if(!empty($hitsa_contacts_contact_us_webform_nid)) {
    $wnode = node_load($hitsa_contacts_contact_us_webform_nid);
    $contact_form = drupal_get_form('webform_client_form_' . $hitsa_contacts_contact_us_webform_nid, $wnode, array());
  }
  
  // Nodes grouped by department
  $nids_array = hitsa_core_get_content_by_type('node', 'contact');
  $nodes_grouped = _hitsa_contacts_group_by_department($nids_array);
  
  // Render accordion
  $contact_accordion = theme('contacts_page_accordion',
    array(
      'nodes' => $nodes_grouped,
      'contact_departments' => $contact_departments,
      )
  );
  
  $contact_page = theme('contacts_page',
    array(
      'contact_accordion' => $contact_accordion,
      'nodes' => $nodes_grouped, 
      'contact_form' => $contact_form,
      'contact_departments' => $contact_departments,
      'job_positions' => !empty($job_positions) ? $job_positions : array(),
      'locations' => isset($locations) ? $locations : NULL,
      )
  );
  
  // Add Gmap library
  drupal_add_js('https://maps.google.com/maps/api/js?sensor=false', 'external');

  return $contact_page;
}

function hitsa_contacts_filter_autocomplete() {
  $parameters = drupal_get_query_parameters();
  
  if(!empty($parameters['search'])) {
    $result = db_query('SELECT title FROM {node} n
      WHERE type = :contact 
      AND status = 1
      AND title LIKE :search',
      array(
        ':contact' => 'contact',
        ':search' => '%' . db_like($parameters['search']) . '%'
      )
    );
    
    $titles = $result->fetchCol();
    
    $autocomplete = (object) array(
      'list' => array(),
    );
    
    foreach($titles as $title) {
      $autocomplete->list[] = (object) array('title' => $title);
    }
    
    drupal_json_output($autocomplete);
  }
}

function hitsa_contacts_filter() {
  global $language;
  $parameters = drupal_get_query_parameters();

  $nodes = hitsa_contacts_query_content($parameters);
  
  // Contact Departments
  $department_vocab_vid = variable_get('hitsa_contacts_department_vid');
  $contact_departments = i18n_taxonomy_localize_terms(taxonomy_get_tree($department_vocab_vid));

  $nodes_grouped = _hitsa_contacts_group_by_department($nodes);
  
  if(!empty($parameters['category']) && $parameters['category'] !== 'all') {
    // Filter out extra departments
    $filter_departments = array_flip(explode(',', $parameters['category']));
    
    foreach($nodes_grouped as $d_tid => $nodes) {
      if(!isset($filter_departments[$d_tid])) {
        unset($nodes_grouped[$d_tid]);
      }
    }
  }
  $contact_accordion = theme('contacts_page_accordion',
    array(
      'nodes' => $nodes_grouped,
      'contact_departments' => $contact_departments,
      )
  );

  print $contact_accordion;
}

function hitsa_contacts_query_content($q = array()) {
  $query = new EntityFieldQuery();
  
  $parameters = _hitsa_contacts_set_query_parameters($q);
  
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'contact')
  ->propertyCondition('status', NODE_PUBLISHED)
  ->propertyOrderBy('created', 'DESC');
  
  foreach($parameters as $parameter) {
    $query->{$parameter['type']}(...$parameter['arguments']);
  }
  
  $result = $query->execute();

  return $result;
}

function _hitsa_contacts_set_query_parameters($query = array()) {
  global $language;

  $parameters = array();

  // Language
  /*
  $parameters[] = array(
    'type' => 'propertyCondition',
    'arguments' => array('language', $language->language),
  );*/
  
  if(!empty($query['profession'])) {
    $professions = explode(',', $query['profession']);
    
    $parameters[] = array(
      'type' => 'fieldCondition',
      'arguments' => array('job_position', 'target_id', $professions, 'IN'),
    );
  }
  
  if(!empty($query['person'])) {
    $parameters[] = array(
      'type' => 'propertyCondition',
      'arguments' => array('title', $query['person'], 'CONTAINS'),
    );
  }
  
  if(!empty($query['category']) && $query['category'] !== 'all') {
    $departments = explode(',', $query['category']);

    // Subquery
    $result = db_query('SELECT entity_id 
    FROM {field_data_job_department}
    WHERE job_department_target_id IN (:tids)',
    array(':tids' => $departments)
    );
    
    $department_pids = $result->fetchCol();
    
    if(!empty($department_pids)) {
      $parameters[] = array(
        'type' => 'fieldCondition',
        'arguments' => array('contact_departments', 'value', $department_pids, 'IN'),
      );
    } else {
      $parameters[] = array(
        'type' => 'range',
        'arguments' => array(0, 0),
      );
    }
    
  }

  return $parameters;
}

function _hitsa_contacts_get_department_node_values() {
  $query = "SELECT f.contact_departments_value AS pid, 
            f.entity_id AS nid, d.job_department_target_id AS department_tid, 
            w.department_weight_value AS weight
            FROM {field_data_contact_departments} AS f
            INNER JOIN {field_data_job_department} AS d 
            	ON  f.contact_departments_value = d.entity_id
            INNER JOIN {field_data_department_weight} AS w 
            	ON  f.contact_departments_value = w.entity_id
            ORDER BY weight;";
  $result = db_query($query);
  $departments = $result->fetchAllAssoc('pid');
  return $departments;
}

function _hitsa_contacts_group_by_department($nids_array) {
  $nodes_grouped = array();
  if(!empty($nids_array)) {
    $nids = array_keys($nids_array['node']);
    $nodes = node_load_multiple($nids);
    $contact_department_node_values = _hitsa_contacts_get_department_node_values();
    foreach($nodes as $node) {
      if(!empty($node->contact_departments[LANGUAGE_NONE])) {
        $node_departments = $node->contact_departments[LANGUAGE_NONE];
        foreach($node_departments as $d) {
          $department_node_value = $contact_department_node_values[$d['value']];
          $weight = $department_node_value->weight;
          while(isset($nodes_grouped[$department_node_value->department_tid][$weight])) {
            $weight++; // Avoid duplicate weights
          }
          $nodes_grouped[$department_node_value->department_tid][$weight] = node_view($node);
        }
      }
    }
    foreach($nodes_grouped as &$group) {
      // Sort by weight
      ksort($group);
    }
  }
  return $nodes_grouped;
}

function hitsa_contacts_node_info() {
  return array(
    'contact' => array(
      'name' => t('Contact'),
      'base' => 'contact',
      'description' => t('Contact data.'),
      'has_title' => TRUE,
      'title_label' => t('Name'),
    ),
  );
}

/**
 * Implements hook_form()
 */
function contact_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_form_alter()
 */
function hitsa_contacts_form_alter(&$form, &$form_state, $form_id) {
  global $language;
  global $user;
  
  // Validate the phone number field.
  if(!empty($form['phone_nr'])) {
    $form['#validate'][] = 'hitsa_contacts_validate_phone_number';
    $form['phone_nr'][LANGUAGE_NONE][0]['value']['#attributes']['autocomplete'] = 'off';
  }
  
  switch($form_id) {
    case 'contact_node_form':
      // We'll set the title using first+last name.
      $form['title']['#access'] = FALSE;
      // Import ID is for internal use only.
      if(isset($form['contact_id']) && $user->uid !== '1') {
        $form['contact_id']['#access'] = FALSE;
      }
      $form['#validate'][] = 'hitsa_contacts_department_required';
      $form['contact_departments'][LANGUAGE_NONE]['#required'] = TRUE;
      
      if(!empty($form['phone_nr'])) {
        $form['#validate'][] = 'hitsa_contacts_validate_phone_number';
      }
      drupal_add_css('.date-year, .date-spacer {display: none;}', 'inline'); // Hide the year select field, we won't use it.
      if(!empty($form['contact_cv'])) {
        $form['contact_cv']['#states'] = array(
          'visible' => array(
            ':input[name^="cv_attachment_type"]' => array('value' => 'contact_cv'),
          ),
        );
      }
      if(!empty($form['contact_cv_attachment'])) {
        $form['contact_cv_attachment']['#states'] = array(
          'visible' => array(
            ':input[name^="cv_attachment_type"]' => array('value' => 'contact_cv_attachment'),
          ),
        );
      }
      //dpm($form);
      break;
    case 'views_exposed_form':
      if($form['#id'] === 'views-exposed-form-hitsa-contacts-contacts-page') {
        if(isset($form['job_position'])) {
          // Convert the entity refence text element to select list.
          $form['job_position']['#type'] = 'select';
          // Get vocabulary terms
          $voc = taxonomy_vocabulary_machine_name_load('contacts_job_position');
          $terms = i18n_taxonomy_localize_terms(taxonomy_get_tree($voc->vid));
          $term_options = array();
          foreach($terms as $term) {
            $term_options[$term->tid] = $term->name;
          }
          $form['job_position']['#options'] = $term_options;
          $form['job_position']['#empty_option'] = t('Occupation');
          $form['job_position']['#empty_value'] = '';
          unset($form['job_position']['#default_value']);
          unset($form['job_position']['#size']);
        }
      }
      break;
  }
}

/**
 * Implement hook_node_presave()
 */
function hitsa_contacts_node_presave($node) {
  // Set first+last name as node title.
  if($node->type === 'contact') {
    // First name
    $first_name_field = field_get_items('node', $node, 'first_name');
    $first_name = field_view_value('node', $node, 'first_name', $first_name_field[0]);

    // Last name
    $last_name_field = field_get_items('node', $node, 'last_name');
    $last_name = field_view_value('node', $node, 'last_name', $last_name_field[0]);

    // Set node title
    $node->title = truncate_utf8(sprintf('%s %s', $first_name['#markup'], $last_name['#markup']), 255);

    // Generate contact ID if it is empty.
    if(empty($node->contact_id) || empty($node->contact_id[LANGUAGE_NONE])) {
      $node->contact_id = array(LANGUAGE_NONE => array(0 => array('value' => time())));
    }
  }
}

/**
 * Implements hook_node_view().
 */
function hitsa_contacts_node_view($node, $view_mode, $langcode) {
  global $user;
  // Restrict access to logo node full page view.
  if ($view_mode == 'full' 
  && arg(0) == 'node' 
  && arg(1) == $node->nid
  && $node->type === 'contact'
  && !user_access('administer content', $user)
  ) {
    // Redirect user to front page.
    drupal_goto();
  }
}


// Make the department paragraph field required.
function hitsa_contacts_department_required($form, &$form_state) {
  if(count($form_state['values']['contact_departments'][LANGUAGE_NONE]) <= 1) {
    form_set_error('contact_departments', t('!name field is required.', array('!name' => $form['contact_departments'][LANGUAGE_NONE]['#title'])));
  }
}

function hitsa_contacts_validate_phone_number($form, &$form_state) {
  if (!empty($form_state['values']['phone_nr'][LANGUAGE_NONE][0]['value'])){
    $phone_number = $form_state['values']['phone_nr'][LANGUAGE_NONE][0]['value'];
    if (!preg_match('/^\s*(?:\+?(\d{1,3}))?([-. (]*(\d{1})[-. )]*)?((\d{3})[-. ]*(\d{2,4})(?:[-.x ]*(\d+))?)\s*$/', ($phone_number))) {
        form_set_error('phone_nr', t('Entered phone number: ') . $phone_number . t(' is not valid'));
    }
  }
}