<?php

/**
 * Implements hook_cronapi().
 */

function hitsa_cron_cronapi()
{

  $items = [];
  $random_time = variable_get('hitsa_cron_random_time');
  if (empty($random_time)) {
    $random_time = rand(1, 60);
    variable_set('hitsa_cron_random_time', $random_time);
  }
  $items['hitsa_cron_grunt_runner'] = [
    'title' => t('Grunt runner'),
    'description' => 'Grunt compiler and runner',
    'callback' => 'hitsa_cron_run_grunt',
    'scheduler' => [
      'name' => 'crontab',
      'crontab' => [
        'rules' => [strval($random_time) . ' 2 * * *'],
      ],
    ],
  ];
  $items['hitsa_cron_translation_updater'] = [
    'title' => t('Translation Updater'),
    'description' => 'Updates translations',
    'file' => 'hitsa_cron_translation_updater.inc',
    'callback' => 'hitsa_cron_update_translations',
    'scheduler' => [
      'name' => 'crontab',
      'crontab' => [
        'rules' => [strval($random_time) . ' 4 * * *'],
      ],
    ],
  ];
  $items['hitsa_cron_update_runner'] = [
    'title' => t('Update runner'),
    'description' => 'Update runner',
    'callback' => 'hitsa_cron_run_update',
    'scheduler' => [
      'name' => 'crontab',
      'crontab' => [
        'rules' => [strval($random_time) . ' 3 * * *'],
      ],
    ],
  ];
    //Siia kirjutada update number
  $cronsettings_set = variable_get('cronsettings_set');
  watchdog('cron_tester','Reached here');
  if(!empty($cronsettings_set)) {
      variable_set('ultimate_cron_plugin_scheduler_default', 'crontab');
      variable_set('ultimate_cron_plugin_settings_poorman_settings', array('launcher' => 'serial', 'early_page_flus' => '1', 'user_agent' => 'Ultimate Cron'));
      variable_set('cronsettings_set','TRUE');
    }
  return $items;
}

/* Hitsa cron grunt runner.
 *
*/

function hitsa_cron_run_grunt()
{
  module_load_include('inc', 'hitsa_color', 'includes/hitsa_color');
  hitsa_color_grunt_runner();
}

/**
 * Hitsa update script
 */
function hitsa_cron_run_update()
{

  $updates = [
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    '10',
    '11',
    '12',
    '13',
    '14',
    '15',
    '16',
    '17',
    '18',
    '19',
    '20',
    '21'
  ];
  if (!empty($updates)) {
    $updated = variable_get('hitsa_updated');
    $updated = explode(',', $updated);
    foreach ($updates as $update) {
      $to_update = TRUE;
      foreach ($updated as $uptodate) {
        if (strval($update) == strval($uptodate)) {
          $to_update = FALSE;
          break;
        }
      }
      if ($to_update) {
        $function_name = 'hitsa_cron_up_' . strval($update);
        if (function_exists($function_name)) {
          $update_status = call_user_func($function_name, $update);
          if ($update_status) {
            $updatedd = variable_get('hitsa_updated');
            if (empty($updatedd)) {
              variable_set('hitsa_updated', $update);
            } else {
              variable_set('hitsa_updated', $updatedd . ',' . $update);
            }
          }
        }
      }
    }
  }
}

function hitsa_cron_up_1($update)
{
  $image_style = image_style_load('hitsa_article_modal_view');
  if (!empty($image_style['effects'])) {
    foreach ($image_style['effects'] as $effect_key => $effect) {
      if ($effect['name'] == 'image_scale') {
        $image_effect = image_effect_load($effect_key, 'hitsa_article_modal_view');
        if (!empty($image_effect['data'])) {
          $image_effect['data']['width'] = '1440';
          $image_effect['data']['height'] = '810';
        }
        image_effect_save($image_effect);
      }
    }
  }
  return TRUE;
}

/**
 * @param null $update
 *
 * Add table selector to description.
 */
function hitsa_cron_up_2($update = null)
{
  $field_bases = array();
  // Exported field_base: 'field_tabel_number'.
  $field_bases['field_tabel_number'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_tabel_number',
    'indexes' => array(),
    'locked' => 0,
    'module' => 'number',
    'settings' => array(
      'entity_translation_sync' => FALSE,
    ),
    'translatable' => 0,
    'type' => 'number_integer',
  );
  $field_instances = array();
  // Exported field_instance: 'paragraphs_item-description-field_tabel_number'.
  $field_instances['paragraphs_item-description-field_tabel_number'] = array(
    'bundle' => 'description',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'TÃ¤psustage, millise tabeli juurde number kuulub<br>
Vajalik ainult eriala tabeli puhul',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 3,
      ),
      'paragraphs_editor_preview' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'paragraphs_item',
    'field_name' => 'field_tabel_number',
    'label' => 'Tabeli nr',
    'required' => 0,
    'settings' => array(
      'entity_translation_sync' => FALSE,
      'max' => '',
      'min' => 1,
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 0,
    ),
  );
  foreach ($field_bases as $field) {
    $field_test = field_info_field($field['field_name']);
    if (empty($field_test)) {
      field_create_field($field);
    }
  }

  foreach ($field_instances as $field_instance) {
    $instance = field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']);
    if (!$instance) {
      field_create_instance($field_instance);
    }
  }
  return TRUE;
}

/**
 * @param null $update
 * @return bool
 * @throws FieldException
 * Update to add contacts field to news, contetnt article and events
 */
function hitsa_cron_up_3($update=null){
  $field_bases = array();

  // Exported field_base: 'field_contacts'.
  $field_bases['field_contacts'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_contacts',
    'indexes' => array(),
    'locked' => 0,
    'module' => 'paragraphs',
    'settings' => array(
      'entity_translation_sync' => FALSE,
    ),
    'translatable' => 0,
    'type' => 'paragraphs',
  );

  $field_instances = array();

  // Exported field_instance: 'node-article-field_contacts'.
  $field_instances['node-article-field_contacts'] = array(
    'bundle' => 'article',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'paragraphs',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'paragraphs_view',
        'weight' => 11,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_contacts',
    'label' => 'Kontaktid',
    'required' => 0,
    'settings' => array(
      'add_mode' => 'select',
      'allowed_bundles' => array(
        'alumnus_person' => -1,
        'catering_food_by_day' => -1,
        'contacts' => 'contacts',
        'contacts_department' => -1,
        'description' => -1,
        'jobs' => -1,
        'reception_time' => -1,
        'subpage' => -1,
        'table' => -1,
      ),
      'bundle_weights' => array(
        'alumnus_person' => 2,
        'catering_food_by_day' => 3,
        'contacts' => 4,
        'contacts_department' => 5,
        'description' => 6,
        'jobs' => 7,
        'reception_time' => 8,
        'subpage' => 9,
        'table' => 10,
      ),
      'default_edit_mode' => 'open',
      'entity_translation_sync' => FALSE,
      'title' => 'Kontakt',
      'title_multiple' => 'Kontakte',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'paragraphs',
      'settings' => array(),
      'type' => 'paragraphs_embed',
      'weight' => 44,
    ),
  );

  // Exported field_instance: 'node-content_page-field_contacts'.
  $field_instances['node-content_page-field_contacts'] = array(
    'bundle' => 'content_page',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'paragraphs',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'paragraphs_view',
        'weight' => 14,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_contacts',
    'label' => 'Kontaktid',
    'required' => 0,
    'settings' => array(
      'add_mode' => 'button',
      'allowed_bundles' => array(
        'alumnus_person' => -1,
        'catering_food_by_day' => -1,
        'contacts' => 'contacts',
        'contacts_department' => -1,
        'description' => -1,
        'jobs' => -1,
        'reception_time' => -1,
        'subpage' => -1,
        'table' => -1,
      ),
      'bundle_weights' => array(
        'alumnus_person' => 2,
        'catering_food_by_day' => 3,
        'contacts' => 4,
        'contacts_department' => 5,
        'description' => 6,
        'jobs' => 7,
        'reception_time' => 8,
        'subpage' => 9,
        'table' => 10,
      ),
      'default_edit_mode' => 'open',
      'entity_translation_sync' => FALSE,
      'title' => 'Kontakt',
      'title_multiple' => 'Kontakte',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'paragraphs',
      'settings' => array(),
      'type' => 'paragraphs_embed',
      'weight' => 54,
    ),
  );
  $field_instances['node-content_page-field_contacts'] = array(
    'bundle' => 'event',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'paragraphs',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'paragraphs_view',
        'weight' => 14,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_contacts',
    'label' => 'Kontaktid',
    'required' => 0,
    'settings' => array(
      'add_mode' => 'button',
      'allowed_bundles' => array(
        'alumnus_person' => -1,
        'catering_food_by_day' => -1,
        'contacts' => 'contacts',
        'contacts_department' => -1,
        'description' => -1,
        'jobs' => -1,
        'reception_time' => -1,
        'subpage' => -1,
        'table' => -1,
      ),
      'bundle_weights' => array(
        'alumnus_person' => 2,
        'catering_food_by_day' => 3,
        'contacts' => 4,
        'contacts_department' => 5,
        'description' => 6,
        'jobs' => 7,
        'reception_time' => 8,
        'subpage' => 9,
        'table' => 10,
      ),
      'default_edit_mode' => 'open',
      'entity_translation_sync' => FALSE,
      'title' => 'Kontakt',
      'title_multiple' => 'Kontakte',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'paragraphs',
      'settings' => array(),
      'type' => 'paragraphs_embed',
      'weight' => 54,
    ),
  );
  // Translatables
  // Included for use with string extractors like potx.
  t('Kontaktid');

  foreach ($field_bases as $field) {
    $field_test = field_info_field($field['field_name']);
    if (empty($field_test)) {
      field_create_field($field);
    }
  }

  foreach ($field_instances as $field_instance) {
    $instance = field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']);
    if (!$instance) {
      field_create_instance($field_instance);
    }
  }
  return TRUE;
}/**
 * @param null $update
 * @return bool
 * @throws FieldException
 * Update to add contacts field to news, contetnt article and events
 */
function hitsa_cron_up_4($update=null){
  $field_bases = array();

  // Exported field_base: 'field_contacts'.
  $field_bases['field_contacts'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_contacts',
    'indexes' => array(),
    'locked' => 0,
    'module' => 'paragraphs',
    'settings' => array(
      'entity_translation_sync' => FALSE,
    ),
    'translatable' => 0,
    'type' => 'paragraphs',
  );

  $field_instances = array();

  // Exported field_instance: 'node-article-field_contacts'.
  $field_instances['node-article-field_contacts'] = array(
    'bundle' => 'article',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'paragraphs',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'paragraphs_view',
        'weight' => 11,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_contacts',
    'label' => 'Kontaktid',
    'required' => 0,
    'settings' => array(
      'add_mode' => 'select',
      'allowed_bundles' => array(
        'alumnus_person' => -1,
        'catering_food_by_day' => -1,
        'contacts' => 'contacts',
        'contacts_department' => -1,
        'description' => -1,
        'jobs' => -1,
        'reception_time' => -1,
        'subpage' => -1,
        'table' => -1,
      ),
      'bundle_weights' => array(
        'alumnus_person' => 2,
        'catering_food_by_day' => 3,
        'contacts' => 4,
        'contacts_department' => 5,
        'description' => 6,
        'jobs' => 7,
        'reception_time' => 8,
        'subpage' => 9,
        'table' => 10,
      ),
      'default_edit_mode' => 'open',
      'entity_translation_sync' => FALSE,
      'title' => 'Kontakt',
      'title_multiple' => 'Kontakte',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'paragraphs',
      'settings' => array(),
      'type' => 'paragraphs_embed',
      'weight' => 44,
    ),
  );

  // Exported field_instance: 'node-content_page-field_contacts'.
  $field_instances['node-content_page-field_contacts'] = array(
    'bundle' => 'content_page',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'paragraphs',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'paragraphs_view',
        'weight' => 14,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_contacts',
    'label' => 'Kontaktid',
    'required' => 0,
    'settings' => array(
      'add_mode' => 'button',
      'allowed_bundles' => array(
        'alumnus_person' => -1,
        'catering_food_by_day' => -1,
        'contacts' => 'contacts',
        'contacts_department' => -1,
        'description' => -1,
        'jobs' => -1,
        'reception_time' => -1,
        'subpage' => -1,
        'table' => -1,
      ),
      'bundle_weights' => array(
        'alumnus_person' => 2,
        'catering_food_by_day' => 3,
        'contacts' => 4,
        'contacts_department' => 5,
        'description' => 6,
        'jobs' => 7,
        'reception_time' => 8,
        'subpage' => 9,
        'table' => 10,
      ),
      'default_edit_mode' => 'open',
      'entity_translation_sync' => FALSE,
      'title' => 'Kontakt',
      'title_multiple' => 'Kontakte',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'paragraphs',
      'settings' => array(),
      'type' => 'paragraphs_embed',
      'weight' => 54,
    ),
  );
  $field_instances['node-content_page-field_contacts'] = array(
    'bundle' => 'event',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'paragraphs',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'paragraphs_view',
        'weight' => 14,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_contacts',
    'label' => 'Kontaktid',
    'required' => 0,
    'settings' => array(
      'add_mode' => 'button',
      'allowed_bundles' => array(
        'alumnus_person' => -1,
        'catering_food_by_day' => -1,
        'contacts' => 'contacts',
        'contacts_department' => -1,
        'description' => -1,
        'jobs' => -1,
        'reception_time' => -1,
        'subpage' => -1,
        'table' => -1,
      ),
      'bundle_weights' => array(
        'alumnus_person' => 2,
        'catering_food_by_day' => 3,
        'contacts' => 4,
        'contacts_department' => 5,
        'description' => 6,
        'jobs' => 7,
        'reception_time' => 8,
        'subpage' => 9,
        'table' => 10,
      ),
      'default_edit_mode' => 'open',
      'entity_translation_sync' => FALSE,
      'title' => 'Kontakt',
      'title_multiple' => 'Kontakte',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'paragraphs',
      'settings' => array(),
      'type' => 'paragraphs_embed',
      'weight' => 54,
    ),
  );
  // Translatables
  // Included for use with string extractors like potx.
  t('Kontaktid');

  foreach ($field_bases as $field) {
    $field_test = field_info_field($field['field_name']);
    if (empty($field_test)) {
      field_create_field($field);
    }
  }

  foreach ($field_instances as $field_instance) {
    $instance = field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']);
    if (!$instance) {
      field_create_instance($field_instance);
    }
  }
  return TRUE;
}
function hitsa_cron_up_5($update=NULL){
  $modules = array('image_exif_autorotate','imagecache_autorotate');
  foreach($modules as $module){
    if(!module_exists($module)){
      module_enable(array($module));
    }
  }
  $activated = true;
  foreach($modules as $module){
    if(!module_exists($module)){
      $activated = false;
    }
  }
  if($activated){
    return TRUE;
  }
  else{
    watchdog('hitsa_update_error','Modules were not enabled');
  }
}

function hitsa_cron_up_6($update=NULL){

  $main_menu_tree = menu_tree_all_data('hitsa-main-menu');
  $main_menu_links = array();
  foreach($main_menu_tree as $link) {
    $main_menu_links[$link['link']['title']] = $link;
  }
  if(isset($main_menu_links['About us'])){
    foreach($main_menu_links['About us']['below'] as $about_link){
      if($about_link['link']['link_title'] =='Galerii' || $about_link['link']['link_title'] =='Gallery' || $about_link['link']['link_title'] == 'ĞĞ°Ğ»ĞµÑĞµÑ'){
        if($about_link['link']['link_path'] !='gallery'){
          menu_link_delete($about_link['link']['mlid']);
        }
      }
    }
  }
}

function hitsa_cron_up_7()
{
  module_load_include('install','hitsa_events','hitsa_events');
  hitsa_events_create_menu_links();
  module_load_include('install','hitsa_alumnus','hitsa_alumnus');
  hitsa_alumnus_add_menu_links('Duplicate');
  return TRUE;
}
function hitsa_cron_up_8(){
  $block_query = db_select('block','b');
  $block_query -> fields('b');
  $block_query -> condition('b.module','hitsa_events','=');
  $block_query -> condition('b.delta','right_side_block','=');
  $results = $block_query->execute();
  $blid = null;
  $blocks =array();
  while($result = $results->fetchAssoc()){
    $blocks[] = $result;
  }
  if(!empty($blocks)){
   foreach($blocks as $block){
    $update = db_update('block') // Table name no longer needs {}
      ->fields(array(
        'pages' => "calendar\ntraining-calendar\nstudies-calendar",
      ))
      ->condition('bid',$block['bid'], '=')
      ->execute();
   }
  }
  block_flush_caches();
  cache_clear_all();
  module_load_include('install','hitsa_core','hitsa_core');

  hitsa_core_set_translatable_variables();
  return TRUE;
}
function hitsa_cron_up_9(){
  $words = array(
    'Cancel user account' => array(
      'et' => 'TÃ¼hista kasutajakonto',
    ),
    'Change user roles' => array(
      'et' => 'Vaheta kasutaja rolli',
    ),
  );
  module_load_include('inc','hitsa_translation_importer','/includes/hitsa_translation_importer.admin');
  hitsa_translations_importer_translations($words);
  drupal_flush_all_caches();
  return TRUE;
}
function hitsa_cron_up_10(){
  $items = array();
  $items["node:curriculum:14"] = array(
        'entity' => 'node',
        'bundle' => 'curriculum',
        'dependent' => 'field_subjects_table',
        'dependee' => 'field_school_selections',
        'options' => array(
            'state' => 'visible',
            'condition' => 'value',
            'grouping' => 'AND',
            'effect' => 'show',
            'effect_options' => array(),
            'element_view' => array(
                1 => 1,
                2 => 2,
                5 => 0,
                3 => 0,
                4 => 0,
            ),
            'element_view_per_role' => 0,
            'element_view_roles' => array(
                1 => array(
                    1 => 1,
                    2 => 2,
                    5 => 0,
                    3 => 0,
                    4 => 0,
                ),
                2 => array(
                    1 => 1,
                    2 => 2,
                    5 => 0,
                    3 => 0,
                    4 => 0,
                ),
                3 => array(
                    1 => 1,
                    2 => 2,
                    5 => 0,
                    3 => 0,
                    4 => 0,
                ),
                4 => array(
                    1 => 1,
                    2 => 2,
                    5 => 0,
                    3 => 0,
                    4 => 0,
                ),
            ),
            'element_edit' => array(
                1 => 1,
                3 => 0,
            ),
            'element_edit_per_role' => 0,
            'element_edit_roles' => array(
                1 => array(
                    1 => 1,
                    3 => 0,
                ),
                2 => array(
                    1 => 1,
                    3 => 0,
                ),
                3 => array(
                    1 => 1,
                    3 => 0,
                ),
                4 => array(
                    1 => 1,
                    3 => 0,
                ),
            ),
            'selector' => '',
            'values_set' => 1,
            'value_form' => 'subject-fields',
            'value' => array(
                0 => array(
                    'value' => 'subject-fields',
                ),
            ),
            'values' => array(),
        ),
    );
  foreach ($items as $conditional) {
    $ids = array();
    $field = field_info_instance('node', $conditional['dependee'], 'curriculum');

    $field2 = field_info_instance('node', $conditional['dependent'], 'curriculum');

    $ids = array(
      'dependee' => $field['id'],
      'dependent' => $field2['id'],
    );
      conditional_fields_dependency_insert($ids['dependee'], $ids['dependent'], $conditional['options']);
  }
}
function hitsa_cron_up_11(){
	$taxonomy = taxonomy_vocabulary_machine_name_load('catering_food_type');
	$taxonomy = taxonomy_get_tree($taxonomy->vid);
	foreach($taxonomy as $term){
		if($term->name=='KoolilÃµina'){
			$term->name='KoolilÃµuna';
			taxonomy_term_save($term);
		}
	}
	return TRUE;
}
function hitsa_cron_up_12(){
	$bundles = paragraphs_bundle_load();
	foreach($bundles as $bundle){
		if($bundle->name=='Alumnus person'){
			$bundle->name='Vilistlane';
		}
		elseif($bundle->name=='Food'){
			$bundle->name ='Toit';
		}
		elseif($bundle->name=='Contacts'){
			$bundle->name = 'Kontaktid';
		}
		elseif($bundle->name=='Description'){
			$bundle->name ='Kirjeldus';
		}
		elseif($bundle->name=='jobs'){
			$bundle->name = 'tÃ¶Ã¶';
		}
		elseif($bundle->name=='Reception time'){
			$bundle->name = 'VastuvÃµtu aeg';
		}
		elseif($bundle->name=='Table'){
			$bundle->name = 'Tabel';
		}
		paragraphs_bundle_save($bundle);

	}
	return TRUE;

}

function hitsa_cron_up_13(){
	$menus =  menu_get_menus();
	foreach($menus as $key => $menu){
		$loaded_menu = menu_load($key);
	if($loaded_menu['title']=='Header menu'){
		$loaded_menu['title'] = 'PÃ¤ise menÃ¼Ã¼';
		menu_save($loaded_menu);
	}	
	if($loaded_menu['title']=='Main menu' && $loaded_menu['menu_name']=='hitsa-main-menu'){
		$loaded_menu['title'] = 'PeamenÃ¼Ã¼';
		menu_save($loaded_menu);
	}	
	if($loaded_menu['title']=='Quicklinks'){
		$loaded_menu['title'] = 'Kiirlingid';
		menu_save($loaded_menu);
	}	
	if($loaded_menu['title']=='Footer menu'){
		$loaded_menu['title'] = 'Jaluse menÃ¼Ã¼';
		menu_save($loaded_menu);
	}	
	}
}
function hitsa_cron_up_14(){
    $field = field_info_instance('node', 'field_image', 'article');
    field_delete_instance($field);
    return TRUE;
}
function hitsa_cron_up_15(){
  $main_menu_tree = menu_tree_all_data('hitsa-main-menu');
  $main_menu_links = array();
  foreach($main_menu_tree as $link) {
    $main_menu_links[$link['link']['title']] = $link;
  }
  if(isset($main_menu_links['Student Life'])){
    foreach ($main_menu_links['Student Life']['below'] as $link_key => $link) {
      if(!empty($link['link'])){
        if($link['link']['link_title']=='Sport'){
          if (strpos($link['link']['link_path'], 'node/') !== false) {
            $path_alias = (drupal_get_path_alias($link['link']['link_path']));
            $path_old = path_load(array(
              'source' => $link['link']['link_path'],
              'alias' => $path_alias
            )              );
            $path_alias_check = path_load( array('source' => 'sport','alias'=>'sport'));
            if (strpos($path_alias, 'sport-') !== false) {
              $alias = array(
                'source' => $link['link']['link_path'],
                'alias' => 'sport',
                );
              path_save($alias);
              
            }
          }
        }
      }
    }
  }
}

function hitsa_cron_up_16(){
  $path_check_et = drupal_lookup_path('source', 'sport-0','et');
  $path_et = path_load($path_check_et);
  $sport_availible = drupal_lookup_path('source','sport','et');
  if(empty($sport_availible)){
    $path_et['alias'] = 'sport';
    path_save($path_et);
  }
}
function hitsa_cron_up_17(){
  $cron_memory_limit = variable_get('ultimate_cron_reserve_memory');
  if(empty($cron_memory_limit)){
    variable_set('ultimate_cron_reserve_memory',1024 * 1024 * 2 * 5);
  }
  else{
    if($cron_memory_limit!=1024*1024*2*5){
      variable_set('ultimate_cron_reserve_memory',1024*1024*2*5);
    }

  }
  return TRUE;
}

function hitsa_cron_up_18(){
  $style = image_style_load('hitsa_hero_banner');

  if(!empty($style['effects'])) {
    $ieid = key($style['effects']);
    $effect = image_effect_load($ieid, 'hitsa_hero_banner');

    if(!empty($effect)) {
      $effect['data'] = array('width' => 3840, 'height' => '', 'upscale' => 0);
      image_effect_save($effect);
    }
  }
  $image_style = image_style_load('hitsa_hero_banner');
  image_style_flush($image_style);
  return TRUE;
}
function hitsa_cron_up_19(){
  $type = variable_get('hitsa_school_type');
  if($type==1){
    $main_menu_tree = menu_tree_all_data('hitsa-main-menu');
    $main_menu_links = array();
    foreach($main_menu_tree as $link) {
      $main_menu_links[$link['link']['title']] = $link;
    }
    if(isset($main_menu_links['Student Life'])){
      if(!empty($main_menu_links['Student Life'])){
        if(!empty($main_menu_links['Student Life']['below'])){
          foreach ($main_menu_links['Student Life']['below'] as $main_menu_link){
            if($main_menu_link['link']['link_path']=='training-calendar'){
              menu_link_delete($main_menu_link['link']['mlid']);
            }
          }
        }
      }
    }
  }


  return TRUE;
}
function hitsa_cron_up_20(){
  module_load_include('install','link','link');
  link_update_7002();
}
function hitsa_cron_up_21(){
  $field_bases = array();
  // Exported field_base: 'field_tab_weight'.
  $field_bases['field_tab_weight'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_tab_weight',
    'indexes' => array(),
    'locked' => 0,
    'module' => 'number',
    'settings' => array(
      'entity_translation_sync' => FALSE,
    ),
    'translatable' => 0,
    'type' => 'number_integer',
  );
  $field_instances = array();

  // Exported field_instance: 'node-curriculum-field_tab_weight'.
  $field_instances['node-curriculum-field_tab_weight'] = array(
    'bundle' => 'curriculum',
    'default_value' => array(
      0 => array(
        'value' => 1,
      ),
    ),
    'deleted' => 0,
    'description' => 'Saki jÃ¤rjekorra number 1st  100ni. Kui jÃ¤rjekorra number ei erine, siis kuvatakse kuupÃ¤eva jÃ¤rgi lisamise jÃ¤rjekorras.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 31,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_tab_weight',
    'label' => 'Saki jÃ¤rjekord',
    'required' => 0,
    'settings' => array(
      'entity_translation_sync' => FALSE,
      'max' => 100,
      'min' => 1,
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 41,
    ),
  );
  foreach ($field_bases as $field) {

    $field_test = field_info_field($field['field_name']);
    if (empty($field_test)) {
      field_create_field($field);
    }
  }

  foreach ($field_instances as $field_instance) {
    if(empty(field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']))){
      field_create_instance($field_instance);
    };
  }
  return TRUE;
}