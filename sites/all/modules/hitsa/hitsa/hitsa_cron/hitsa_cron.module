<?php

function hitsa_cron_block_info()
{
  $blocks['fornt_page_events'] = array(
    'info' => t('Block to activate some updates'),
    'cache' => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
    'region' => 'content',
    'status' => 1,
  );
  return $blocks;
}
function hitsa_cron_block_view($delta = '')
{
  switch ($delta) {
    case 'fornt_page_events':
      hitsa_cron_activate_update();

      break;
  }
}
function hitsa_cron_activate_update()
{
  $robots = variable_get('robotstxt');
  if (empty($robots)) {
    $robots_text = '#
    # robots.txt
    #
    # This file is to prevent the crawling and indexing of certain parts
    # of your site by web crawlers and spiders run by sites like Yahoo!
    # and Google. By telling these "robots" where not to go on your site,
    # you save bandwidth and server resources.
    #
    # This file will be ignored unless it is at the root of your host:
    # Used:    http://example.com/robots.txt
    # Ignored: http://example.com/site/robots.txt
    #
    # For more information about the robots.txt standard, see:
    # http://www.robotstxt.org/robotstxt.html

    User-agent: *
    Crawl-delay: 10
    # CSS, JS, Images
    Allow: /misc/*.css$
    Allow: /misc/*.css?
    Allow: /misc/*.js$
    Allow: /misc/*.js?
    Allow: /misc/*.gif
    Allow: /misc/*.jpg
    Allow: /misc/*.jpeg
    Allow: /misc/*.png
    Allow: /modules/*.css$
    Allow: /modules/*.css?
    Allow: /modules/*.js$
    Allow: /modules/*.js?
    Allow: /modules/*.gif
    Allow: /modules/*.jpg
    Allow: /modules/*.jpeg
    Allow: /modules/*.png
    Allow: /profiles/*.css$
    Allow: /profiles/*.css?
    Allow: /profiles/*.js$
    Allow: /profiles/*.js?
    Allow: /profiles/*.gif
    Allow: /profiles/*.jpg
    Allow: /profiles/*.jpeg
    Allow: /profiles/*.png
    Allow: /themes/*.css$
    Allow: /themes/*.css?
    Allow: /themes/*.js$
    Allow: /themes/*.js?
    Allow: /themes/*.gif
    Allow: /themes/*.jpg
    Allow: /themes/*.jpeg
    Allow: /themes/*.png
    # Directories
    Disallow: /alumnus
    Disallow: /vilistlased
    Disallow: /выпускников
    Disallow: /includes/
    Disallow: /misc/
    Disallow: /modules/
    Disallow: /profiles/
    Disallow: /scripts/
    Disallow: /themes/
    # Files
    Disallow: /CHANGELOG.txt
    Disallow: /cron.php
    Disallow: /INSTALL.mysql.txt
    Disallow: /INSTALL.pgsql.txt
    Disallow: /INSTALL.sqlite.txt
    Disallow: /install.php
    Disallow: /INSTALL.txt
    Disallow: /LICENSE.txt
    Disallow: /MAINTAINERS.txt
    Disallow: /update.php
    Disallow: /UPGRADE.txt
    Disallow: /xmlrpc.php
    # Paths (clean URLs)
    Disallow: /admin/
    Disallow: /comment/reply/
    Disallow: /filter/tips/
    Disallow: /node/add/
    Disallow: /search/
    Disallow: /user/register/
    Disallow: /user/password/
    Disallow: /user/login/
    Disallow: /user/logout/
    # Paths (no clean URLs)
    Disallow: /?q=admin/
    Disallow: /?q=comment/reply/
    Disallow: /?q=filter/tips/
    Disallow: /?q=node/add/
    Disallow: /?q=search/
    Disallow: /?q=user/password/
    Disallow: /?q=user/register/
    Disallow: /?q=user/login/
    Disallow: /?q=user/logout/
    ';
    variable_set('robotstxt', $robots_text);
  }
}
/**
 * Implements hook_cronapi().
 */

function hitsa_cron_cronapi()
{
  //Siia kirjutada update number
  $cronsettings_set = variable_get('cronsettings_set');
  if (empty($cronsettings_set)) {
    variable_set('ultimate_cron_plugin_scheduler_default', 'crontab');
    variable_set('ultimate_cron_plugin_settings_poorman_settings', array('launcher' => 'serial', 'early_page_flush' => '1', 'user_agent' => 'Ultimate Cron'));
    variable_set('cronsettings_set', 'TRUE');
  }
  $items = [];
  $random_time = variable_get('hitsa_cron_random_time');
  if (empty($random_time)) {
    $random_time = rand(1, 60);
    variable_set('hitsa_cron_random_time', $random_time);
  }
  $items['hitsa_cron_grunt_runner'] = [
    'title' => t('Grunt runner'),
    'description' => 'Grunt compiler and runner',
    'callback' => 'hitsa_cron_run_grunt',
    'scheduler' => [
      'name' => 'crontab',
      'crontab' => [
        'rules' => [strval($random_time) . ' 2 * * *'],
      ],
    ],
  ];
  $items['hitsa_cron_translation_updater'] = [
    'title' => t('Translation Updater'),
    'description' => 'Updates translations',
    'file' => 'hitsa_cron_translation_updater.inc',
    'callback' => 'hitsa_cron_update_translations',
    'scheduler' => [
      'name' => 'crontab',
      'crontab' => [
        'rules' => [strval($random_time) . ' 4 * * *'],
      ],
    ],
  ];
  $items['hitsa_cron_update_runner'] = [
    'title' => t('Update runner'),
    'description' => 'Update runner',
    'callback' => 'hitsa_cron_run_update',
    'scheduler' => [
      'name' => 'crontab',
      'crontab' => [
        'rules' => [strval($random_time) . ' 3 * * *'],
      ],
    ],
  ];

  return $items;
}

/* Hitsa cron grunt runner.
 *
*/

function hitsa_cron_run_grunt()
{
  module_load_include('inc', 'hitsa_color', 'includes/hitsa_color');
  hitsa_color_grunt_runner();
}

/**
 * Hitsa update script
 */
function hitsa_cron_run_update()
{

  $updates = [
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    '10',
    '11',
    '12',
    '13',
    '14',
    '15',
    '16',
    '17',
    '18',
    '19',
    '20',
    '21',
    '22',
    '23',
    '24',
    '25',
    '26',
    '27',
    '28',
    '29',
    '30',
    '31',
    '32',
    '33',
    '34',
    '35',
    '36',
    '37',
    '38',
    '39',
    '40'
  ];
  if (!empty($updates)) {
    $updated = variable_get('hitsa_updated');
    $updated = explode(',', $updated);
    foreach ($updates as $update) {
      $to_update = TRUE;
      foreach ($updated as $uptodate) {
        if (strval($update) == strval($uptodate)) {
          $to_update = FALSE;
          break;
        }
      }
      if ($to_update) {
        variable_set('cache_clean_please',1);
        $function_name = 'hitsa_cron_up_' . strval($update);
        if (function_exists($function_name)) {
          $update_status = call_user_func($function_name, $update);
          if ($update_status) {

            $updatedd = variable_get('hitsa_updated');
            if (empty($updatedd)) {
              variable_set('hitsa_updated', $update);
            } else {
              variable_set('hitsa_updated', $updatedd . ',' . $update);
            }
          }
        }
      }
    }

  }
}

function hitsa_cron_up_1($update)
{
  $image_style = image_style_load('hitsa_article_modal_view');
  if (!empty($image_style['effects'])) {
    foreach ($image_style['effects'] as $effect_key => $effect) {
      if ($effect['name'] == 'image_scale') {
        $image_effect = image_effect_load($effect_key, 'hitsa_article_modal_view');
        if (!empty($image_effect['data'])) {
          $image_effect['data']['width'] = '1440';
          $image_effect['data']['height'] = '810';
        }
        image_effect_save($image_effect);
      }
    }
  }
  return TRUE;
}

/**
 * @param null $update
 *
 * Add table selector to description.
 */
function hitsa_cron_up_2($update = null)
{
  $field_bases = array();
  // Exported field_base: 'field_tabel_number'.
  $field_bases['field_tabel_number'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_tabel_number',
    'indexes' => array(),
    'locked' => 0,
    'module' => 'number',
    'settings' => array(
      'entity_translation_sync' => FALSE,
    ),
    'translatable' => 0,
    'type' => 'number_integer',
  );
  $field_instances = array();
  // Exported field_instance: 'paragraphs_item-description-field_tabel_number'.
  $field_instances['paragraphs_item-description-field_tabel_number'] = array(
    'bundle' => 'description',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'Täpsustage, millise tabeli juurde number kuulub<br>
Vajalik ainult eriala tabeli puhul',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 3,
      ),
      'paragraphs_editor_preview' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'paragraphs_item',
    'field_name' => 'field_tabel_number',
    'label' => 'Tabeli nr',
    'required' => 0,
    'settings' => array(
      'entity_translation_sync' => FALSE,
      'max' => '',
      'min' => 1,
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 0,
    ),
  );
  foreach ($field_bases as $field) {
    $field_test = field_info_field($field['field_name']);
    if (empty($field_test)) {
      field_create_field($field);
    }
  }

  foreach ($field_instances as $field_instance) {
    $instance = field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']);
    if (!$instance) {
      field_create_instance($field_instance);
    }
  }
  return TRUE;
}

/**
 * @param null $update
 * @return bool
 * @throws FieldException
 * Update to add contacts field to news, contetnt article and events
 */
function hitsa_cron_up_3($update = null)
{
  $field_bases = array();

  // Exported field_base: 'field_contacts'.
  $field_bases['field_contacts'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_contacts',
    'indexes' => array(),
    'locked' => 0,
    'module' => 'paragraphs',
    'settings' => array(
      'entity_translation_sync' => FALSE,
    ),
    'translatable' => 0,
    'type' => 'paragraphs',
  );

  $field_instances = array();

  // Exported field_instance: 'node-article-field_contacts'.
  $field_instances['node-article-field_contacts'] = array(
    'bundle' => 'article',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'paragraphs',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'paragraphs_view',
        'weight' => 11,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_contacts',
    'label' => 'Kontaktid',
    'required' => 0,
    'settings' => array(
      'add_mode' => 'select',
      'allowed_bundles' => array(
        'alumnus_person' => -1,
        'catering_food_by_day' => -1,
        'contacts' => 'contacts',
        'contacts_department' => -1,
        'description' => -1,
        'jobs' => -1,
        'reception_time' => -1,
        'subpage' => -1,
        'table' => -1,
      ),
      'bundle_weights' => array(
        'alumnus_person' => 2,
        'catering_food_by_day' => 3,
        'contacts' => 4,
        'contacts_department' => 5,
        'description' => 6,
        'jobs' => 7,
        'reception_time' => 8,
        'subpage' => 9,
        'table' => 10,
      ),
      'default_edit_mode' => 'open',
      'entity_translation_sync' => FALSE,
      'title' => 'Kontakt',
      'title_multiple' => 'Kontakte',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'paragraphs',
      'settings' => array(),
      'type' => 'paragraphs_embed',
      'weight' => 44,
    ),
  );

  // Exported field_instance: 'node-content_page-field_contacts'.
  $field_instances['node-content_page-field_contacts'] = array(
    'bundle' => 'content_page',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'paragraphs',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'paragraphs_view',
        'weight' => 14,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_contacts',
    'label' => 'Kontaktid',
    'required' => 0,
    'settings' => array(
      'add_mode' => 'button',
      'allowed_bundles' => array(
        'alumnus_person' => -1,
        'catering_food_by_day' => -1,
        'contacts' => 'contacts',
        'contacts_department' => -1,
        'description' => -1,
        'jobs' => -1,
        'reception_time' => -1,
        'subpage' => -1,
        'table' => -1,
      ),
      'bundle_weights' => array(
        'alumnus_person' => 2,
        'catering_food_by_day' => 3,
        'contacts' => 4,
        'contacts_department' => 5,
        'description' => 6,
        'jobs' => 7,
        'reception_time' => 8,
        'subpage' => 9,
        'table' => 10,
      ),
      'default_edit_mode' => 'open',
      'entity_translation_sync' => FALSE,
      'title' => 'Kontakt',
      'title_multiple' => 'Kontakte',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'paragraphs',
      'settings' => array(),
      'type' => 'paragraphs_embed',
      'weight' => 54,
    ),
  );
  $field_instances['node-content_page-field_contacts'] = array(
    'bundle' => 'event',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'paragraphs',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'paragraphs_view',
        'weight' => 14,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_contacts',
    'label' => 'Kontaktid',
    'required' => 0,
    'settings' => array(
      'add_mode' => 'button',
      'allowed_bundles' => array(
        'alumnus_person' => -1,
        'catering_food_by_day' => -1,
        'contacts' => 'contacts',
        'contacts_department' => -1,
        'description' => -1,
        'jobs' => -1,
        'reception_time' => -1,
        'subpage' => -1,
        'table' => -1,
      ),
      'bundle_weights' => array(
        'alumnus_person' => 2,
        'catering_food_by_day' => 3,
        'contacts' => 4,
        'contacts_department' => 5,
        'description' => 6,
        'jobs' => 7,
        'reception_time' => 8,
        'subpage' => 9,
        'table' => 10,
      ),
      'default_edit_mode' => 'open',
      'entity_translation_sync' => FALSE,
      'title' => 'Kontakt',
      'title_multiple' => 'Kontakte',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'paragraphs',
      'settings' => array(),
      'type' => 'paragraphs_embed',
      'weight' => 54,
    ),
  );
  // Translatables
  // Included for use with string extractors like potx.
  t('Kontaktid');

  foreach ($field_bases as $field) {
    $field_test = field_info_field($field['field_name']);
    if (empty($field_test)) {
      field_create_field($field);
    }
  }

  foreach ($field_instances as $field_instance) {
    $instance = field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']);
    if (!$instance) {
      field_create_instance($field_instance);
    }
  }
  return TRUE;
}
/**
 * @param null $update
 * @return bool
 * @throws FieldException
 * Update to add contacts field to news, contetnt article and events
 */
function hitsa_cron_up_4($update = null)
{
  $field_bases = array();

  // Exported field_base: 'field_contacts'.
  $field_bases['field_contacts'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_contacts',
    'indexes' => array(),
    'locked' => 0,
    'module' => 'paragraphs',
    'settings' => array(
      'entity_translation_sync' => FALSE,
    ),
    'translatable' => 0,
    'type' => 'paragraphs',
  );

  $field_instances = array();

  // Exported field_instance: 'node-article-field_contacts'.
  $field_instances['node-article-field_contacts'] = array(
    'bundle' => 'article',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'paragraphs',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'paragraphs_view',
        'weight' => 11,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_contacts',
    'label' => 'Kontaktid',
    'required' => 0,
    'settings' => array(
      'add_mode' => 'select',
      'allowed_bundles' => array(
        'alumnus_person' => -1,
        'catering_food_by_day' => -1,
        'contacts' => 'contacts',
        'contacts_department' => -1,
        'description' => -1,
        'jobs' => -1,
        'reception_time' => -1,
        'subpage' => -1,
        'table' => -1,
      ),
      'bundle_weights' => array(
        'alumnus_person' => 2,
        'catering_food_by_day' => 3,
        'contacts' => 4,
        'contacts_department' => 5,
        'description' => 6,
        'jobs' => 7,
        'reception_time' => 8,
        'subpage' => 9,
        'table' => 10,
      ),
      'default_edit_mode' => 'open',
      'entity_translation_sync' => FALSE,
      'title' => 'Kontakt',
      'title_multiple' => 'Kontakte',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'paragraphs',
      'settings' => array(),
      'type' => 'paragraphs_embed',
      'weight' => 44,
    ),
  );

  // Exported field_instance: 'node-content_page-field_contacts'.
  $field_instances['node-content_page-field_contacts'] = array(
    'bundle' => 'content_page',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'paragraphs',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'paragraphs_view',
        'weight' => 14,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_contacts',
    'label' => 'Kontaktid',
    'required' => 0,
    'settings' => array(
      'add_mode' => 'button',
      'allowed_bundles' => array(
        'alumnus_person' => -1,
        'catering_food_by_day' => -1,
        'contacts' => 'contacts',
        'contacts_department' => -1,
        'description' => -1,
        'jobs' => -1,
        'reception_time' => -1,
        'subpage' => -1,
        'table' => -1,
      ),
      'bundle_weights' => array(
        'alumnus_person' => 2,
        'catering_food_by_day' => 3,
        'contacts' => 4,
        'contacts_department' => 5,
        'description' => 6,
        'jobs' => 7,
        'reception_time' => 8,
        'subpage' => 9,
        'table' => 10,
      ),
      'default_edit_mode' => 'open',
      'entity_translation_sync' => FALSE,
      'title' => 'Kontakt',
      'title_multiple' => 'Kontakte',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'paragraphs',
      'settings' => array(),
      'type' => 'paragraphs_embed',
      'weight' => 54,
    ),
  );
  $field_instances['node-content_page-field_contacts'] = array(
    'bundle' => 'event',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'paragraphs',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'paragraphs_view',
        'weight' => 14,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_contacts',
    'label' => 'Kontaktid',
    'required' => 0,
    'settings' => array(
      'add_mode' => 'button',
      'allowed_bundles' => array(
        'alumnus_person' => -1,
        'catering_food_by_day' => -1,
        'contacts' => 'contacts',
        'contacts_department' => -1,
        'description' => -1,
        'jobs' => -1,
        'reception_time' => -1,
        'subpage' => -1,
        'table' => -1,
      ),
      'bundle_weights' => array(
        'alumnus_person' => 2,
        'catering_food_by_day' => 3,
        'contacts' => 4,
        'contacts_department' => 5,
        'description' => 6,
        'jobs' => 7,
        'reception_time' => 8,
        'subpage' => 9,
        'table' => 10,
      ),
      'default_edit_mode' => 'open',
      'entity_translation_sync' => FALSE,
      'title' => 'Kontakt',
      'title_multiple' => 'Kontakte',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'paragraphs',
      'settings' => array(),
      'type' => 'paragraphs_embed',
      'weight' => 54,
    ),
  );
  // Translatables
  // Included for use with string extractors like potx.
  t('Kontaktid');

  foreach ($field_bases as $field) {
    $field_test = field_info_field($field['field_name']);
    if (empty($field_test)) {
      field_create_field($field);
    }
  }

  foreach ($field_instances as $field_instance) {
    $instance = field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']);
    if (!$instance) {
      field_create_instance($field_instance);
    }
  }
  return TRUE;
}
function hitsa_cron_up_5($update = NULL)
{
  $modules = array('image_exif_autorotate', 'imagecache_autorotate');
  foreach ($modules as $module) {
    if (!module_exists($module)) {
      module_enable(array($module));
    }
  }
  $activated = true;
  foreach ($modules as $module) {
    if (!module_exists($module)) {
      $activated = false;
    }
  }
  if ($activated) {
    return TRUE;
  } else {
    watchdog('hitsa_update_error', 'Modules were not enabled');
  }
}

function hitsa_cron_up_6($update = NULL)
{

  $main_menu_tree = menu_tree_all_data('hitsa-main-menu');
  $main_menu_links = array();
  foreach ($main_menu_tree as $link) {
    $main_menu_links[$link['link']['title']] = $link;
  }
  if (isset($main_menu_links['About us'])) {
    foreach ($main_menu_links['About us']['below'] as $about_link) {
      if ($about_link['link']['link_title'] == 'Galerii' || $about_link['link']['link_title'] == 'Gallery' || $about_link['link']['link_title'] == 'Галерея') {
        if ($about_link['link']['link_path'] != 'gallery') {
          menu_link_delete($about_link['link']['mlid']);
        }
      }
    }
  }
}

function hitsa_cron_up_7()
{
  module_load_include('install', 'hitsa_events', 'hitsa_events');
  hitsa_events_create_menu_links();
  module_load_include('install', 'hitsa_alumnus', 'hitsa_alumnus');
  hitsa_alumnus_add_menu_links('Duplicate');
  return TRUE;
}
function hitsa_cron_up_8()
{
  $block_query = db_select('block', 'b');
  $block_query->fields('b');
  $block_query->condition('b.module', 'hitsa_events', '=');
  $block_query->condition('b.delta', 'right_side_block', '=');
  $results = $block_query->execute();
  $blid = null;
  $blocks = array();
  while ($result = $results->fetchAssoc()) {
    $blocks[] = $result;
  }
  if (!empty($blocks)) {
    foreach ($blocks as $block) {
      $update = db_update('block') // Table name no longer needs {}
        ->fields(array(
          'pages' => "calendar\ntraining-calendar\nstudies-calendar",
        ))
        ->condition('bid', $block['bid'], '=')
        ->execute();
    }
  }
  block_flush_caches();
  cache_clear_all();
  module_load_include('install', 'hitsa_core', 'hitsa_core');

  hitsa_core_set_translatable_variables();
  return TRUE;
}
function hitsa_cron_up_9()
{
  $words = array(
    'Cancel user account' => array(
      'et' => 'Tühista kasutajakonto',
    ),
    'Change user roles' => array(
      'et' => 'Vaheta kasutaja rolli',
    ),
  );
  module_load_include('inc', 'hitsa_translation_importer', '/includes/hitsa_translation_importer.admin');
  hitsa_translations_importer_translations($words);
  drupal_flush_all_caches();
  return TRUE;
}
function hitsa_cron_up_10()
{
  $items = array();
  $items["node:curriculum:14"] = array(
    'entity' => 'node',
    'bundle' => 'curriculum',
    'dependent' => 'field_subjects_table',
    'dependee' => 'field_school_selections',
    'options' => array(
      'state' => 'visible',
      'condition' => 'value',
      'grouping' => 'AND',
      'effect' => 'show',
      'effect_options' => array(),
      'element_view' => array(
        1 => 1,
        2 => 2,
        5 => 0,
        3 => 0,
        4 => 0,
      ),
      'element_view_per_role' => 0,
      'element_view_roles' => array(
        1 => array(
          1 => 1,
          2 => 2,
          5 => 0,
          3 => 0,
          4 => 0,
        ),
        2 => array(
          1 => 1,
          2 => 2,
          5 => 0,
          3 => 0,
          4 => 0,
        ),
        3 => array(
          1 => 1,
          2 => 2,
          5 => 0,
          3 => 0,
          4 => 0,
        ),
        4 => array(
          1 => 1,
          2 => 2,
          5 => 0,
          3 => 0,
          4 => 0,
        ),
      ),
      'element_edit' => array(
        1 => 1,
        3 => 0,
      ),
      'element_edit_per_role' => 0,
      'element_edit_roles' => array(
        1 => array(
          1 => 1,
          3 => 0,
        ),
        2 => array(
          1 => 1,
          3 => 0,
        ),
        3 => array(
          1 => 1,
          3 => 0,
        ),
        4 => array(
          1 => 1,
          3 => 0,
        ),
      ),
      'selector' => '',
      'values_set' => 1,
      'value_form' => 'subject-fields',
      'value' => array(
        0 => array(
          'value' => 'subject-fields',
        ),
      ),
      'values' => array(),
    ),
  );
  foreach ($items as $conditional) {
    $ids = array();
    $field = field_info_instance('node', $conditional['dependee'], 'curriculum');

    $field2 = field_info_instance('node', $conditional['dependent'], 'curriculum');

    $ids = array(
      'dependee' => $field['id'],
      'dependent' => $field2['id'],
    );
    conditional_fields_dependency_insert($ids['dependee'], $ids['dependent'], $conditional['options']);
  }
}
function hitsa_cron_up_11()
{
  $taxonomy = taxonomy_vocabulary_machine_name_load('catering_food_type');
  $taxonomy = taxonomy_get_tree($taxonomy->vid);
  foreach ($taxonomy as $term) {
    if ($term->name == 'Koolilõina') {
      $term->name = 'Koolilõuna';
      taxonomy_term_save($term);
    }
  }
  return TRUE;
}
function hitsa_cron_up_12()
{
  $bundles = paragraphs_bundle_load();
  foreach ($bundles as $bundle) {
    if ($bundle->name == 'Alumnus person') {
      $bundle->name = 'Vilistlane';
    } elseif ($bundle->name == 'Food') {
      $bundle->name = 'Toit';
    } elseif ($bundle->name == 'Contacts') {
      $bundle->name = 'Kontaktid';
    } elseif ($bundle->name == 'Description') {
      $bundle->name = 'Kirjeldus';
    } elseif ($bundle->name == 'jobs') {
      $bundle->name = 'töö';
    } elseif ($bundle->name == 'Reception time') {
      $bundle->name = 'Vastuvõtu aeg';
    } elseif ($bundle->name == 'Table') {
      $bundle->name = 'Tabel';
    }
    paragraphs_bundle_save($bundle);
  }
  return TRUE;
}

function hitsa_cron_up_13()
{
  $menus =  menu_get_menus();
  foreach ($menus as $key => $menu) {
    $loaded_menu = menu_load($key);
    if ($loaded_menu['title'] == 'Header menu') {
      $loaded_menu['title'] = 'Päise menüü';
      menu_save($loaded_menu);
    }
    if ($loaded_menu['title'] == 'Main menu' && $loaded_menu['menu_name'] == 'hitsa-main-menu') {
      $loaded_menu['title'] = 'Peamenüü';
      menu_save($loaded_menu);
    }
    if ($loaded_menu['title'] == 'Quicklinks') {
      $loaded_menu['title'] = 'Kiirlingid';
      menu_save($loaded_menu);
    }
    if ($loaded_menu['title'] == 'Footer menu') {
      $loaded_menu['title'] = 'Jaluse menüü';
      menu_save($loaded_menu);
    }
  }
}
function hitsa_cron_up_14()
{
  $field = field_info_instance('node', 'field_image', 'article');
  field_delete_instance($field);
  return TRUE;
}
function hitsa_cron_up_15()
{
  $main_menu_tree = menu_tree_all_data('hitsa-main-menu');
  $main_menu_links = array();
  foreach ($main_menu_tree as $link) {
    $main_menu_links[$link['link']['title']] = $link;
  }
  if (isset($main_menu_links['Student Life'])) {
    foreach ($main_menu_links['Student Life']['below'] as $link_key => $link) {
      if (!empty($link['link'])) {
        if ($link['link']['link_title'] == 'Sport') {
          if (strpos($link['link']['link_path'], 'node/') !== false) {
            $path_alias = (drupal_get_path_alias($link['link']['link_path']));
            $path_old = path_load(array(
              'source' => $link['link']['link_path'],
              'alias' => $path_alias
            ));
            $path_alias_check = path_load(array('source' => 'sport', 'alias' => 'sport'));
            if (strpos($path_alias, 'sport-') !== false) {
              $alias = array(
                'source' => $link['link']['link_path'],
                'alias' => 'sport',
              );
              path_save($alias);
            }
          }
        }
      }
    }
  }
  return TRUE;
}

function hitsa_cron_up_16()
{
  $path_check_et = drupal_lookup_path('source', 'sport-0', 'et');
  $path_et = path_load($path_check_et);
  $sport_availible = drupal_lookup_path('source', 'sport', 'et');
  if (empty($sport_availible)) {
    $path_et['alias'] = 'sport';
    path_save($path_et);
  }
}
function hitsa_cron_up_17()
{
  $cron_memory_limit = variable_get('ultimate_cron_reserve_memory');
  if (empty($cron_memory_limit)) {
    variable_set('ultimate_cron_reserve_memory', 1024 * 1024 * 2 * 5);
  } else {
    if ($cron_memory_limit != 1024 * 1024 * 2 * 5) {
      variable_set('ultimate_cron_reserve_memory', 1024 * 1024 * 2 * 5);
    }
  }
  return TRUE;
}

function hitsa_cron_up_18()
{
  $style = image_style_load('hitsa_hero_banner');

  if (!empty($style['effects'])) {
    $ieid = key($style['effects']);
    $effect = image_effect_load($ieid, 'hitsa_hero_banner');

    if (!empty($effect)) {
      $effect['data'] = array('width' => 3840, 'height' => '', 'upscale' => 0);
      image_effect_save($effect);
    }
  }
  $image_style = image_style_load('hitsa_hero_banner');
  image_style_flush($image_style);
  return TRUE;
}
function hitsa_cron_up_19()
{
  $type = variable_get('hitsa_school_type');
  if ($type == 1) {
    $main_menu_tree = menu_tree_all_data('hitsa-main-menu');
    $main_menu_links = array();
    foreach ($main_menu_tree as $link) {
      $main_menu_links[$link['link']['title']] = $link;
    }
    if (isset($main_menu_links['Student Life'])) {
      if (!empty($main_menu_links['Student Life'])) {
        if (!empty($main_menu_links['Student Life']['below'])) {
          foreach ($main_menu_links['Student Life']['below'] as $main_menu_link) {
            if ($main_menu_link['link']['link_path'] == 'training-calendar') {
              menu_link_delete($main_menu_link['link']['mlid']);
            }
          }
        }
      }
    }
  }


  return TRUE;
}
function hitsa_cron_up_20()
{
  module_load_include('install', 'link', 'link');
  link_update_7002();
}
function hitsa_cron_up_21()
{
  $field_bases = array();
  // Exported field_base: 'field_tab_weight'.
  $field_bases['field_tab_weight'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_tab_weight',
    'indexes' => array(),
    'locked' => 0,
    'module' => 'number',
    'settings' => array(
      'entity_translation_sync' => FALSE,
    ),
    'translatable' => 0,
    'type' => 'number_integer',
  );
  $field_instances = array();

  // Exported field_instance: 'node-curriculum-field_tab_weight'.
  $field_instances['node-curriculum-field_tab_weight'] = array(
    'bundle' => 'curriculum',
    'default_value' => array(
      0 => array(
        'value' => 1,
      ),
    ),
    'deleted' => 0,
    'description' => 'Saki järjekorra number 1st  100ni. Kui järjekorra number ei erine, siis kuvatakse kuupäeva järgi lisamise järjekorras.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'number',
        'settings' => array(
          'decimal_separator' => '.',
          'prefix_suffix' => TRUE,
          'scale' => 0,
          'thousand_separator' => '',
        ),
        'type' => 'number_integer',
        'weight' => 31,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_tab_weight',
    'label' => 'Saki järjekord',
    'required' => 0,
    'settings' => array(
      'entity_translation_sync' => FALSE,
      'max' => 100,
      'min' => 1,
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'number',
      'settings' => array(),
      'type' => 'number',
      'weight' => 41,
    ),
  );
  foreach ($field_bases as $field) {

    $field_test = field_info_field($field['field_name']);
    if (empty($field_test)) {
      field_create_field($field);
    }
  }

  foreach ($field_instances as $field_instance) {
    if (empty(field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']))) {
      field_create_instance($field_instance);
    };
  }
  return TRUE;
}
function hitsa_cron_up_22()
{
  $field_bases = array();
  // Exported field_base: 'field_tab_weight'.
  $field_bases['field_logo_area'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_logo_area',
    'indexes' => array(
      'fid' => array(
        0 => 'fid',
      ),
    ),
    'locked' => 0,
    'module' => 'image',
    'settings' => array(
      'add_row_localization_source' => 'Add another item',
      'default_image' => 0,
      'entity_translation_sync' => array(
        0 => 'fid',
      ),
      'uri_scheme' => 'public',
    ),
    'translatable' => 0,
    'type' => 'image',
  );
  $field_instances = array();

  // Exported field_instance: 'node-curriculum-field_tab_weight'.
  // Exported field_instance: 'node-curriculum-field_logo_area'.
  $field_instances['node-curriculum-field_logo_area'] = array(
    'bundle' => 'curriculum',
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'image',
        'settings' => array(
          'image_link' => '',
          'image_style' => '',
        ),
        'type' => 'image',
        'weight' => 32,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_logo_area',
    'label' => 'Saki päise pilt',
    'required' => 0,
    'settings' => array(
      'alt_field' => 0,
      'default_image' => 0,
      'entity_translation_sync' => FALSE,
      'file_directory' => '',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'title_field' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'media',
      'settings' => array(
        'allowed_schemes' => array(
          'public' => 'public',
          'youtube' => 0,
        ),
        'allowed_types' => array(
          'audio' => 0,
          'document' => 0,
          'image' => 'image',
          'video' => 0,
        ),
        'browser_plugins' => array(
          'media_browser_plus--media_browser_my_files' => 0,
          'media_browser_plus--media_browser_thumbnails' => 0,
          'media_default--media_browser_1' => 0,
          'media_default--media_browser_my_files' => 0,
          'media_internet' => 0,
          'upload' => 0,
        ),
        'manualcrop_crop_info' => 1,
        'manualcrop_default_crop_area' => 1,
        'manualcrop_enable' => 0,
        'manualcrop_inline_crop' => 0,
        'manualcrop_instant_crop' => FALSE,
        'manualcrop_instant_preview' => 1,
        'manualcrop_keyboard' => 1,
        'manualcrop_maximize_default_crop_area' => 0,
        'manualcrop_require_cropping' => array(),
        'manualcrop_styles_list' => array(),
        'manualcrop_styles_mode' => 'include',
        'manualcrop_thumblist' => 0,
      ),
      'type' => 'media_generic',
      'weight' => 23,
    ),
  );

  foreach ($field_bases as $field) {

    $field_test = field_info_field($field['field_name']);
    if (empty($field_test)) {
      field_create_field($field);
    }
  }

  foreach ($field_instances as $field_instance) {
    if (empty(field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']))) {
      field_create_instance($field_instance);
    };
  }
  return TRUE;
}
function  hitsa_cron_up_23()
{
  $field_bases = array();
  // Exported field_base: 'field_fa_icon'.
  $field_bases['field_fa_icon'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_fa_icon',
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(
      'add_row_localization_source' => 'Add another item',
      'entity_translation_sync' => FALSE,
      'max_length' => 2550,
    ),
    'translatable' => 0,
    'type' => 'text',
  );
  // Exported field_base: 'field_tab_weight'.
  $field_bases['field_logo_area'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_logo_area',
    'indexes' => array(
      'fid' => array(
        0 => 'fid',
      ),
    ),
    'locked' => 0,
    'module' => 'image',
    'settings' => array(
      'add_row_localization_source' => 'Add another item',
      'default_image' => 0,
      'entity_translation_sync' => array(
        0 => 'fid',
      ),
      'uri_scheme' => 'public',
    ),
    'translatable' => 0,
    'type' => 'image',
  );
  $field_instances = array();

  // Exported field_instance: 'taxonomy_term-fields-field_fa_icon'.
  $field_instances['taxonomy_term-fields-field_fa_icon'] = array(
    'bundle' => 'fields',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'Selle välja abil saab kasutada Font Awesome ikooni pakis olevaid ikoone.<br/>
Ikoone on võimalik näha lehelt  -> <a target="_blank" href="https://fontawesome.com/icons?d=gallery&s=solid&m=free">Ikoonide nimekiri</a><br>
Siia väljale tuleb kirjutada nimetus mis asub Ikoonide nimekirilehel ikooni all <br/>
Ikoonide nimekiri lehel tasub jälgida, et vasakult oleks valitud Solid ja Free filter.

',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 1,
      ),
    ),
    'entity_type' => 'taxonomy_term',
    'field_name' => 'field_fa_icon',
    'label' => 'Font Awesome Ikoon',
    'required' => 0,
    'settings' => array(
      'entity_translation_sync' => FALSE,
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'maxlength_js' => 0,
        'maxlength_js_label' => 'Content limited to @limit characters, remaining: <strong>@remaining</strong>',
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  // Translatables
  // Included for use with string extractors like potx.
  t('Font Awesome Ikoon');
  t('Selle välja abil saab kasutada Font Awesome ikooni pakis olevaid ikoone.<br/>
Ikoone on võimalik näha lehelt  -> <a target="_blank" href="https://fontawesome.com/icons?d=gallery&s=solid&m=free">Ikoonide nimekiri</a><br>
Siia väljale tuleb kirjutada nimetus mis asub Ikoonide nimekirilehel ikooni all <br/>
Ikoonide nimekiri lehel tasub jälgida, et vasakult oleks valitud Solid ja Free filter.<br />
Kui peaks olema valitud mõlemad Ikooni valik  kui ka Font Awesome Ikoon, siis eelistatakse Font Awesome ikooni

');


  foreach ($field_bases as $field) {

    $field_test = field_info_field($field['field_name']);
    if (empty($field_test)) {
      field_create_field($field);
    }
  }

  foreach ($field_instances as $field_instance) {
    if (empty(field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']))) {
      field_create_instance($field_instance);
    };
  }
  /**
   * Added link update to remove update flag
   */
  db_update('system')
    ->fields(array('schema_version' => '7002'))
    ->condition('name', 'link', '=')
    ->execute();
  return TRUE;
}
function hitsa_cron_up_24()
{
  $image_style = image_style_load('hitsa_core_thumbnail');
  if (!empty($image_style['effects'])) {
    foreach ($image_style['effects'] as $effect_key => $effect) {
      if ($effect['name'] == 'image_scale_and_crop') {
        $image_effect = image_effect_load($effect_key, 'hitsa_core_thumbnail');
        if (!empty($image_effect['data'])) {
          $image_effect['data']['width'] = '1440';
          $image_effect['data']['height'] = '810';
        }
        image_effect_delete($image_effect);
      }
    }
    $effect = array(
      'name' => 'image_scale',
      'data' => array(
        'width' => '708',
        'height' => '396'
      ),
      'isid' => $image_style['isid'],
    );
    image_effect_save($effect);
  }
  return TRUE;
}
function hitsa_cron_up_25($update = NULL)
{
  $modules = array('robotstxt');
  foreach ($modules as $module) {
    if (!module_exists($module)) {
      module_enable(array($module));
    }
  }
  drupal_flush_all_caches();
  return TRUE;
}
function hitsa_cron_up_26()
{
  $blob = 'a:8:{s:5:"title";a:1:{s:5:"value";s:46:"[node:title] | [current-page:pager][site:name]";}s:11:"description";a:1:{s:5:"value";s:14:"[node:summary]";}s:8:"og:title";a:1:{s:5:"value";s:12:"[node:title]";}s:14:"og:description";a:1:{s:5:"value";s:14:"[node:summary]";}s:15:"og:updated_time";a:1:{s:5:"value";s:23:"[node:changed:custom:c]";}s:8:"og:image";a:1:{s:5:"value";s:36:"[node:cp_image][node:subpage_images]";}s:22:"article:published_time";a:1:{s:5:"value";s:23:"[node:created:custom:c]";}s:21:"article:modified_time";a:1:{s:5:"value";s:23:"[node:changed:custom:c]";}}';
  if (!empty($blob)) {
    db_merge('metatag_config')->key(array('instance' => 'node'))->fields(array(
      'instance' => 'node',
      'config' => $blob,
    ))->execute();
  }
  return TRUE;
}
function hitsa_cron_up_27()
{
  $modules = array('hitsa_rss');
  foreach ($modules as $module) {
    if (!module_exists($module)) {
      module_enable(array($module));
    }
  }
  drupal_flush_all_caches();
  drupal_flush_all_caches();
  return TRUE;
}
function hitsa_cron_up_28()
{
  module_load_include('install', 'tablefield', 'tablefield');
  tablefield_update_7007();
  db_update('system')
    ->fields(array('schema_version' => '7007'))
    ->condition('name', 'tablefield', '=')
    ->execute();
  module_load_include('install', 'system', 'system');
  system_update_7082();
  db_update('system')
    ->fields(array('schema_version' => '7082'))
    ->condition('name', 'system', '=')
    ->execute();
  return TRUE;
}

function hitsa_cron_up_29()
{
  // drupal_flush_all_caches();
  $main_menu_tree = menu_tree_all_data('hitsa-main-menu');
  $main_menu_links = array();
  foreach ($main_menu_tree as $link) {
    $main_menu_links[$link['link']['title']] = $link;
  }
  if (isset($main_menu_links['Student Life'])) {
    foreach ($main_menu_links['Student Life']['below'] as $link_key => $link) {
      if (!empty($link['link'])) {
        if ($link['link']['link_title'] == 'Catering') {
          if (strpos($link['link']['link_path'], 'node/') !== false) {
            $path_alias = (drupal_get_path_alias($link['link']['link_path']));
            $path_old = path_load(array(
              'source' => $link['link']['link_path'],
              'alias' => $path_alias
            ));
            $path_alias_check = path_load(array('source' => 'catering', 'alias' => 'catering'));
            if (strpos($path_alias, 'catering-') !== false) {
              $alias = array(
                'source' => $link['link']['link_path'],
                'alias' => 'catering',
              );
              path_save($alias);
            }
          }
        }
      }
    }
  }
  return TRUE;
}

/**
 * Update for catering block;.
 */
function hitsa_cron_up_30() {
  $blocks_list = db_select('block', 'b');
  $blocks_list->fields('b');
  $blocks_list->condition('module', 'hitsa_catering');
  $blocks_list->condition('status', 1);
  $blocks_list->condition('pages', '', '!=');
  $results = $blocks_list->execute();
  while ($block = $results->fetchAssoc()) {
    if (!empty($block['pages']) && $block['status'] == 1) {
      $pages = $block['pages'];
      $pages .= "\npitanie\npitanie/*";
      $num_updated = db_update('block')
        ->fields(array(
          'pages' => $pages,
        ))
        ->condition('bid', $block['bid'], '=')
        ->execute();
    }
  }
  return TRUE;
}
/**
 * Update for updateng job position cardinality.
 */
function hitsa_cron_up_31(){
  $field_bases = array();
  $field_bases['job_position'] = array(
    'active' => 1,
    'cardinality' => -1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'job_position',
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'label' => 'Position',
    'locked' => 1,
    'module' => 'entityreference',
    'settings' => array(
      'entity_translation_sync' => FALSE,
      'handler' => 'base',
      'handler_settings' => array(
        'target_bundles' => array(
          0 => 'contacts_job_position',
        ),
      ),
      'target_type' => 'taxonomy_term',
    ),
    'translatable' => 0,
    'type' => 'entityreference',
  );
  field_update_field($field_bases['job_position']);
  return TRUE;
}

function hitsa_cron_up_32(){
  $robots_text = '#
    # robots.txt
    #
    # This file is to prevent the crawling and indexing of certain parts
    # of your site by web crawlers and spiders run by sites like Yahoo!
    # and Google. By telling these "robots" where not to go on your site,
    # you save bandwidth and server resources.
    #
    # This file will be ignored unless it is at the root of your host:
    # Used:    http://example.com/robots.txt
    # Ignored: http://example.com/site/robots.txt
    #
    # For more information about the robots.txt standard, see:
    # http://www.robotstxt.org/robotstxt.html

    User-agent: *
    Crawl-delay: 10
    # CSS, JS, Images
    Allow: /misc/*.css$
    Allow: /misc/*.css?
    Allow: /misc/*.js$
    Allow: /misc/*.js?
    Allow: /misc/*.gif
    Allow: /misc/*.jpg
    Allow: /misc/*.jpeg
    Allow: /misc/*.png
    Allow: /modules/*.css$
    Allow: /modules/*.css?
    Allow: /modules/*.js$
    Allow: /modules/*.js?
    Allow: /modules/*.gif
    Allow: /modules/*.jpg
    Allow: /modules/*.jpeg
    Allow: /modules/*.png
    Allow: /profiles/*.css$
    Allow: /profiles/*.css?
    Allow: /profiles/*.js$
    Allow: /profiles/*.js?
    Allow: /profiles/*.gif
    Allow: /profiles/*.jpg
    Allow: /profiles/*.jpeg
    Allow: /profiles/*.png
    Allow: /themes/*.css$
    Allow: /themes/*.css?
    Allow: /themes/*.js$
    Allow: /themes/*.js?
    Allow: /themes/*.gif
    Allow: /themes/*.jpg
    Allow: /themes/*.jpeg
    Allow: /themes/*.png
    # Directories
    Disallow: /alumnus
    Disallow: /vilistlased
    Disallow: /выпускников
    Disallow: /includes/
    Disallow: /misc/
    Disallow: /modules/
    Disallow: /profiles/
    Disallow: /scripts/
    Disallow: /themes/
    # Files
    Disallow: /CHANGELOG.txt
    Disallow: /cron.php
    Disallow: /INSTALL.mysql.txt
    Disallow: /INSTALL.pgsql.txt
    Disallow: /INSTALL.sqlite.txt
    Disallow: /install.php
    Disallow: /INSTALL.txt
    Disallow: /LICENSE.txt
    Disallow: /MAINTAINERS.txt
    Disallow: /update.php
    Disallow: /UPGRADE.txt
    Disallow: /xmlrpc.php
    # Paths (clean URLs)9
    Disallow: /admin/
    Disallow: /comment/reply/
    Disallow: /filter/tips/
    Disallow: /node/add/
    Disallow: /search/
    Disallow: /user/register/
    Disallow: /user/password/
    Disallow: /user/login/
    Disallow: /user/logout/
    # Paths (no clean URLs)
    Disallow: /?q=admin/
    Disallow: /?q=comment/reply/
    Disallow: /?q=filter/tips/
    Disallow: /?q=node/add/
    Disallow: /?q=search/
    Disallow: /?q=user/password/
    Disallow: /?q=user/register/
    Disallow: /?q=user/login/
    Disallow: /?q=user/logout/
    ';
    variable_set('robotstxt', $robots_text);
    return TRUE;
}
function hitsa_cron_up_33(){
  $blocks_list = db_select('block', 'b');
  $blocks_list->fields('b');
  $blocks_list->condition('module', 'hitsa_catering');
  $blocks_list->condition('status', 1);
  $blocks_list->condition('pages', '', '!=');
  $results = $blocks_list->execute();
  while ($block = $results->fetchAssoc()) {
    if (!empty($block['pages']) && $block['status'] == 1) {
      $pages = $block['pages'];
      $pages .= "\nпитание\ntoitlustamine\ncatering-0";
      $num_updated = db_update('block')
        ->fields(array(
          'pages' => $pages,
        ))
        ->condition('bid', $block['bid'], '=')
        ->execute();
    }
  }
  return TRUE;
}

/**
 * Function to enable SEO modules and keyword checker.
 */
function hitsa_cron_up_34(){
  $modules = array('seo_checker','keyword_rules');
  foreach ($modules as $module) {
    if (!module_exists($module)) {
      module_enable(array($module));
    }
  }
  drupal_flush_all_caches();
  drupal_flush_all_caches();

  $field_instances = array();

  // Exported field_instance: 'node-article-field_seo_keyword'.
  $field_instances['node-article-field_seo_keyword'] = array(
    'bundle' => 'article',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'SEO Võtmesõnad. Erinevad sõnad tuleb eraldada komaga.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 18,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_seo_keyword',
    'label' => 'SEO Võtmesõna',
    'required' => 0,
    'settings' => array(
      'entity_translation_sync' => FALSE,
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'maxlength_js' => 0,
        'maxlength_js_label' => 'Content limited to @limit characters, remaining: <strong>@remaining</strong>',
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 50,
    ),
  );

  // Translatables
  // Included for use with string extractors like potx.
  t('SEO Võtmesõna');
  t('SEO Võtmesõnad. Erinevad sõnad tuleb eraldada komaga.');

  $field_bases = array();

  // Exported field_base: 'field_seo_keyword'.
  $field_bases['field_seo_keyword'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_seo_keyword',
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(
      'add_row_localization_source' => 'Add another item',
      'entity_translation_sync' => FALSE,
      'max_length' => 2550,
    ),
    'translatable' => 0,
    'type' => 'text',
  );



  foreach ($field_bases as $field) {

    $field_test = field_info_field($field['field_name']);
    if (empty($field_test)) {
      field_create_field($field);
    }
  }

  foreach ($field_instances as $field_instance) {
    if (empty(field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']))) {
      field_create_instance($field_instance);
    };
  }
  variable_set('seo_checker_article','1');
  variable_set('seo_threshold_keyword_in_headings',20);
  variable_set('seo_threshold_keyword_in_title',20);
  variable_set('seo_threshold_keyword_density',array(0=>1,1=>22));
  variable_set('keyword_rules_field_article','field_seo_keyword');
  return TRUE;
}
function hitsa_cron_up_35(){
  $blob = 'a:9:{s:5:"title";a:1:{s:5:"value";s:46:"[node:title] | [current-page:pager][site:name]";}s:11:"description";a:1:{s:5:"value";s:14:"[node:summary]";}s:8:"og:title";a:1:{s:5:"value";s:12:"[node:title]";}s:14:"og:description";a:1:{s:5:"value";s:14:"[node:summary]";}s:15:"og:updated_time";a:1:{s:5:"value";s:23:"[node:changed:custom:c]";}s:8:"og:image";a:1:{s:5:"value";s:36:"[node:cp_image][node:subpage_images]";}s:22:"article:published_time";a:1:{s:5:"value";s:23:"[node:created:custom:c]";}s:21:"article:modified_time";a:1:{s:5:"value";s:23:"[node:changed:custom:c]";}s:12:"og:video:url";a:1:{s:5:"value";s:20:"[node:article_video]";}}';
  if (!empty($blob)) {
    db_merge('metatag_config')->key(array('instance' => 'node'))->fields(array(
      'instance' => 'node',
      'config' => $blob,
    ))->execute();
  }
}
function hitsa_cron_up_36(){
  drupal_flush_all_caches();
  drupal_flush_all_caches();
  return TRUE;
}
function hitsa_cron_up_37(){
  drupal_flush_all_caches();
  drupal_flush_all_caches();
  return TRUE;
}
function hitsa_cron_up_38(){
  $field_bases = array();

  // Exported field_base: 'field_catering_file'.
  $field_bases['field_catering_file'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_catering_file',
    'indexes' => array(
      'fid' => array(
        0 => 'fid',
      ),
    ),
    'locked' => 0,
    'module' => 'file',
    'settings' => array(
      'add_row_localization_source' => 'Add another item',
      'display_default' => 0,
      'display_field' => 0,
      'entity_translation_sync' => array(
        0 => 'fid',
      ),
      'uri_scheme' => 'public',
    ),
    'translatable' => 1,
    'type' => 'file',
  );

  foreach ($field_bases as $field) {

    $field_test = field_info_field($field['field_name']);
    if (empty($field_test)) {
      field_create_field($field);
    }
  }
  $field_instances = array();

  // Exported field_instance: 'node-content_page-field_catering_file'.
  $field_instances['node-content_page-field_catering_file'] = array(
    'bundle' => 'content_page',
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'file',
        'settings' => array(),
        'type' => 'file_default',
        'weight' => 15,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_catering_file',
    'label' => 'Totilustuse fail',
    'required' => 0,
    'settings' => array(
      'description_field' => 0,
      'entity_translation_sync' => FALSE,
      'file_directory' => 'catering_files',
      'file_extensions' => 'txt pdf doc jpg png gif jpeg',
      'max_filesize' => '10 MB',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'media',
      'settings' => array(
        'allowed_schemes' => array(
          'public' => 'public',
          'youtube' => 0,
        ),
        'allowed_types' => array(
          'audio' => 0,
          'document' => 0,
          'image' => 'image',
          'video' => 0,
        ),
        'browser_plugins' => array(
          'media_browser_plus--media_browser_my_files' => 0,
          'media_browser_plus--media_browser_thumbnails' => 0,
          'media_default--media_browser_1' => 0,
          'media_default--media_browser_my_files' => 0,
          'media_internet' => 0,
          'upload' => 0,
        ),
        'manualcrop_crop_info' => 1,
        'manualcrop_default_crop_area' => 1,
        'manualcrop_enable' => 0,
        'manualcrop_inline_crop' => 0,
        'manualcrop_instant_crop' => FALSE,
        'manualcrop_instant_preview' => 1,
        'manualcrop_keyboard' => 1,
        'manualcrop_maximize_default_crop_area' => 0,
        'manualcrop_require_cropping' => array(),
        'manualcrop_styles_list' => array(),
        'manualcrop_styles_mode' => 'include',
        'manualcrop_thumblist' => 0,
      ),
      'type' => 'media_generic',
      'weight' => 55,
    ),
  );

  // Translatables
  // Included for use with string extractors like potx.
  t('Totilustuse fail');
  foreach ($field_instances as $field_instance) {
    if (empty(field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']))) {
      field_create_instance($field_instance);
    };
  }
  return TRUE;
}
function hitsa_cron_up_39(){
  variable_set('captcha_default_challenge','image_captcha/Image');
}
function hitsa_cron_up_40(){
  $type_to_add = 'cp_simple_without_images';
  $field = field_info_field('cp_type');
  $field['settings']['allowed_values'][$type_to_add] = 'Sisuleht lihtne ilma pildita';
  field_update_field($field);
  return TRUE;
}