<?php

/**
 * Implements hook_form_alter().
 */
function hitsa_front_form_alter(&$form, &$form_state, $form_id)
{
  switch ($form_id) {
    case 'taxonomy_form_term':

      if ($form['vocabulary_machine_name']['#value'] == 'hitsa_breaks' || $form['vocabulary_machine_name']['#value'] == 'hitsa_hour_times') {
        $form['#metatags']['#access'] = false;
        $form['relations']['#access'] = false;
      }
      break;

    default:
          # code...
      break;
  }
  return $form;
}
/**
 * Implements hook_block_info().
 */
function hitsa_front_block_info()
{
  $blocks = array();
  if (hitsa_core_get_school_type() == 1) {
    $school_type = hitsa_core_get_school_type();
    $blocks['hitsa_services_events'] = array(
      'info' => t('HITSA breaks and hours'),
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
      'region' => 'sidebar_right',
      'status' => "1",
    );
  }
  return $blocks;
}
/**
 * Implements hook_block_view().
 */
function hitsa_front_block_view($delta = '')
{
  switch ($delta) {
    case 'hitsa_services_events':
      $hours = taxonomy_vocabulary_machine_name_load('hitsa_hour_times');
      $hours_tree = taxonomy_get_tree($hours->vid, 0, null, true);
      $hours_tree = hitsa_front_requried_information($hours_tree, 'hours');
      $breaks = taxonomy_vocabulary_machine_name_load('hitsa_breaks');
      $breaks = taxonomy_get_tree($breaks->vid, 0, null, true);
      $breaks = hitsa_front_requried_information($breaks, 'breaks');
      $time_periods = taxonomy_vocabulary_machine_name_load('time_period_info');
      $time_periods = taxonomy_get_tree($time_periods->vid, 0, null, true);
      $time_periods = hitsa_front_get_time_period($time_periods);
      $block = array();
      $block['title'] = t('');
      $block['content'] = theme('hitsa_front_hours_breaks', array('hours' => $hours_tree, 'breaks' => $breaks, 'period' => $time_periods));
      if (!empty($hours_tree || !empty($breaks))) {
        return $block;
      }
      break;

    default:
      # code...
      break;
  }
}
/**
 * Implements hook_theme().
 */
function hitsa_front_theme()
{
  $items = array();
  $items['hitsa_front_hours_breaks'] = array(
    'render element' => 'hitsa_front_hours_breaks',
    'template' => 'hitsa_front_hours_breaks',
    'path' => drupal_get_path('theme', 'hitsa') . '/templates/include',
    'variables' => array(
      'hours' => null,
      'breaks' => null,
    ),
  );
  return $items;
}
function hitsa_front_requried_information($terms, $type)
{
  $list = array();
  foreach ($terms as $term_key => $term) {
    if (module_exists('i18n_taxonomy')) { //To not break your site if module is not installed
      $term = i18n_taxonomy_localize_terms($term); // The important part!
      $list[$term->tid] = array(
        'name' => $term->name,


      );
      switch ($type) {
        case 'hours':
          $hours_date = $term->field_hours_times[LANGUAGE_NONE][0]['value'];
          $hours_date = date_create($hours_date);
          $hours = date_format($hours_date, 'G.i');
          $list[$term->tid]['start'] = $hours;
          $hours_date = $term->field_hours_times[LANGUAGE_NONE][0]['value2'];
          $hours_date = date_create($hours_date);
          $hours = date_format($hours_date, 'G.i');
          $list[$term->tid]['end'] = $hours;
          $term_type = $term->field_time_type[LANGUAGE_NONE][0]['value'];
          $list[$term->tid]['hour_html'] = '<p><span class="before-clock"></span>' . $list[$term->tid]['start'] . ' - ' . $list[$term->tid]['end'] . '</p>';
          $list[$term->tid]['type'] = $term_type;
          break;
        case 'breaks':
          $start = $term->field_break_period[LANGUAGE_NONE][0]['value'];
          $list[$term->tid]['start'] = date('d.m.Y', $start);
          $end = $term->field_break_period[LANGUAGE_NONE][0]['value2'];
          $list[$term->tid]['end'] = date('d.m.Y', $end);
          break;

        default:
              # code...
          break;
      }
    }
  }
  usort($list, function ($a, $b) {
    return strtotime($a['start']) - strtotime($b['start']);
  });
  switch ($type) {
    case 'hours':
      $list = hitsa_front_make_html_list($list);
      break;
    case 'breaks':
      $list = hitsa_front_html_breaks($list);
      break;
    default:

      break;
  }
  return $list;
}

function hitsa_front_get_time_period($periods)
{
  if (!empty($periods)) {
    $period_chosen = array();
    foreach ($periods as $key => $period) {
      $start = $period->field_time_period_dates_info[LANGUAGE_NONE][0]['value'];
      $end = $period->field_time_period_dates_info[LANGUAGE_NONE][0]['value2'];
      if (module_exists('i18n_taxonomy')) { //To not break your site if module is not installed
        $period = i18n_taxonomy_localize_terms($period); // The important part!
      }
      $time = time();
      if ($time >= $start && $time <= $end) {
        $period_chosen = array(
          'name' => $period->name,
        );
      }
    }
  }
  return $period_chosen;
}

function hitsa_front_make_html_list($list)
{
  $out = array();
  $i = 0;
  $type = null;
  foreach ($list as $list_item) {
    if (empty($type)) {
      $out[$i]['type'] = $list_item['type'];
    }
    $type = (empty($type)) ? $list_item['type'] : $type;
    if ($type != $list_item['type']) {
      $i++;
      $out[$i]['type'] = $list_item['type'];
      $type = $list_item['type'];
    }
    $out[$i]['hours'][] = $list_item;
  }
  $output = null;
  $i = 0;
  $count_elements = count($out);
  foreach ($out as $part_key => $part) {
    $type = $part['type'] == 'class' ? t('Classes') : t('Lunch');
    // $output.=!empty($output)?'<hr/>':'';
    $output .= '<div class="time-table">
    <p><b>' . $type . '</b></p>';
    foreach ($part['hours'] as $key => $hour) {
      $output .= $hour['hour_html'];
    }
    $output .= '
    </div><!--/time-table-->';
    if ($i != $count_elements - 1) {
      $output .= '<hr/>';
    }
    $i++;
  }
  return $output;
}

function hitsa_front_html_breaks($list)
{
  $output = '';

  if (!empty($list)) {
    $breaks = count($list);
    $i = 0;
    foreach ($list as $key => $break) {
      $output .= '<div class="time-table">
      <p><b>' . $break['name'] . ':</b></p>
      <p><span class="before-calendar"></span> ' . $break['start'] . ' - ' . $break['end'] . '</p>
   </div><!--/time-table-->
';
      if ($i != $breaks - 1) {
        $output .= '
        <hr />';
      }
      $i++;

    }
  }
  return $output;
}