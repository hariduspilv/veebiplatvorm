<?php
/**
 * Implements hook_menu
 **/

function hitsa_catering_menu()
{
    $items = array();
  
    $items['catering/%'] = array(
        'title' => t(''),
        'page callback' => 'hitsa_catering_week_page',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['catering'] = array(
        'title' => t(''),
        'page callback' => 'hitsa_catering_week_page',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
  
    return $items;
}

 /**
  * Implements hook_block_info().
  */
function hitsa_catering_block_info()
{
    $blocks = array();

  // This example comes from node.module.
    $pages = "catering\ncatering/*";
    $blocks['catering_block'] = array(
        'info' => t('Catering ' . ' block'),
        'region' => 'content',
        'status' => 1,
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => strval($pages),
        'weight' => 100,
    );
    return $blocks;
}

/**
 * Implements hook_node_validate().
 */
function hitsa_catering_node_validate($node, $form, &$form_state) {
    if($node->type=='catering') {
        $catering_provder_name = NULL;
        if (!empty($node->field_catering_provider)) {
            if (!empty($node->field_catering_provider['und'][0])) {
                $catering_provider = taxonomy_term_load($node->field_catering_provider['und'][0]['target_id']);
                $catering_provder_name = $catering_provider->name;
            }
        }
        if (!empty($node)) {
            if (is_object($node)) {
                if (!empty($node->field_date)) {
                    if (!empty($node->field_date['und'][0]['value'])) {
                        $start_date = $node->field_date['und'][0]['value'];
                    }
                }
            } // code...
        }
        $monday = date('d/m/Y', strtotime('this week monday', $start_date));
        $sunday = date('d/m/Y', strtotime('this week sunday', $start_date));
        $alias = t('catering') . '/' . $monday . '-' . $sunday;
        if (!empty($catering_provder_name)) {
            $alias .= '/' . $catering_provder_name;
        }
        $lookup = drupal_lookup_path('source', $alias, $node->language);
        if ($lookup) {
            if ($node->path['alias'] != $alias) {
                form_set_error('field_catering_provider', t('This catering provider has got menu already for this week'));
            }
        }
    }
//  exit();
}
function hitsa_catering_week_page(){
    $build = array();

    return $build;
}
/**
 * Implements hook_block_view().
 */
function hitsa_catering_block_view($delta = '')
{
    $block = array();
    switch ($delta) {
        case 'catering_block':
            $catering_table = hitsa_catering_week();
            $catering_table = drupal_render($catering_table);
            $block['subject']= t('');
            $block['content'] = array(
            '#markup' => $catering_table,
            );
            break;
    }
    return $block;
}
/**
 * Implements hook_node_info().
 **/
function hitsa_catering_node_info()
{
    $site_default_language = language_default();
    $items = array(
    'catering' => array(
      'name' => t('Catering'),
      'type' => 'catering',
      'base' => 'node_content',
      'description' => t('Catering data.'),
      'has_title' => true,
      'title_label' => t('Title'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    );
    variable_set('language_content_type_catering', TRANSLATION_ENABLED);
    variable_set('i18n_node_options_catering', array('required'));
    return $items;
}



/**
* Implements hook_form_alter().
**/
function hitsa_catering_form_alter(&$form, &$form_state, $form_id)
{
    switch ($form_id) {
        case 'catering_node_form':
            if (!empty($form['field_catering_provider'])){
                $catering_options = $form['field_catering_provider']['und']['#options'];
                if (count($catering_options)==0){
                    if(isset($form['field_catering_provider']['und']['#options']['_none'])) {
                        $form['field_catering_provider']['#access'] = FALSE;
                    }
                }
                else{
                   unset($form['field_catering_provider']['und']['#options']['_none']);
                }
            }
            $form['title']['#required']=false;
            $form['title']['#access']=false;
            $used_dates = hitsa_catering_get_all_catering_dates();
            // add js that controls already used dates.
            $form['#attached']['js'] = array(
            drupal_get_path('module', 'hitsa_catering') . '/js/popup_calendar.js',
            );
            $form['#attached']['js'][] = array(
              'data' => array('hitsa_catering' => array('dates' => $used_dates)),
              'type' => 'setting',
            );
      
            break;
    }
}

/*function hitsa_catering_paragraphs_info() {
  $items = array(
    'catering_food_by_day' => array(
    'name' => 'Food',
      'bundle' => 'catering_food_by_day',
      'locked' => '1',
    ),
  );
  
  return $items;
}*/

function hitsa_catering_get_all_catering_dates()
{
    $nids  = array();
    $dates = array();
      
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
              //->propertyCondition('status', NODE_PUBLISHED);
    $query->entityCondition('bundle', array('catering'), 'IN');
    $result = $query->execute();
    if ($result && !empty($result['node'])) {
        foreach ($result['node'] as $nid => $value) {
            $nids[] = $nid;
        }
    }
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $node) {
        $dates[] = strtotime($node->field_date['und'][0]['value']);
        $dates[] = strtotime($node->field_date['und'][0]['value2']);
    }

    return $dates;
}

function hitsa_catering_node_insert($node)
{
    if ($node->type=='catering') {
        if (!empty($node)) {
            if (is_object($node)) {
                if (!empty($node->field_date)) {
                    if (!empty($node->field_date['und'][0]['value'])) {
                        $start_date = $node->field_date['und'][0]['value'];
                    }
                }
            } // code...
        }
        $language_list = language_list();
        $language = $node->language;
        $lookup_main = drupal_lookup_path('source', t('catering'), $node->language);
        $catering_provder_name = NULL;
        if (!empty($node->field_catering_provider)) {
            if (!empty($node->field_catering_provider['und'][0])) {
                $catering_provider = taxonomy_term_load($node->field_catering_provider['und'][0]['target_id']);
                $catering_provder_name = $catering_provider->name;
            }
        }
        if (!($lookup_main)) {
            $path_main = array(
                'source' => 'catering',
                'alias' => t('catering'),
                'pid' => null,
                'language' => $node->language,
                'pathauto' => 0,
            );
            path_save($path_main);
        }
        $monday = date('d/m/Y', strtotime('this week monday', $start_date));
        $sunday = date('d/m/Y', strtotime('this week sunday', $start_date));
        hitsa_catering_check_block_visibility(t('catering'),'catering');
        $alias = t('catering').'/'.$monday.'-'.$sunday;
        if (!empty($catering_provder_name)){
            $alias.='/'.$catering_provder_name;
        }
        $node->path = array(
            'alias' => $alias,
            'pid' => (!empty($node->path['pid'])) ? $node->path['pid'] : NULL,
            'source' => 'node/' . $node->nid,
            'language' => $node->language,
            'pathauto' => 0,
        );


        return $node;
    }
}
/**
 * Implement hook_node_presave()
 */
function hitsa_catering_node_presave($node)
{
  // Set first+last name as node title.
    $start_date='';
    if ($node->type === 'catering') {



        if (!empty($node)) {
            if (is_object($node)) {
                if (!empty($node->field_date)) {
                    if (!empty($node->field_date['und'][0]['value'])) {
                        $start_date = $node->field_date['und'][0]['value'];
                    }
                }
            } // code...
        }
    
        if ($start_date) {
            $catering_provder_name = null;
            if (!empty($node->field_catering_provider)) {
                if (!empty($node->field_catering_provider['und'][0])) {
                    $catering_provider = taxonomy_term_load($node->field_catering_provider['und'][0]['target_id']);
                    $catering_provder_name = $catering_provider->name;
                }
            }
            $monday = date('d/m/Y', strtotime('this week monday', $start_date));
            $sunday = date('d/m/Y', strtotime('this week sunday', $start_date));
            if (!empty($node->nid)) {
                if (!empty($monday) && !empty($sunday)) {
                    $lookup_main = drupal_lookup_path('source', t('catering'), $node->language);
                    if (!($lookup_main)) {
                        $path_main = array(
                            'source' => 'catering',
                            'alias' => t('catering'),
                            'pid' => null,
                            'language' => $node->language,
                            'pathauto' => 0,
                        );
                        path_save($path_main);
                    }

                    hitsa_catering_check_block_visibility(t('catering'),'catering');
                    $alias = t('catering').'/'.$monday.'-'.$sunday;
                    if (!empty($catering_provder_name)){
                        $alias.='/'.$catering_provder_name;
                    }
                    $node->path = array(
                        'alias' => $alias,
                        'pid' => (!empty($node->path['pid'])) ? $node->path['pid'] : NULL,
                        'source' => 'node/' . $node->nid,
                        'language' => $node->language,
                        'pathauto' => 0,
                    );
                }
            }
            $week = $monday.' - '.$sunday;
            $node->title = truncate_utf8(sprintf(t('Menu week:').' %s', $week), 255).' ' . $catering_provder_name;
            krumo($node);
        }
    }
//    exit();
}
function hitsa_catering_week($start_date = null)
{
    global $language;

    $build = array();
    $catering_provider_tid=null;
    $catering_provider = null;
    $current_path = current_path();
    $menu_items = menu_get_item($current_path);
    $node_header_part = NULL;
    if (!empty($menu_items)) {
        if (!empty($menu_items['page_arguments'][0])) {
            if (is_object($menu_items['page_arguments'][0])){
                $node = $menu_items['page_arguments'][0];
                if($node->type=='catering'){

                    $lookup = drupal_lookup_path('source',t('catering'),$node->language);
                    $node_header = menu_get_object("node", 1, $lookup);
                    $node_header_part = hitsa_catering_generate_header($node_header);
                    $build['catering_header']['#markup'] = $node_header_part;
                    dpm($node_header);
                }
                if (!empty($node->field_catering_provider)){
                    $catering_provider_tid=$node->field_catering_provider['und'][0]['target_id'];
                }
                if (!empty($node->field_date)){
                    $start_date=strval($node->field_date['und'][0]['value']);
                }
            }
        }
    }
    global $language;
    if ($start_date==null) {
        $start_date = date('U');
    } else {
     //   $start_date = strtotime($start_date);
    }
    //krumo($start_date);
    $monday = date("U", strtotime('this week monday', $start_date));
    $sunday = date("U", strtotime('sunday this week', $start_date));
//    krumo($monday);
//    krumo($sunday);
  
    $query = db_select('field_data_field_date', 'fdfd');
    $query -> fields('fdfd');
    $query -> condition('fdfd.field_date_value', $monday, '>=');
    $query -> condition('fdfd.field_date_value2', $sunday, '<=');
    $query -> join('node', 'n', 'fdfd.entity_id=n.nid');
    $query -> fields('n');
    $query->condition('n.status', 1, '=');
    $query -> condition('n.language',$language->language,'=');
    $results = $query->execute();
    $menus = array();
    foreach ($results as $value) {
        $menus[] = $value;
    }
    $providers = array();
    foreach ($menus as $menu) {
        $loaded_menu = !empty($menu)?node_load($menu->nid):null;
        if (!empty($loaded_menu)) {
            if (!empty($loaded_menu->field_catering_provider)) {
                $providers[] = array(
                    'provider'=>   taxonomy_term_load($loaded_menu->field_catering_provider['und'][0]['target_id']),
                    'menu' => $menu);
            }
        }
    }
    $catering_html = null;
    if (!empty($loaded_menu->field_catering_provider)) {
        $catering_provider = taxonomy_term_load($loaded_menu->field_catering_provider['und'][0]['target_id']);
        if (!empty($catering_provider)) {
            $catering_html = hitsa_catering_provider_html($catering_provider);
        }
    }
    $provider_count=0;
    $provider_to_htmlize = array();
    if (!empty($providers) and count($providers)>1) {

        $catering_providers_sidemenu = hitsa_catering_provider_side_menu($providers);
        $build['catering']['catering_provider']['#prefix'] = '<div class="col-3 d-flex">';
        $build['catering']['catering_provider']['#suffix'] = '</div>';
        $build['catering']['catering_provider']['#markup'] = $catering_providers_sidemenu;
        $build['catering']['catering_table']['#prefix'] = '<div class="col-9"><article>';
        $build['catering']['catering_table']['#suffix'] = '</div></article>';
    } else {
        $build['catering']['catering_table']['#prefix'] = '<div class="col-12"><article>';
        $build['catering']['catering_table']['#suffix'] = '</div></article>';
    }
  
    $query = db_select('field_data_field_date', 'fdfd');
    $query -> fields('fdfd');
    $query -> condition('fdfd.field_date_value', $monday, '>=');
    $query -> condition('fdfd.field_date_value2', $sunday, '<=');
    $query -> join('node', 'n', 'fdfd.entity_id=n.nid');
    $query -> fields('n');
    if (!empty($catering_provider_tid)) {
        if (!empty($catering_provider_tid)) {
            $query -> join('field_data_field_catering_provider', 'fdfcp', 'n.nid=fdfcp.entity_id');
            $query -> condition('fdfcp.field_catering_provider_target_id', $catering_provider_tid, '=');
        }
    }
    $query->condition('n.status', 1, '=');
    $results = $query->execute();
    foreach ($results as $menu_items) {
        $menu = $menu_items;
    }
    $loaded_menu = !empty($menu)?node_load($menu->nid):null;
    
    $catering_html = null;
    if (!empty($loaded_menu->field_catering_provider)) {
        $catering_provider = taxonomy_term_load($loaded_menu->field_catering_provider['und'][0]['target_id']);
        if (!empty($catering_provider)) {
            $catering_html = hitsa_catering_provider_html($catering_provider);
        }
    }
    $catering_table = hitsa_catering_paragraphs__create_table($loaded_menu);
    if (!empty($catering_table)) {
        $build['catering']['#prefix'] = '
            <div class="block no-padding">
            <div class="row">
            
            
            
            ';
        $build['catering']['#suffix'] = '</div> </div><!--/block-->';
        $build['catering']['#type'] = 'container';
        $build['catering']['#theme_wrappers'] = array();
        $build['catering']['catering_table']['#markup'] = $catering_table.$catering_html;
    }
    dpm($build);
    return $build;
}
/**
 * Funktsioon, mis suudab genereerida paragraphidega tehtud asjast tabeli
 *
 */
function hitsa_catering_paragraphs__create_table($loaded_menu)
{
    $monday = (!empty($loaded_menu->field_catering_monday)?$loaded_menu->field_catering_monday['und']:null);
    $tuesday = (!empty($loaded_menu->field_catering_tuesday)?$loaded_menu->field_catering_tuesday['und']:null);
    $wednesday = (!empty($loaded_menu->field_catering_wednesday)?$loaded_menu->field_catering_wednesday['und']:null);
    $thursday = (!empty($loaded_menu->field_catering_thursday)?$loaded_menu->field_catering_thursday['und']:null);
    $friday = (!empty($loaded_menu->field_catering_friday)?$loaded_menu->field_catering_friday['und']:null);
    $days = array(
    'Monday' => $monday,
    'Tuesday'=> $tuesday,
    'Wednesday' => $wednesday,
    'Thursday' =>  $thursday,
    'Friday' =>  $friday);
    
  // dpm($loaded_menu);
  // dpm($monday);
  // dpm($tuesday);
  // dpm($wednesday);
  // dpm($thursday);
  // dpm($friday);
    $row_names = array();
    $day_meals = array();
    foreach ($days as $day_key => $day) {
        if ($day!=null) {
            foreach ($day as $meal) {
                $meal = entity_load_single('paragraphs_item', $meal['value']);
                if (!empty($meal->field_food_type)) {
                    if (!empty($meal->field_food_subcategory)) {
                        $subcategory = taxonomy_term_load($meal->field_food_subcategory['und'][0]['target_id']);
                    }
                    if (!empty($subcategory)) {
                        $food_type = taxonomy_term_load($meal->field_food_type['und'][0]['target_id']);
                        
                        $row_names[$food_type->name] = $food_type;
                        if (!empty($meal->field_food_name)) {
                            if ($subcategory->name=='Dessert') {
                                $day_meals[$day_key][$food_type->name]['Desserts'][] = $meal->field_food_name['und'][0]['value'];
                            } else {
                                $day_meals[$day_key][$food_type->name][] = $meal->field_food_name['und'][0]['value'];
                            }
                        }
                    }
                }
            }
        } else {
            $day_meals[$day_key]=null;
        }
    }
    foreach ($day_meals as $day_key => $day_meal) {
        if (!empty($day_meal)) {
            foreach ($day_meal as $food_cat_key => $foods) {
                if (!empty($foods['Desserts'])) {
                    foreach ($foods['Desserts'] as $dessert_key => $dessert) {
                        $day_meals[$day_key][$food_cat_key][] = $dessert;
                    }
                    unset($day_meals[$day_key][$food_cat_key]['Desserts']);
                }
            }
        }
    }
    if (!empty($row_names) && !empty($day_meals)) {
        $output  = '<div class="table_wrapper" data-plugin="responsiveTable">';
        $output .= '<table>';
        $output .= '<thead>';
        $output .= '<tr>';
        $output .= '<th>';
        $output .= '</th>';
        $output .= '<th>';
        $output .= t('Monday');
        $output .= '</th>';
        $output .= '<th>';
        $output .= t('Tuesday');
        $output .= '</th>';
        $output .= '<th>';
        $output .= t('Wednesday');
        $output .= '</th>';
        $output .= '<th>';
        $output .= t('Thursday');
        $output .= '</th>';
        $output .= '<th>';
        $output .= t('Friday');
        $output .= '</th>';
        $output .= '</tr>';
        $output .= '</thead>';
        foreach ($row_names as $row_name) {
            $max_rows = 0;
            foreach ($day_meals as $day => $meal_types) {
                if (!empty($meal_types[$row_name->name])) {
                    $meals_count = count($meal_types[$row_name->name]);
                    if ($max_rows<$meals_count) {
                        $max_rows = $meals_count;
                    }
                }
            }
            $meal_days='';
          
            for ($i = 0; $i < $max_rows; $i++) {
                $i>0?$meal_days.='<tr>':'';
            
                foreach ($day_meals as $day) {
                    if ($day) {
                        $meal_days.='<td>';
                        $meal_days.= (!empty($day[$row_name->name][$i]))?$day[$row_name->name][$i]:'';
                        $meal_days.='</td>';
                    } else {
                        $meal_days.='<td></td>';
                    }
                }
                $i>0?$meal_days.='</tr>':'';
            }
          
            $output.= '<tbody>';
            $output.= '<tr>';
            $output.= '<td rowspan="'.$max_rows.'">';
            $output.= $row_name->name;
            $output.= '</td>';
            $output.= $meal_days;
            $output.= '</tr>';
            $output.= '</tbody>';
        }
    
        $output .='</table>';
        $output .='</div><!--/table-wrapper-->';
        return $output;
    }
}
function hitsa_catering_provider_html($provider)
{
    $email=null;
    $email_out=null;
    $phone_out=null;
    $address_out=null;
    if (!empty($provider->field_email)) {
        $email = $provider->field_email['und'][0]['email'];
    }
    $homepage=null;
    if (!empty($provider->field_homepage)) {
        $homepage = $provider->field_homepage['und'][0]['value'];
    }
    $phone=null;
    if (!empty($provider->field_phone_number)) {
        $phone = $provider->field_phone_number['und'][0]['value'];
    }
    $location=null;
  
    $location = field_get_items('taxonomy_term', $provider, 'field_location');
    $location_value = field_view_value('taxonomy_term', $provider, 'field_location', $location[0]);
    
    $output = '<div class="row">';
  
    if (!empty($provider->field_email)) {
        $email = $provider->field_email['und'][0]['email'];
    
        $email_out.= '                         <li>';
        $email_out.= '                            <div class="before-envelope"></div>';
        $email_out.= '                            <div class="list-details_text">';
        $email_out.= '                               <p><a href="mailto:'.$email.'">'.$email.'</a></p>';
        $email_out.= '                            </div><!--/list-details_text-->';
        $email_out.= '                         </li>';
    }
    if (!empty($provider->field_phone_number)) {
        $phone=$provider->field_phone_number['und'][0]['value'];
        $phone_out.= '                         <li>';
        $phone_out.= '                            <div class="before-phone"></div>';
        $phone_out.= '                            <div class="list-details_text">';
        $phone_out.= '                               <p>'.$phone.'</p>';
        $phone_out.= '                            </div><!--/list-details_text-->';
        $phone_out.= '                         </li>';
    }
    if (!empty($provider->field_provider_address)) {
        $address=$provider->field_provider_address['und'][0]['value'];
        $address_out.= '                         <li>';
        $address_out.= '                            <div class="before-location"></div>';
        $address_out.= '                            <div class="list-details_text">';
        $address_out.= '                               <p>'.$address.'</p>';
        $address_out.= '                            </div><!--/list-details_text-->';
        $address_out.= '                         </li>';
    }
    $output .= '</div>';
    if (!empty($provider->field_catering_provider_pictures)) {
        $images = array();
        $captions = array();
        foreach ($provider->field_catering_provider_pictures['und'] as $picture) {
            $picture_uri =  $picture['uri'];
            $image_style =  'large';
            $image_url = image_style_url($image_style, $picture_uri);
            $images[$picture['fid']] = '<img src="'.$image_url.'" alt="">';
            if (!empty($picture['field_file_image_title_text'])) {
                $captions[$picture['fid']] = $picture['field_file_image_title_text']['und'][0]['value'];
            }
        }
    }
    if (!empty($images)) {
                      $output.='  <div class="row">';
        foreach ($images as $key => $image) {
          // code...
            $output.='     <div class="col-6">';
            $output.='        <figure>';
            $output.=           $image;
            $output.=(!empty($captions)&&!empty($captions[$key]))?'          <figcaption>'.$captions[$key].'</figcaption>':'';
            $output.='        </figure>';
            $output.='     </div><!--/col-6-->';
        }
                      $output.='  </div><!--/row-->';
    }
    $output .='<p><b>'.$provider->name.'</b></p>';
    $output.= '<ul class="list-details">';
    $output.= (!empty($address_out))?$address_out:'';
    $output.= (!empty($phone_out))?$phone_out:'';
    $output.= (!empty($email_out))?$email_out:'';
    $output.= '                         <li>';
    $output.= '                            <div class="before-unlock"></div>';
    $output.= '                            <div class="list-details_text">';
    $output.= '                               <p>Maja avatud E-R 8-20</p>';
    $output.= '                            </div><!--/list-details_text-->';
    $output.= '                         </li>';
    $output.= '                      </ul><!--/list-details-->';
    return $output;
}
function hitsa_catering_provider_side_menu($providers)
{
    $output=null;
    $class='';
    $current_path = current_path();
    if (count($providers>0)) {
        $output.= '<ul class="side-menu">';
        foreach ($providers as $provider) {
            if(!empty($provider['menu'])){
                $link = url('node/'.$provider['menu']->nid);
                if ('node/'.$provider['menu']->nid==$current_path){
                    $class='active';
                }
                else{
                    $class = '';
                }
            }
            $output.='<li class="'.$class.'"><a href="'.$link.'">'.$provider['provider']->name.'</a>';
        }
        $output.= '</ul>';
        return $output;
    }
}
function hitsa_catering_check_block_visibility($translated,$not_translated){
    $query = db_select('block','block');
    $query -> condition('block.delta','catering_block','=');
    $query -> condition('block.theme','hitsa','=');
    $query -> fields('block');
    $result = $query->execute();
    $source = $translated.'/*';
    while($block = $result->fetchAssoc()){

        if (strpos($block['pages'],$source)==FALSE){
            $block['pages'].= "\n".$source;
            $update = db_update('block');
            $update -> condition('bid',$block['bid'],'=');
            $update -> fields(array(
                    'pages' => $block['pages'],)
            );
            $update->execute();
        }

    }
    return ;
}

function hitsa_catering_generate_header($node){
    $output = '';
    dpm($node);
    if (!empty($node)) {
        $output .= '<div class="block">';
        $output.='<h2 class="block-title">'.$node->title.'</h2>';
        $output.='<div class="row-spacer-xs"></div>';
        $output.='<div class="row">';
        $output.='   <div class="col-8 sm-12">';
        $output.='      <article>';
        if (!empty($node->body)){
            if (!empty($node->body['und'][0]['summary'])){
                $intro = $node->body['und'][0]['summary'];
            }
        }
        if (!empty($node->body)){
            if (!empty($node->body['und'][0]['value'])){
                $body = $node->body['und'][0]['value'];
            }
        }
        if (!empty($intro)) {
            $output .= '         <div class="intro">';
            $output .= '            <p>'.$intro.'</p>';
            $output .= '         </div><!--/intro-->';
        }
        if(!empty($body)) {
            $output .= '         <p>' . $body . '</p>';
        }
        $output.='      </article>';
        $output.='   </div><!--/col-8-->';
        $output.='   <div class="col-4 sm-12">';
        if (!empty($node->cp_image)) {
            $image = $node->cp_image['und'][0];
            $style = 'large';
            $image_url = image_style_url($style,$image['uri']);

            $output .= '      <figure>';
            $output .= '        <img src="'.$image_url.'"alt="">';
            $output .= '        <figcaption>'.(!empty($image['title']))?$image['title']:''.'</figcaption>';
            $output .= '      </figure>';
        }
        $output.='   </div><!--/col-4-->';
        $output.='</div><!--/row-->';
        $output.=' </div>';
    }
    return $output;

}