<?php

/**
 * Implements hook_menu
 **/

function hitsa_catering_menu()
{
    $items = array();

    $items['catering/%'] = array(
        'title' => t(''),
        'page callback' => 'hitsa_catering_week_page',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );
    $items['catering'] = array(
        'title' => t(''),
        'page callback' => 'hitsa_catering_week_page',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Implements hook_block_info().
 */
function hitsa_catering_block_info()
{
    $blocks = array();

    // This example comes from node.module.
    $pages = "catering\ncatering/*\ntoitlustamine\ntoitlustamine/*\ncontent/toitlustamine\ncontent/toitlustamine/*";
    $blocks['catering_block'] = array(
        'info' => t('Catering ' . ' block'),
        'region' => 'content',
        'status' => 1,
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => strval($pages),
        'weight' => 100,
    );
    $school_type = hitsa_core_get_school_type();
    // $blocks['catering_block_front_page'] = array(
    //     'info' => t('Catering front page'),
    //     'region' => 'content',
    //     'status' => ($school_type==2)?0:1,
    //     'visibility' => BLOCK_VISIBILITY_LISTED,
    //     'pages' => '<front>',
    // );
    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function hitsa_catering_block_view($delta = '')
{
    $block = array();
    switch ($delta) {
        case 'catering_block':
            $catering_table = hitsa_catering_week();
            $catering_table = drupal_render($catering_table);
            $block['subject'] = t('');
            $block['content'] = array(
                '#markup' => $catering_table,
            );
            break;
        // case 'catering_block_front_page':
        //     $block['subject'] = t('');
        //     $block['content'] = array(
        //         '#markup' => hitsa_catering_front_page_block(),
        //     );

        //     break;
    }
    return $block;
}

/**
 * Implements hook_node_validate().
 */
function hitsa_catering_node_validate($node, $form, &$form_state)
{
    if ($node->type == 'catering') {
        $catering_provder_name = null;
        if (!empty($node->field_catering_provider)) {
            if (!empty($node->field_catering_provider['und'][0])) {
                $catering_provider = taxonomy_term_load($node->field_catering_provider['und'][0]['target_id']);
                if (!empty($catering_provider)) {
                    $catering_provder_name = $catering_provider->name;
                }
            }
        }
        if (!empty($node)) {
            if (is_object($node)) {
                if (!empty($node->field_date)) {
                    if (!empty($node->field_date['und'][0]['value'])) {
                        $start_date = $node->field_date['und'][0]['value'];
                    }
                }
            } // code...
        }
        $monday = date('d/m/Y', strtotime('this week monday', $start_date));
        $sunday = date('d/m/Y', strtotime('this week friday', $start_date));
        $alias = t('catering') . '/' . $monday . '-' . $sunday;
        if (!empty($catering_provder_name)) {
            $alias .= '/' . $catering_provder_name;
        }
        $lookup = drupal_lookup_path('source', $alias, $node->language);
        if ($lookup) {
            if ($node->path['alias'] != $alias) {
                form_set_error('field_catering_provider', t('This catering provider has got menu already for this week'));
            }
        }
    }
}

function hitsa_catering_week_page()
{
    $build = array();

    return $build;
}

/**
 * Implements hook_node_info().
 **/
function hitsa_catering_node_info()
{
    $site_default_language = language_default();
    $items = array(
        'catering' => array(
            'name' => t('Nädalamenüü'),
            'type' => 'catering',
            'base' => 'node_content',
            'description' => t('Catering data.'),
            'has_title' => true,
            'title_label' => t('Title'),
            'custom' => 1,
            'modified' => 1,
            'locked' => 0,
        ),
    );
    variable_set('language_content_type_catering', TRANSLATION_ENABLED);
    variable_set('i18n_node_options_catering', array('required'));
    return $items;
}


/**
 * Implements hook_form_alter().
 **/
function hitsa_catering_form_alter(&$form, &$form_state, $form_id)
{
    switch ($form_id) {
        case 'catering_node_form':
            $form['#validate'][] = 'hitsa_catering_validate_dates';
            if (!empty($form['field_catering_provider'])) {
                $catering_options = $form['field_catering_provider']['und']['#options'];
                if (count($catering_options) == 0) {
                    if (isset($form['field_catering_provider']['und']['#options']['_none'])) {
                        $form['field_catering_provider']['#access'] = false;
                    }
                } elseif (count($catering_options) == 1 && isset($catering_options['_none'])) {
                    $form['field_catering_provider']['#access'] = false;
                } else {
                    unset($form['field_catering_provider']['und']['#options']['_none']);
                }
            }
            $form['title']['#required'] = false;
            $form['title']['#access'] = false;
            $used_dates = hitsa_catering_get_all_catering_dates();
            // add js that controls already used dates.
            $form['#attached']['js'] = array(
                drupal_get_path('module', 'hitsa_catering') . '/js/popup_calendar.js',
            );
            $form['#attached']['js'][] = array(
                'data' => array('hitsa_catering' => array('dates' => $used_dates)),
                'type' => 'setting',
            );

            break;
        case 'taxonomy_form_term':
            if (!empty($form['#bundle']) && $form['#bundle'] == 'catering_provider') {
                if (!empty($form['name'])) {
                    $form['name']['#title'] = t('Business name');
                }
            }
            if (!empty($form['vocabulary_machine_name'])) {
                if ($form['vocabulary_machine_name']['#value'] == 'catering_provider') {
                    $form['#validate'][] = 'hitsa_catering_taxonomy_term_validate';
                }
            }
            break;
    }
}

/*function hitsa_catering_paragraphs_info() {
  $items = array(
    'catering_food_by_day' => array(
    'name' => 'Food',
      'bundle' => 'catering_food_by_day',
      'locked' => '1',
    ),
  );

  return $items;
}*/
function hitsa_catering_validate_dates($form, &$form_state)
{
    if (!empty($form_state['values'])) {
        if (!empty($form_state['values']['field_date'])) {
            if (!empty($form_state['values']['field_date']['und'][0]['value'])) {
                $monday_date = $form_state['values']['field_date']['und'][0]['value'];
                $monday_day = date('N', $monday_date);
                if ($monday_day != 1) {
                    form_set_error('field_date', t('You have to choose date'));
                }
                if ($form_state['values']['field_date']['und'][0]['value'] == $form_state['values']['field_date']['und'][0]['value2']) {
                    form_set_error('field_date', t('You have to choose date'));
                }
            }
        } else {
            form_set_error('field_date', t('You have to choose date'));
        }
    }
}
function hitsa_catering_get_all_catering_dates()
{
    $nids = array();
    $dates = array();

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    //->propertyCondition('status', NODE_PUBLISHED);
    $query->entityCondition('bundle', array('catering'), 'IN');
    $result = $query->execute();
    if ($result && !empty($result['node'])) {
        foreach ($result['node'] as $nid => $value) {
            $nids[] = $nid;
        }
    }
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $node) {
        $dates[] = strtotime($node->field_date['und'][0]['value']);
        $dates[] = strtotime($node->field_date['und'][0]['value2']);
    }

    return $dates;
}

function hitsa_catering_node_insert($node)
{
    if ($node->type == 'catering') {
        if (!empty($node)) {
            if (is_object($node)) {
                if (!empty($node->field_date)) {
                    if (!empty($node->field_date['und'][0]['value'])) {
                        $start_date = $node->field_date['und'][0]['value'];
                    }
                }
            } // code...
        }
        $language_list = language_list();
        $language = $node->language;
        $lookup_main = drupal_lookup_path('source', t('catering'), $node->language);
        $catering_provder_name = null;
        if (!empty($node->field_catering_provider)) {
            if (!empty($node->field_catering_provider['und'][0])) {
                $catering_provider = taxonomy_term_load($node->field_catering_provider['und'][0]['target_id']);
                $catering_provder_name = $catering_provider->name;
            }
        }
//        if (!($lookup_main)) {
//            $path_main = array(
//                'source' => 'catering',
//                'alias' => t('catering'),
//                'pid' => null,
//                'language' => $node->language,
//                'pathauto' => 0,
//            );
//            path_save($path_main);
//        }
        $monday = date('d/m/Y', strtotime('this week monday', $start_date));
        $sunday = date('d/m/Y', strtotime('this week friday', $start_date));
        hitsa_catering_check_block_visibility(t('catering'), 'catering');
        $alias = t('catering') . '/' . $monday . '-' . $sunday;
        if (!empty($catering_provder_name)) {
            $alias .= '/' . $catering_provder_name;
        }
        $node->path = array(
            'alias' => $alias,
            'pid' => (!empty($node->path['pid'])) ? $node->path['pid'] : null,
            'source' => 'node/' . $node->nid,
            'language' => $node->language,
            'pathauto' => 0,
        );
    }
    if (!empty($node)) {
        return $node;
    }
}

/**
 * Implement hook_node_presave()
 */
function hitsa_catering_node_presave($node)
{
    // Set first+last name as node title.
    $start_date = '';
    if ($node->type === 'catering') {
        if (!empty($node)) {
            if (is_object($node)) {
                if (!empty($node->field_date)) {
                    if (!empty($node->field_date['und'][0]['value'])) {
                        $start_date = $node->field_date['und'][0]['value'];
                    }
                }
            } // code...
        }

        if ($start_date) {
            $catering_provder_name = null;
            if (!empty($node->field_catering_provider)) {
                if (!empty($node->field_catering_provider['und'][0])) {
                    $catering_provider = taxonomy_term_load($node->field_catering_provider['und'][0]['target_id']);
                    $catering_provder_name = $catering_provider->name;
                }
            }
            $monday = date('d/m/Y', strtotime('this week monday', $start_date));
            $sunday = date('d/m/Y', strtotime('this week friday', $start_date));
            if (!empty($node->nid)) {
                if (!empty($monday) && !empty($sunday)) {
                    $lookup_main = drupal_lookup_path('source', t('catering'), $node->language);
//                    if (!($lookup_main)) {
//                        $path_main = array(
//                            'source' => 'catering',
//                            'alias' => t('catering'),
//                            'pid' => null,
//                            'language' => $node->language,
//                            'pathauto' => 0,
//                        );
//                        path_save($path_main);
//                    }

                    hitsa_catering_check_block_visibility(t('catering'), 'catering');
                    $alias = t('catering') . '/' . $monday . '-' . $sunday;
                    if (!empty($catering_provder_name)) {
                        $alias .= '/' . $catering_provder_name;
                    }
                    $node->path = array(
                        'alias' => $alias,
                        'pid' => (!empty($node->path['pid'])) ? $node->path['pid'] : null,
                        'source' => 'node/' . $node->nid,
                        'language' => $node->language,
                        'pathauto' => 0,
                    );
                }
            }
            $week = $monday . ' - ' . $sunday;
            $node->title = truncate_utf8(sprintf(t('Menu week:') . ' %s', $week), 255) . ' ' . $catering_provder_name;
        }
    }
//    exit();
}

function hitsa_catering_week($start_date = null)
{
    global $language;
    $build = array();
    $catering_provider_tid = null;
    $catering_provider = null;
    $current_path = current_path();
    $menu_items = menu_get_item($current_path);
    $node_header_part = null;
    if (!empty($menu_items)) {
        if (!empty($menu_items['page_arguments'][0])) {
            if (is_object($menu_items['page_arguments'][0])) {
                $node = $menu_items['page_arguments'][0];
                if ($node->type == 'catering') {

                    $lookup = drupal_lookup_path('source', t('catering'), $node->language);
                    if (empty($lookup)) {
                        $lookup = drupal_lookup_path('source', t('content/catering'), $node->language);
                    }
                    $lookup = drupal_lookup_path('source', t('toitlustamine'), $node->language);
                    if (empty($lookup)) {
                        $lookup = drupal_lookup_path('source', t('content/toitlustamine'), $node->language);
                    }
                    $lookup = drupal_lookup_path('source', t('pitanie'), $node->language);
                    if (empty($lookup)) {
                        $lookup = drupal_lookup_path('source', t('content/pitanie'), $node->language);
                    }
                    $node_header = menu_get_object("node", 1, $lookup);
                    $node_header_part = hitsa_catering_generate_header($node_header);
                    $build['catering_header']['#markup'] = $node_header_part;
                    $type = 'catering';
                    if (!empty($type)) {
                            $header_content = hitsa_core_get_content_by_type('node', 'content_page', $language->language, array('cur_type' => 'catering'));
                            if (!empty($header_content)) {
                                $header_nids = array_keys($header_content['node']);
                                $header = entity_load('node', $header_nids);
                                foreach ($header as $header_key => $header_value) {
                                    $header_content_html = hitsa_curriculum_generate_header($header_value);
                                    $node_header_part = $header_content_html;
                                    $build['catering_header']['#markup'] = $node_header_part;
                                    break;
                                }
                            }
                        
                    }
                }
                if (!empty($node->field_catering_provider)) {
                    $catering_provider_tid = $node->field_catering_provider['und'][0]['target_id'];
                }
                if (!empty($node->field_date)) {
                    $start_date = strval($node->field_date['und'][0]['value']);
                }
            }
        }
    }

    global $language;
    if ($start_date == null) {
        $start_date = date('U');
    } else {
        //   $start_date = strtotime($start_date);
    }
    $tabs = menu_local_tabs();
    if (!empty($tabs)) {
        $tabs = drupal_render($tabs);
        $build['catering_edit']['#markup'] = $tabs;
    }
    //krumo($start_date);
    $monday = date("U", strtotime('this week monday', $start_date));

    $sunday = date("U", strtotime('sunday this week', $start_date));
//    krumo($monday);
//    krumo($sunday);

    $query = db_select('field_data_field_date', 'fdfd');
    $query->fields('fdfd');
    $query->condition('fdfd.field_date_value', $monday, '>=');
    $query->condition('fdfd.field_date_value2', $sunday, '<=');
    $query->join('node', 'n', 'fdfd.entity_id=n.nid');
    $query->fields('n');
    $query->condition('n.status', 1, '=');
    $query->condition('n.language', $language->language, '=');
    $results = $query->execute();
    $menus = array();
    foreach ($results as $value) {
        $menus[] = $value;
    }
    $providers = array();
    foreach ($menus as $menu) {
        $loaded_menu = !empty($menu) ? node_load($menu->nid) : null;
        if (!empty($loaded_menu)) {
            if (!empty($loaded_menu->field_catering_provider)) {
                $providers[] = array(
                    'provider' => taxonomy_term_load($loaded_menu->field_catering_provider['und'][0]['target_id']),
                    'menu' => $menu
                );
                if (!isset($first_provider)) {
                    $first_provider = $loaded_menu->field_catering_provider['und'][0]['target_id'];
                }
            }
        }
    }
    $catering_html = null;
    if (!empty($loaded_menu->field_catering_provider)) {
        $catering_provider = taxonomy_term_load($loaded_menu->field_catering_provider['und'][0]['target_id']);
        if (!empty($catering_provider)) {
            $catering_html = hitsa_catering_provider_html($catering_provider);
        }
    }
    $provider_count = 0;
    $provider_to_htmlize = array();
    if (!empty($providers) and count($providers) > 1) {
        $catering_providers_sidemenu = hitsa_catering_provider_side_menu($providers);

        $catering_mobile = hitsa_catering_provider_side_menu($providers);
        $catering_mobile = '<div class="row sm-show no-print">
    <div class="col-12">
        <div class="accordion" data-plugin="accordion" data-allClosed="true">
            <div class="accordion-entry">
                <div class="accordion-title">' . t('More caterers') . '</div>
                <div class="accordion-content">' . $catering_mobile . '</div><!--/accordion-content-->

                </div><!--/accordion-entry-->
            </div><!--/accordion-->
        </div><!--/col-12-->
    </div><!--/row-->';
        $build['catering']['catering_provider']['#prefix'] = '<div class="col-3 sm-hide no-print d-flex">';
        $build['catering']['catering_provider']['#suffix'] = '</div>';
        $build['catering']['catering_provider']['#markup'] = $catering_providers_sidemenu;
        $build['catering']['catering_table']['#prefix'] = '<div class="col-9 sm-12"><article>';
        $build['catering']['catering_table']['#suffix'] = '</div></article>';
    } else {
        $build['catering']['catering_table']['#prefix'] = '<div class="col-12 sm-12"><article>';
        $build['catering']['catering_table']['#suffix'] = '</div></article>';
    }

    $query = db_select('field_data_field_date', 'fdfd');
    $query->fields('fdfd');
    $query->condition('fdfd.field_date_value', $monday, '>=');
    $query->condition('fdfd.field_date_value2', $sunday, '<=');
    $query->join('node', 'n', 'fdfd.entity_id=n.nid');
    $query->fields('n');
    $query->condition('n.language', $language->language, '=');
    if (!empty($catering_provider_tid)) {
        if (!empty($catering_provider_tid)) {
            $query->join('field_data_field_catering_provider', 'fdfcp', 'n.nid=fdfcp.entity_id');
            $query->condition('fdfcp.field_catering_provider_target_id', $catering_provider_tid, '=');
        }
    }
    if (!empty($first_provider)) {
        $query->join('field_data_field_catering_provider', 'fdfcp', 'n.nid=fdfcp.entity_id');
        $query->condition('fdfcp.field_catering_provider_target_id', $first_provider, '=');
    }
    $query->condition('n.status', 1, '=');
    $results = $query->execute();
    foreach ($results as $menu_items) {
        $menu = $menu_items;
    }
    $loaded_menu = !empty($menu) ? node_load($menu->nid) : null;
    $catering_html = null;
    if (!empty($loaded_menu->field_catering_provider)) {
        $catering_provider = taxonomy_term_load($loaded_menu->field_catering_provider['und'][0]['target_id']);
        if (!empty($catering_provider)) {
            $catering_html = hitsa_catering_provider_html($catering_provider);
        }
        $nmenu_object = menu_get_object('node', 1);
        if ($nmenu_object->type == 'content_page') {
            $catering_providers_sidemenu = hitsa_catering_provider_side_menu($providers, $loaded_menu->nid);
            $build['catering']['catering_provider']['#markup'] = $catering_providers_sidemenu;
            $catering_mobile = hitsa_catering_provider_side_menu($providers, $loaded_menu->nid);
            $catering_mobile = '<div class="row sm-show no-print">
    <div class="col-12">
        <div class="accordion" data-plugin="accordion" data-allClosed="true">
            <div class="accordion-entry">
                <div class="accordion-title">' . t('More caterers') . '</div>
                <div class="accordion-content">' . $catering_mobile . '</div><!--/accordion-content-->

                </div><!--/accordion-entry-->
            </div><!--/accordion-->
        </div><!--/col-12-->
    </div><!--/row-->';
        }
    }

    $catering_header = hitsa_catering_catering_header($loaded_menu);
    $catering_table = hitsa_catering_paragraphs__create_table($loaded_menu);

    if (!empty($catering_table)) {
        $build['catering']['#prefix'] = '
            <div class="block no-padding">
            <div class="row">



            ';
        $build['catering']['#suffix'] = '</div> </div><!--/block-->';
        $build['catering']['#type'] = 'container';
        $build['catering']['#theme_wrappers'] = array();
        $build['catering']['catering_table']['#markup'] = $catering_header . $catering_table . $catering_html;
        if (!empty($catering_mobile)) {
            $build['catering']['#prefix'] = $catering_mobile . $build['catering']['#prefix'];
        }
    }
    return $build;
}

/**
 * Funktsioon, mis suudab genereerida paragraphidega tehtud asjast tabeli
 *
 */
function hitsa_catering_paragraphs__create_table($loaded_menu)
{
    $monday = (!empty($loaded_menu->field_catering_monday) ? $loaded_menu->field_catering_monday['und'] : null);
    $tuesday = (!empty($loaded_menu->field_catering_tuesday) ? $loaded_menu->field_catering_tuesday['und'] : null);
    $wednesday = (!empty($loaded_menu->field_catering_wednesday) ? $loaded_menu->field_catering_wednesday['und'] : null);
    $thursday = (!empty($loaded_menu->field_catering_thursday) ? $loaded_menu->field_catering_thursday['und'] : null);
    $friday = (!empty($loaded_menu->field_catering_friday) ? $loaded_menu->field_catering_friday['und'] : null);
    $pictures = (!empty($loaded_menu->field_catering_pictures) ? $loaded_menu->field_catering_pictures['und'] : null);
    $days = array(
        'Monday' => $monday,
        'Tuesday' => $tuesday,
        'Wednesday' => $wednesday,
        'Thursday' => $thursday,
        'Friday' => $friday
    );

    // dpm($loaded_menu);
    // dpm($monday);
    // dpm($tuesday);
    // dpm($wednesday);
    // dpm($thursday);
    // dpm($friday);
    $row_names = array();
    $day_meals = array();
//    dpm($days);
    $meals_array = array();
//    dpm($days);


    foreach ($days as $day_key => $day) {
        if ($day != null) {
            foreach ($day as $meal) {
                $meal = entity_load_single('paragraphs_item', $meal['value']);
                if (!empty($meal->field_food_type)) {
                    if (!empty($meal->field_food_subcategory)) {
                        $subcategory = taxonomy_term_load($meal->field_food_subcategory['und'][0]['target_id']);
                        $subcategory->dishes = array();
                        if (!empty($meal->field_food_type['und'][0]['entity'])) {
                            $meals_array[$meal->field_food_type['und'][0]['entity']->name]['foods'][$subcategory->name] = $subcategory;
                        } else {
                            $food_type = taxonomy_term_load($meal->field_food_type['und'][0]['target_id']);
                            if (!empty($food_type)) {
                                $meals_array[$food_type->name]['foods'][$subcategory->name] = $subcategory;
                            }
                        }
                    }
                    if (!empty($subcategory)) {
                        $food_type = taxonomy_term_load($meal->field_food_type['und'][0]['target_id']);

                        $row_names[$food_type->name] = $food_type;
                        if (!empty($meal->field_food_name)) {
                            if (!empty($subcategory->field_dessert_section) && !empty($subcategory->field_dessert_section['und'][0]['value']) && $subcategory->field_dessert_section['und'][0]['value'] == 1) {
                                $day_meals[$day_key][$food_type->name]['Desserts'][] = $meal->field_food_name['und'][0]['value'];
                            } else {
                                $day_meals[$day_key][$food_type->name][] = $meal->field_food_name['und'][0]['value'];
                            }
                        }
                    }
                }
            }
        } else {
            $day_meals[$day_key] = null;
        }
    }
    foreach ($day_meals as $day_key => $day_meal) {
        if (!empty($day_meal)) {
            foreach ($day_meal as $food_cat_key => $foods) {
                if (!empty($foods['Desserts'])) {
                    foreach ($foods['Desserts'] as $dessert_key => $dessert) {
                        $day_meals[$day_key][$food_cat_key][] = array('name' => $dessert, 'type' => 'dessert');
                    }
                    unset($day_meals[$day_key][$food_cat_key]['Desserts']);
                }
            }
        }
    }
    $monday_date = '';
    $tuesday_date = '';
    $wednesday_date = '';
    $thursday_date = '';
    $friday_date = '';
    if (!empty($loaded_menu->field_date)) {
        $start_date = $loaded_menu->field_date['und'][0]['value'];
        $monday_date = date('d.m', strtotime('monday midnight this week', $start_date));
        $tuesday_date = date('d.m', strtotime('tuesday midnight  this week', $start_date));
        $wednesday_date = date('d.m', strtotime('wednesday midnight  this week', $start_date));
        $thursday_date = date('d.m', strtotime('thursday midnight  this week', $start_date));
        $friday_date = date('d.m', strtotime('friday midnight  this week', $start_date));
    }
    if (!empty($meals_array)) {
        $output = '<div class="table_wrapper" data-plugin="responsiveTable">';
        $meals_correct_array = array();
        foreach ($day_meals as $day_key => $day_foods) {
            if (!empty($day_foods)) {
                foreach ($day_foods as $food_key => $food) {
                    $meals_correct_array[$food_key][$day_key] = $food;
                    if (!isset($meals_correct_array[$food_key]['count'])) {
                        $meals_correct_array[$food_key]['count'] = 0;
                    }
                    $meals_correct_array[$food_key]['count'] = (count($food) > $meals_correct_array[$food_key]['count']) ? count($food) : $meals_correct_array[$food_key]['count'];
                    $dessert_location = 0;
                    $dessert_count = 0;
                    foreach ($food as $food_item_key => $food_item) {
                        if (is_array($food_item)) {
                            if ($food_item['type'] == 'dessert') {
                                if (isset($meals_correct_array[$food_key]['dessert_location'])) {
                                    $meals_correct_array[$food_key]['dessert_location'] = $meals_correct_array[$food_key]['dessert_location'] < $dessert_location ? $dessert_location : $meals_correct_array[$food_key]['dessert_location'];
                                } else {
                                    $meals_correct_array[$food_key]['dessert_location'] = $dessert_location;
                                }
                                $dessert_count++;
                                if (isset($meals_correct_array[$food_key]['des_count'])) {
                                    $meals_correct_array[$food_key]['des_count'] = $meals_correct_array[$food_key]['des_count'] < $dessert_count ? $dessert_count : $meals_correct_array[$food_key]['des_count'];
                                } else {
                                    $meals_correct_array[$food_key]['des_count'] = $dessert_count;
                                }
                            }
                        }

                        $dessert_location++;
                    }
                    if (isset($meals_correct_array[$food_key]['des_count'])) {
                        if ($meals_correct_array[$food_key]['des_count'] > 1) {
                            if ($meals_correct_array[$food_key]['count'] - $meals_correct_array[$food_key]['dessert_location'] == 1) {
                                $meals_correct_array[$food_key]['count'] = $meals_correct_array[$food_key]['count'] - 1 + $meals_correct_array[$food_key]['des_count'];
                            }
                        }
                    }
                }
            }
        }
        $output .= '<table>';
        $output .= '<thead>';
        $output .= '<tr>';
        $output .= '<th>';
        $output .= '</th>';
        $output .= '<th>';
        $output .= t('Monday');
        $output .= '<br/>';
        $output .= $monday_date;
        $output .= '</th>';
        $output .= '<th>';
        $output .= t('Tuesday');
        $output .= '<br/>';
        $output .= $tuesday_date;
        $output .= '</th>';
        $output .= '<th>';
        $output .= t('Wednesday');
        $output .= '<br/>';
        $output .= $wednesday_date;
        $output .= '</th>';
        $output .= '<th>';
        $output .= t('Thursday');
        $output .= '<br/>';
        $output .= $thursday_date;
        $output .= '</th>';
        $output .= '<th>';
        $output .= t('Friday');
        $output .= '<br/>';
        $output .= $friday_date;
        $output .= '</th>';
        $output .= '</tr>';
        $output .= '</thead>';
        foreach ($meals_correct_array as $meal_key => $meal_days) {
            $output .= '<tbody>';
            $desserts_started = false;
            for ($i = 0; $i < $meal_days['count']; $i++) {
                if (isset($meal_days['dessert_location']) && $i == ($meal_days['dessert_location'])) {
                    $desserts_started = true;
                    $output .= '<tr class = "dashed-border"> ';
                } else {
                    $output .= '<tr> ';
                }
                if ($i == 0) {
                    $output .= '<td rowspan="' . $meal_days['count'] . '">';
                    $output .= '<b>' . $meal_key . '</b>';
                    $output .= '</td>';
                }
                foreach ($days as $day_key => $ehh) {
                    if (!empty($meal_days[$day_key])) {
                        if (!empty($meal_days[$day_key][$i])) {
                            if (!is_array($meal_days[$day_key][$i])) {
                                $output .= '<td>' . $meal_days[$day_key][$i] . '</td>';
                                unset($meal_days[$day_key][$i]);
                            } else {
                                if ($desserts_started == false) {
                                    $output .= '<td></td>';
                                }
                            }
                        } else {
                            if ($desserts_started == false) {
                                $output .= '<td></td>';
                            }
                        }
                    } else {
                        if ($desserts_started == false) {
                            $output .= '<td></td>';
                        }
                    }
                }
                if ($desserts_started == true) {
                    foreach ($days as $day_key => $ehh) {
                        if (!empty($meal_days[$day_key])) {
                            foreach ($meal_days[$day_key] as $dessert_key => $dessert) {
                                if (is_array($dessert)) {
                                    $output .= '<td>' . $dessert['name'] . '</td>';
                                    unset($meal_days[$day_key][$dessert_key]);
                                    break;
                                } else {
                                    $output .= '<td></td>';
                                }
                            }
                        } else {
                            $output .= '<td></td>';
                        }
                    }
                }
                $output .= '</tr>';
            }

            $output .= '</tbody>';
        }
        $output .= '</table>';


        $output .= '</div><!--/table-wrapper-->';
        if (!empty($pictures)) {
            $output .= hitsa_catering_pictures_generator($pictures);
        }
        return $output;
    }
}

function hitsa_catering_provider_html($provider)
{
    $email = null;
    $email_out = null;
    $phone_out = null;
    $address_out = null;
    $homepage_out = null;
    if (!empty($provider->field_email)) {
        $email = $provider->field_email['und'][0]['email'];
    }
    $homepage = null;
    if (!empty($provider->field_homepage)) {
//        dpm($provider);
        $homepage = $provider->field_homepage['und'][0]['url'];
        $title = (!empty($provider->field_homepage['und'][0]['title'])) ? $provider->field_homepage['und'][0]['title'] : $homepage;
        $homepage_out .= '<li>';
        $homepage_out .= '                      <div class="before-home"></div>';
        $homepage_out .= '                      <div class="list-details_text">';
        $homepage_out .= '                         <p><a href="' . $homepage . '" target="_blank">' . $title . '</a></p>';
        $homepage_out .= '                      </div><!--/list-details_text-->';
        $homepage_out .= '                   </li>';
    }
    $phone = null;
    if (!empty($provider->field_phone_number)) {
        $phone = check_plain($provider->field_phone_number['und'][0]['value']);
    }
    $output = '<div class="row">';

    if (!empty($provider->field_email)) {
        $email = $provider->field_email['und'][0]['email'];

        $email_out .= '                         <li>';
        $email_out .= '                            <div class="before-envelope"></div>';
        $email_out .= '                            <div class="list-details_text">';
        $email_out .= '                               <p><a class="spamspan" href="mailto:' . $email . '">' . $email . '</a></p>';
        $email_out .= '                            </div><!--/list-details_text-->';
        $email_out .= '                         </li>';
    }
    if (!empty($provider->field_phone_number)) {
        $phone = $provider->field_phone_number['und'][0]['value'];
        $phone_out .= '                         <li>';
        $phone_out .= '                            <div class="before-phone"></div>';
        $phone_out .= '                            <div class="list-details_text">';
        $phone_out .= '                               <p>' . $phone . '</p>';
        $phone_out .= '                            </div><!--/list-details_text-->';
        $phone_out .= '                         </li>';
    }
    if (!empty($provider->field_provider_address)) {
        $address = $provider->field_provider_address['und'][0]['value'];
        $address_out .= '                         <li>';
        $address_out .= '                            <div class="before-location"></div>';
        $address_out .= '                            <div class="list-details_text">';
        $address_out .= '                               <p>' . $address . '</p>';
        $address_out .= '                            </div><!--/list-details_text-->';
        $address_out .= '                         </li>';
    }
    $output .= '</div>';

    if (!empty($images)) {
        $output .= '  <div class="row">';
        foreach ($images as $key => $image) {
            // code...
            $output .= '     <div class="col-6">';
            $output .= '        <figure>';
            $output .= $image;
            $output .= (!empty($captions) && !empty($captions[$key])) ? '          <figcaption>' . $captions[$key] . '</figcaption>' : '';
            $output .= '        </figure>';
            $output .= '     </div><!--/col-6-->';
        }
        $output .= '  </div><!--/row-->';
    }
    $output .= '<p><b>' . $provider->name . '</b></p>';
    $output .= '<ul class="list-details">';
    $output .= (!empty($homepage_out)) ? $homepage_out : '';
    $output .= (!empty($email_out)) ? $email_out : '';
    $output .= (!empty($phone_out)) ? $phone_out : '';
    $output .= (!empty($address_out)) ? $address_out : '';
    $output .= '                      </ul><!--/list-details-->';
    return $output;
}

function hitsa_catering_provider_side_menu($providers = null, $active = null)
{
    $output = null;
    $class = '';
    $current_path = current_path();
    if (!empty($providers) && is_array($providers)) {
        $count = count($providers);
        if ($count > 0) {
            $output .= '<ul class="side-menu" data-plugin="dropdownMenu">';
            foreach ($providers as $provider) {
                if (!empty($provider['menu'])) {
                    $link = url('node/' . $provider['menu']->nid);
                    if ('node/' . $provider['menu']->nid == $current_path || $provider['menu']->nid == $active) {
                        $class = 'active';
                    } else {
                        $class = '';
                    }
                }
                if (!empty($provider['provider']) && !empty($provider['provider']->field_catering_provider_big_name)) {
                    $provider_name = $provider['provider']->field_catering_provider_big_name['und'][0]['value'];
                } else {
                    $provider_name = $provider['provider']->name;
                }
                $output .= '<li class="' . $class . '"><a href="' . $link . '">' . $provider_name . '</a>';
            }
            $output .= '</ul>';
            return $output;
        }
    }
}

function hitsa_catering_check_block_visibility($translated, $not_translated)
{
    $query = db_select('block', 'block');
    $query->condition('block.delta', 'catering_block', '=');
    $query->condition('block.theme', 'hitsa', '=');
    $query->fields('block');
    $result = $query->execute();
    $source = $translated . '/*';
    while ($block = $result->fetchAssoc()) {
        if (strpos($block['pages'], $source) == false) {
            $block['pages'] .= "\n" . $source;
            $update = db_update('block');
            $update->condition('bid', $block['bid'], '=');
            $update->fields(array(
                'pages' => $block['pages'],
            ));
            $update->execute();
        }
        $pages = explode("\n", $block["pages"]);
        $translated_page = false;
        foreach ($pages as $page) {
            if ($page == $translated) {
                $translated_page = true;
            }
        }
        if ($translated_page == false) {
            $block['pages'] .= "\n" . $translated;
            $update = db_update('block');
            $update->condition('bid', $block['bid'], '=');
            $update->fields(array(
                'pages' => $block['pages'],
            ));
            $update->execute();
        }
    }
    return;
}

function hitsa_catering_generate_header($node)
{
    $output = '';
    if (!empty($node)) {
        global $user;

        $edit_links = '';
        if (!empty($user)) {
            if ($user->uid > 0) {
                $edit_url = url('node/' . $node->nid . '/edit');
                $edit_links = '<ul class="tabs primary"><li><a href="' . $edit_url . '">' . t('Edit') . '</a></li></ul>';
            }
        }
        if (!empty($edit_links)) {
            $output .= $edit_links;
        }
        $output .= '<div class="block">';
        $output .= '<h2 class="block-title">' . $node->title . '</h2>';
        $output .= '<div class="row-spacer-xs"></div>';
        $output .= '<div class="row">';
        $output .= '   <div class="col-8 sm-12">';
        $output .= '      <article>';
        if (!empty($node->body)) {
            if (!empty($node->body['und'][0]['summary'])) {
                $intro = $node->body['und'][0]['summary'];
            }
        }
        if (!empty($node->body)) {
            if (!empty($node->body['und'][0]['value'])) {
                $body = $node->body['und'][0]['value'];
            }
        }
        if (!empty($intro)) {
            $output .= '         <div class="intro">';
            $output .= $intro;
            $output .= '         </div><!--/intro-->';
        }
        if (!empty($body)) {
            $output .= '         <p>' . $body . '</p>';
        }
        $output .= '      </article>';
        $output .= '   </div><!--/col-8-->';
        $output .= '   <div class="col-4 sm-12">';
        if (!empty($node->cp_image)) {
            $image = $node->cp_image['und'][0];
            $style = 'hc_pictures';
            $image_url = image_style_url($style, $image['uri']);

            $output .= '      <figure>';
            $output .= '        <img src="' . $image_url . '"alt="">';
            $output .= '        <figcaption>' . (!empty($image['title'])) ? $image['title'] : '' . '</figcaption>';
            $output .= '      </figure>';
        }
        $output .= '   </div><!--/col-4-->';
        $output .= '</div><!--/row-->';
        $output .= ' </div>';
    }
    return $output;
}

function hitsa_catering_front_page_block()
{
    global $language;

    $catering_link_tomorrow = '';
    $output = '';
    $icon = '';
    $sub_category_name = '';
    $food_name = '';
    $foods = array();
    $foods_tomorrow = array();
    $today = time();
    $today_day = date('l', $today);
    $today_iso = strtotime('midnight', $today);
    $tomorrow_iso = strtotime('midnight tomorrow');
    $tomorrow_day = date('l', $tomorrow_iso);
    $next_week = false;
    if ($today_day == 'Friday') {
        $next_week = false;
        $tomorrow_iso = strtotime('monday next week');
        $tomorrow_day = date('l', $tomorrow_iso);
    }
    if (!empty($today_iso)) {
        $query = db_select('node', 'n');
        $query->condition('n.type', 'catering', '=');
        $query->fields('n');
        $query->condition('n.language', $language->language, '=');
        if (!empty($today_iso)) {
            $query->join('field_data_field_date', 'fdfd', 'n.nid=fdfd.entity_id');
            $query->condition('fdfd.bundle', 'catering', '=');
            $query->condition('fdfd.field_date_value', $today_iso, '<=');
            $query->condition('fdfd.field_date_value2', $today_iso, '>=');
        }
        $results = $query->execute();
        foreach ($results as $catering_result) {
            $node = node_load($catering_result->nid);
            if (!empty($node->field_catering_provider)) {
                $catering_provider_loaded = taxonomy_term_load($node->field_catering_provider['und'][0]['target_id']);
                if (!empty($catering_provider_loaded)) {
                    if (!empty($catering_provider_loaded->field_show_on_front_page)) {
                        if ($catering_provider_loaded->field_show_on_front_page['und'][0]['value'] == 1) {
                        } else {
                            continue;
                        }
                    } else {
                        continue;
                    }
                }
            }
            $lower_today = strtolower($today_day);
            $to_check = 'field_catering_' . $lower_today;
            if (!empty($node->$to_check)) {
                foreach ($node->$to_check[LANGUAGE_NONE] as $food) {
                    $id = $food['value'];
                    $food = entity_load_single('paragraphs_item', $id);
                    if (!empty($food->field_food_name)) {
                        $food_name = $food->field_food_name[LANGUAGE_NONE][0]['value'];
//                        $foods[$food_name]['name'] = $food_name;
                        if (!empty($food->field_food_subcategory)) {
                            $food_subcategory = $food->field_food_subcategory[LANGUAGE_NONE][0]['target_id'];
                            $food_subcategory = taxonomy_term_load($food_subcategory);
                            if (!empty($food_subcategory->field_food_icon)) {
                                $icon = 'before-' . $food_subcategory->field_food_icon[LANGUAGE_NONE][0]['value'];
                                $sub_category_name = $food_subcategory->name;
//                                $foods[$food_name]['subcategory'] = $sub_category_name;
//                                $foods[$food_name]['icon'] = $icon;
                                $foods[$sub_category_name][$food_name]['name'] = $food_name;
                                $foods[$sub_category_name][$food_name]['subcategory'] = $sub_category_name;
                                $foods[$sub_category_name][$food_name]['icon'] = $icon;
                            } else {
                                $sub_category_name = $food_subcategory->name;
//                                $foods[$food_name]['subcategory'] = $sub_category_name;
//                                $foods[$food_name]['icon'] = $icon;
                                $foods[$sub_category_name][$food_name]['name'] = $food_name;
                                $foods[$sub_category_name][$food_name]['subcategory'] = $sub_category_name;
                                if ($sub_category_name == 'Dessert') {
                                    $foods[$sub_category_name][$food_name]['icon'] = 'before-sweet';
                                } else {
                                    $foods[$sub_category_name][$food_name]['icon'] = 'before-dinner';
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (!$next_week) {
        if (!empty($tomorrow_iso)) {
            $query = db_select('node', 'n');
            $query->condition('n.type', 'catering', '=');
            $query->fields('n');
            $query->condition('n.language', $language->language, '=');
            if (!empty($today_iso)) {
                $query->join('field_data_field_date', 'fdfd', 'n.nid=fdfd.entity_id');
                $query->condition('fdfd.bundle', 'catering', '=');
                $query->condition('fdfd.field_date_value', $tomorrow_iso, '<=');
                $query->condition('fdfd.field_date_value2', $tomorrow_iso, '>=');
            }
            $results = $query->execute();
            foreach ($results as $catering_result) {
//            dpm($catering_result);
                $node = node_load($catering_result->nid);
                if (!empty($node->field_catering_provider)) {
                    $catering_provider_loaded = taxonomy_term_load($node->field_catering_provider['und'][0]['target_id']);
                    if (!empty($catering_provider_loaded)) {
                        if (!empty($catering_provider_loaded->field_show_on_front_page)) {
                            if ($catering_provider_loaded->field_show_on_front_page['und'][0]['value'] == 1) {
                            } else {
                                continue;
                            }
                        } else {
                            continue;
                        }
                    }
                }
                $lower_tomorrow = strtolower($tomorrow_day);
                $to_check = 'field_catering_' . $lower_tomorrow;

                if (!empty($node->$to_check)) {
//                dpm($node);
                    $f = 0;
                    foreach ($node->$to_check['und'] as $food) {
                        $id = $food['value'];

                        $food = entity_load_single('paragraphs_item', $id);
                        if (!empty($food->field_food_name)) {
                            $food_name = $food->field_food_name['und'][0]['value'];
//                        $foods[$food_name]['name'] = $food_name;
                            if (!empty($food->field_food_subcategory)) {
                                $food_subcategory = $food->field_food_subcategory['und'][0]['target_id'];
                                $food_subcategory = taxonomy_term_load($food_subcategory);

                                if (!empty($food_subcategory->field_food_icon)) {
                                    $icon = 'before-' . $food_subcategory->field_food_icon['und'][0]['value'];
                                    $sub_category_name = $food_subcategory->name;
                                    $foods_tomorrow[$sub_category_name][$f]['name'] = $food_name;
                                    $foods_tomorrow[$sub_category_name][$f]['subcategory'] = $sub_category_name;
                                    $foods_tomorrow[$sub_category_name][$f]['icon'] = $icon;
                                } else {
                                    $sub_category_name = $food_subcategory->name;
//                                $foods[$food_name]['subcategory'] = $sub_category_name;
//                                $foods[$food_name]['icon'] = $icon;
                                    $foods_tomorrow[$sub_category_name][$f]['name'] = $food_name;
                                    $foods_tomorrow[$sub_category_name][$f]['subcategory'] = $sub_category_name;
                                    if ($sub_category_name == 'Dessert') {
                                        $foods_tomorrow[$sub_category_name][$f]['icon'] = 'before-sweet';
                                    } else {
                                        $foods_tomorrow[$sub_category_name][$f]['icon'] = 'before-dinner';
                                    }
                                }
                            }
                        }
                        $f++;
                    }
                }
            }
        }
    }
    if ($next_week) {
        if (!empty($tomorrow_iso)) {
            $query = db_select('node', 'n');
            $query->condition('n.type', 'catering', '=');
            $query->fields('n');
            $query->condition('n.language', $language->language, '=');
            if (!empty($today_iso)) {
                $query->join('field_data_field_date', 'fdfd', 'n.nid=fdfd.entity_id');
                $query->condition('fdfd.bundle', 'catering', '=');
                $query->condition('fdfd.field_date_value', $tomorrow_iso, '<=');
                $query->condition('fdfd.field_date_value2', $tomorrow_iso, '>=');
            }
            $results = $query->execute();
            foreach ($results as $catering_result) {
                $node = node_load($catering_result->nid);
                if (!empty($node->field_catering_provider)) {
                    $catering_provider_loaded = taxonomy_term_load($node->field_catering_provider['und'][0]['target_id']);
                    if (!empty($catering_provider_loaded)) {
                        if (!empty($catering_provider_loaded->field_show_on_front_page)) {
                            if ($catering_provider_loaded->field_show_on_front_page['und'][0]['value'] == 1) {
                            } else {
                                continue;
                            }
                        } else {
                            continue;
                        }
                    }
                }
                $catering_link_tomorrow = url('node' . '/' . $node->nid);
                $lower_tomorrow = strtolower($tomorrow_day);
                $to_check = 'field_catering_' . $lower_tomorrow;
                if (!empty($node->$to_check)) {
                    $f = 0;
                    foreach ($node->$to_check['und'] as $food) {
                        $id = $food['value'];

                        $food = entity_load_single('paragraphs_item', $id);
                        if (!empty($food->field_food_name)) {
                            $food_name = $food->field_food_name['und'][0]['value'];
                            if (!empty($food->field_food_subcategory)) {
                                $food_subcategory = $food->field_food_subcategory['und'][0]['target_id'];
                                $food_subcategory = taxonomy_term_load($food_subcategory);

                                if (!empty($food_subcategory->field_food_icon)) {
                                    $icon = 'before-' . $food_subcategory->field_food_icon['und'][0]['value'];
                                    $sub_category_name = $food_subcategory->name;
                                    $foods_tomorrow[$sub_category_name][$f]['name'] = $food_name;
                                    $foods_tomorrow[$sub_category_name][$f]['subcategory'] = $sub_category_name;
                                    $foods_tomorrow[$sub_category_name][$f]['icon'] = $icon;
                                } else {
                                    $sub_category_name = $food_subcategory->name;
//                                $foods[$food_name]['subcategory'] = $sub_category_name;
//                                $foods[$food_name]['icon'] = $icon;
                                    $foods_tomorrow[$sub_category_name][$f]['name'] = $food_name;
                                    $foods_tomorrow[$sub_category_name][$f]['subcategory'] = $sub_category_name;
                                    if ($sub_category_name == 'Dessert') {
                                        $foods_tomorrow[$sub_category_name][$f]['icon'] = 'before-sweet';
                                    } else {
                                        $foods_tomorrow[$sub_category_name][$f]['icon'] = 'before-dinner';
                                    }
                                }
                            }
                        }
                        $f++;
                    }
                }
            }
        }
    }
    $foods_selected = array();
    if (!empty($foods)) {
        $k = 0;
        foreach ($foods as $food_key => $food) {
            if ($k == 2) {
                break;
            }
            $random_food = array_rand($food, 1);
            $foods_selected[] = '<div class="col-12">
                              <div class="object object-event">
                                 <div class="object-inner">
                                    <a href="" class="object-date">
													<span class="object-date_day ' . $food[$random_food]['icon'] . ' sm-hide"></span>
                                       <span class="object-date_month">' . $food[$random_food]['subcategory'] . '</span>
                                    </a><!--/object-date-->
                                    <span class="object-content object-content_center">
                                    <span  class="object-title">' . $food[$random_food]['name'] . '</span>
                                    </span><!--/object-content-->
                                 </div><!--/object-inner-->
                              </div><!--/object-->
                           </div><!--/col-12-->';
            $k++;
        }
    }
    $foods_selected_tomorrow = array();
    if (!empty($foods_tomorrow)) {
        $f = 0;
        foreach ($foods_tomorrow as $food_key => $food) {
            $food = array_values($food);
            $foods_selected_tomorrow[] = '<div class="col-12">
                              <div class="object object-event">
                                 <div class="object-inner">
                                    <a href="" class="object-date">
													<span class="object-date_day ' . $food[0]['icon'] . ' sm-hide"></span>
                                       <span class="object-date_month">' . $food[0]['subcategory'] . '</span>
                                    </a><!--/object-date-->
                                    <span class="object-content object-content_center">
                                    <span  class="object-title">' . $food[0]['name'] . '</span>
                                    </span><!--/object-content-->
                                 </div><!--/object-inner-->
                              </div><!--/object-->
                           </div><!--/col-12-->';
            $f++;
            if ($f == 2) {
                break;
            }
        }
    }
    $monday = date('d/m/Y', strtotime('this week monday', $today));
    $sunday = date('d/m/Y', strtotime('this week sunday', $today));
    if (!empty($foods_selected) || !empty($foods_selected_tomorrow)) {
        $output .= '

                  <div class="block block-stretch flex-grow" data-plugin="tabs">
                     <h2 class="block-title">' . t('Catering') . '</h2>

                     <div class="row pull-up">
                        <div class="col-12">
                           <a href="javascript:void(0);" data-target="tab-1" class="link-tab active">' . t('Today') . '</a>';
        if ($next_week && !empty($foods_selected_tomorrow)) {
            $output .= '  <a href="javascript:void(0);" data-target="tab-2" class="link-tab">' . t('Next Monday') . '</a>';
        } else {
            if (!empty($foods_selected_tomorrow)) {
                $output .= '<a href="javascript:void(0);" data-target="tab-2" class="link-tab">' . t('Tomorrow') . '</a>';
            }
        }
        $output .= '

                        </div><!--/col-12-->
                     </div><!--/row-->

                     <div data-tab="tab-1" class="active-tab">
                        <div class="row">';
        $i = 0;
        foreach ($foods_selected as $food) {
            $output .= $food;
            if ($i == 0 && count($foods_selected) > 1) {
                $output .= '<hr>';
            }
            $i++;
        }
        $catering_link = '';
        $catering_link = url(t('catering'));
        $output .= '        </div>
                        <hr>
                        <div class="row-spacer-xs"></div>
                        <div class="row">
                           <div class="col-12">
                              <div class="align-center">
                                 <a href="' . $catering_link . '" class="btn btn-filled">' . t('Weekly menu') . '</a>
										</div><!--/align-center-->
                           </div><!--/col-12-->
                        </div><!--/row-->
                     </div><!--/data-tab-1-->

                     <div data-tab="tab-2" class="">

                        <div class="row">
                         ';
        $i = 0;
        foreach ($foods_selected_tomorrow as $food) {
            $output .= $food;
            if ($i == 0 && count($foods_selected_tomorrow) > 1) {
                $output .= '<hr>';
            }
            $i++;
        }
        if (!$next_week) {
            $catering_link_tomorrow = url(t('catering'));
        } else {
        }
        $output .= '
        </div>
                        <hr>

                        <div class="row">
                           <div class="col-12">
                              <div class="align-center">
                                  <a href="' . $catering_link_tomorrow . '" class="btn btn-filled">' . t('Weekly menu') . '</a>
										</div><!--/align-center-->
                           </div><!--/col-12-->
                        </div><!--/row-->
                     </div><!--/tab-2-->

                  </div><!--/block-->';
    }
    return $output;
}

function hitsa_catering_taxonomy_term_validate($form, &$form_state)
{
    if (!empty($form_state['values'])) {
//        if (!empty($form_state['values']['field_homepage'])) {
//            if (!empty($form_state['values']['field_homepage']['und'][0]['value'])) {
//                if (filter_var($form_state['values']['field_homepage']['und'][0]['value'], FILTER_VALIDATE_URL)) {
//                } else {
//                    form_set_error('field_homepage', $form_state['values']['field_homepage']['und'][0]['value'] . t(' is not a valid website'));
//                }
//            }
//        }
        if (!empty($form_state['values']['field_phone_number'])) {
            if (!empty($form_state['values']['field_phone_number']['und'][0]['value'])) {
                $phone_number = $form_state['values']['field_phone_number']['und'][0]['value'];
                if (!preg_match('/^\s*(?:\+?(\d{1,3}))?([-. (]*(\d{1})[-. )]*)?((\d{3})[-. ]*(\d{2,4})(?:[-.x ]*(\d+))?)\s*$/', ($phone_number))) {
                    form_set_error('field_phone_number', t('Entered phone number: ') . $phone_number . t(' is not valid'));
                }
            }
        }
    }
//    exit();
}

function hitsa_catering_pictures_generator($pictures)
{
    $output = '';
    if (!empty($pictures)) {
        $output .= '  <div class="row">';


        foreach ($pictures as $picture) {
            $style = 'hc_pictures';
            $image_url = image_style_url($style, $picture['uri']);
            $output .= '<div class="col-6 sm-12">';
            $output .= '                  <figure>';
            $output .= '                    <img src="' . $image_url . '" alt="">';
            $output .= '                    <figcaption>' . (!empty($picture['title'])) ? $picture['title'] : '' . '</figcaption>';
            $output .= '                  </figure>';
            $output .= '               </div><!--/col-6-->';
        }
        $output .= '
                        </div><!--/row-->';
    }
    return $output;
}

function hitsa_catering_catering_header($content)
{
    $catering_provider_name = '';
    if (!empty($content)) {
        if (!empty($content->field_catering_provider)) {
            $catering_provider_tid = $content->field_catering_provider['und'][0]['target_id'];
            $catering_provider = taxonomy_term_load($catering_provider_tid);
            if (!empty($catering_provider->field_catering_provider_big_name)) {
                $catering_provider_name = $catering_provider->field_catering_provider_big_name['und'][0]['value'];
                $catering_provider_name = check_plain($catering_provider_name);
            } else {
                $catering_provider_name = '&nbsp;';
            }
        }
    }
    if (!empty($content->field_date)) {
        $date_start = $content->field_date['und'][0]['value'];
        $monday = format_date(strtotime('monday midnight', $date_start), 'custom', 'd.m');
        $sunday = format_date(strtotime('friday midnight', $date_start), 'custom', 'd.m');
        $week_text = t('Menu week') . ' ' . $monday . '-' . $sunday;
    }

    $output = '';


    $output = '';
    $output .= '<h3 class="sm-block-title">' . $catering_provider_name;
    $output .= '<span class="btn-bar align-right pull-right sm-hide">';
    $output .= '                         <a href="javscript:void(0);" class="btn-circle before-share" data-plugin="share"></a>';
    $output .= '                          <a href="javascript:window.print();" class="btn-circle before-print"></a>';
    $output .= '                       </span><!--/button-row-->';
    $output .= '                    </h3>';
    $output .= '';
    $output .= '                    ';
    $output .= '                    <h5 class="sm-alignment">';
    if (!empty($week_text)) {
        $output .= $week_text;
    }
    $output .= '<span class="btn-bar align-right pull-right sm-show">';
    $output .= '                          <a href="javscript:void(0);" class="btn-circle before-share" data-plugin="share"></a>';
    $output .= '                          <a href="javascript:window.print();" class="sm-hide btn-circle before-print"></a>';
    $output .= '                       </span><!--/button-row-->';
    $output .= '                    </h5>';
    return $output;
}
